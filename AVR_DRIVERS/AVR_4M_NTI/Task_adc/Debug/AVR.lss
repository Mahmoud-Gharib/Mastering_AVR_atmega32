
AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000035d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000035d0  00003664  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800080  00800080  00003684  2**0
                  ALLOC
  3 .stab         000036c0  00000000  00000000  00003684  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001732  00000000  00000000  00006d44  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008476  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000085b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008726  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a36f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b25a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c008  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c168  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c3f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cbc3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__vector_1>
       8:	0c 94 fd 07 	jmp	0xffa	; 0xffa <__vector_2>
       c:	0c 94 3c 08 	jmp	0x1078	; 0x1078 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ed       	ldi	r30, 0xD0	; 208
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 38       	cpi	r26, 0x8B	; 139
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <main>
      8a:	0c 94 e6 1a 	jmp	0x35cc	; 0x35cc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 af 1a 	jmp	0x355e	; 0x355e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 cb 1a 	jmp	0x3596	; 0x3596 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 bb 1a 	jmp	0x3576	; 0x3576 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d7 1a 	jmp	0x35ae	; 0x35ae <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 bb 1a 	jmp	0x3576	; 0x3576 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d7 1a 	jmp	0x35ae	; 0x35ae <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 af 1a 	jmp	0x355e	; 0x355e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 cb 1a 	jmp	0x3596	; 0x3596 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 bb 1a 	jmp	0x3576	; 0x3576 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 d7 1a 	jmp	0x35ae	; 0x35ae <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 bb 1a 	jmp	0x3576	; 0x3576 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 d7 1a 	jmp	0x35ae	; 0x35ae <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 bb 1a 	jmp	0x3576	; 0x3576 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 d7 1a 	jmp	0x35ae	; 0x35ae <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 bf 1a 	jmp	0x357e	; 0x357e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MADC_voidInit>:
#include "ADC_INTERFACE.h"

void (*Adc_Int_CALL_BACK)(void);

void MADC_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	ADMUX_REG -> VOLTAGE_REFERENCE = AVCC_PIN ;
     b4e:	e7 e2       	ldi	r30, 0x27	; 39
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	80 81       	ld	r24, Z
     b54:	8f 73       	andi	r24, 0x3F	; 63
     b56:	80 64       	ori	r24, 0x40	; 64
     b58:	80 83       	st	Z, r24
	ADMUX_REG -> ADJUST = RIGHT_ADJUST ;
     b5a:	e7 e2       	ldi	r30, 0x27	; 39
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	80 81       	ld	r24, Z
     b60:	8f 7d       	andi	r24, 0xDF	; 223
     b62:	80 83       	st	Z, r24
	ADCSRA_REG -> PRESCALER_DIVISION_FACTOR = DIVISION_BY_128;
     b64:	e6 e2       	ldi	r30, 0x26	; 38
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	80 81       	ld	r24, Z
     b6a:	87 60       	ori	r24, 0x07	; 7
     b6c:	80 83       	st	Z, r24
	ADCSRA_REG -> AutoTrigger = AUTO_TRIGGER_MODE;
     b6e:	e6 e2       	ldi	r30, 0x26	; 38
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	80 62       	ori	r24, 0x20	; 32
     b76:	80 83       	st	Z, r24
	ADCSRA_REG -> Enable = 1;
     b78:	e6 e2       	ldi	r30, 0x26	; 38
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	80 81       	ld	r24, Z
     b7e:	80 68       	ori	r24, 0x80	; 128
     b80:	80 83       	st	Z, r24
} 
     b82:	cf 91       	pop	r28
     b84:	df 91       	pop	r29
     b86:	08 95       	ret

00000b88 <MADC_u16GetDigitalValue>:
u16 MADC_u16GetDigitalValue(void)
{
     b88:	df 93       	push	r29
     b8a:	cf 93       	push	r28
     b8c:	cd b7       	in	r28, 0x3d	; 61
     b8e:	de b7       	in	r29, 0x3e	; 62
#if     READING   == WITH_INTERRUPT
	return (MADC -> ADC_ADC_VALUE);
     b90:	e4 e2       	ldi	r30, 0x24	; 36
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	80 81       	ld	r24, Z
     b96:	91 81       	ldd	r25, Z+1	; 0x01
#elif   READING   == WITHOUT_INTERRUPT
	while(GET_BIT(MADC -> ADC_ADCSRA,4) == 0);
	return (MADC -> ADC_ADC_VALUE);
#endif
}
     b98:	cf 91       	pop	r28
     b9a:	df 91       	pop	r29
     b9c:	08 95       	ret

00000b9e <MADC_voidAdcStartConversion>:
void MADC_voidAdcStartConversion(u8 Copy_u8ChannelNum )
{
     b9e:	df 93       	push	r29
     ba0:	cf 93       	push	r28
     ba2:	0f 92       	push	r0
     ba4:	cd b7       	in	r28, 0x3d	; 61
     ba6:	de b7       	in	r29, 0x3e	; 62
     ba8:	89 83       	std	Y+1, r24	; 0x01
	ADMUX_REG -> ChannelNum = Copy_u8ChannelNum;
     baa:	e7 e2       	ldi	r30, 0x27	; 39
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	89 81       	ldd	r24, Y+1	; 0x01
     bb0:	8f 71       	andi	r24, 0x1F	; 31
     bb2:	98 2f       	mov	r25, r24
     bb4:	9f 71       	andi	r25, 0x1F	; 31
     bb6:	80 81       	ld	r24, Z
     bb8:	80 7e       	andi	r24, 0xE0	; 224
     bba:	89 2b       	or	r24, r25
     bbc:	80 83       	st	Z, r24
#if   START_CONVERSION == FREE_RUNNING_MODE
	ADCSRA_REG -> StartConversion = 1;
	SFIOR_REG -> Auto_Trigger_Source = FREE_RUNNING_MODE;
#elif START_CONVERSION == AUTO_TRIGGER_MODE
	ADCSRA_REG -> StartConversion = 0;
     bbe:	e6 e2       	ldi	r30, 0x26	; 38
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	8f 7b       	andi	r24, 0xBF	; 191
     bc6:	80 83       	st	Z, r24
	SFIOR_REG -> Auto_Trigger_Source = EXTERNAL_INT_0;
     bc8:	e0 e5       	ldi	r30, 0x50	; 80
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	80 81       	ld	r24, Z
     bce:	8f 71       	andi	r24, 0x1F	; 31
     bd0:	80 64       	ori	r24, 0x40	; 64
     bd2:	80 83       	st	Z, r24
#endif
}
     bd4:	0f 90       	pop	r0
     bd6:	cf 91       	pop	r28
     bd8:	df 91       	pop	r29
     bda:	08 95       	ret

00000bdc <MADC_voidAdcIntEnable>:
void MADC_voidAdcIntEnable(void)
{
     bdc:	df 93       	push	r29
     bde:	cf 93       	push	r28
     be0:	cd b7       	in	r28, 0x3d	; 61
     be2:	de b7       	in	r29, 0x3e	; 62
	//TO ENABLE GLOBAL INT
	SET_BIT(SREG,7);
     be4:	af e5       	ldi	r26, 0x5F	; 95
     be6:	b0 e0       	ldi	r27, 0x00	; 0
     be8:	ef e5       	ldi	r30, 0x5F	; 95
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	80 81       	ld	r24, Z
     bee:	80 68       	ori	r24, 0x80	; 128
     bf0:	8c 93       	st	X, r24
	//TO ENABLE ADC_INT
	ADCSRA_REG -> IntEnable = 1;
     bf2:	e6 e2       	ldi	r30, 0x26	; 38
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	80 81       	ld	r24, Z
     bf8:	88 60       	ori	r24, 0x08	; 8
     bfa:	80 83       	st	Z, r24
}
     bfc:	cf 91       	pop	r28
     bfe:	df 91       	pop	r29
     c00:	08 95       	ret

00000c02 <MADC_voidAdcIntDisable>:
void MADC_voidAdcIntDisable(void)
{
     c02:	df 93       	push	r29
     c04:	cf 93       	push	r28
     c06:	cd b7       	in	r28, 0x3d	; 61
     c08:	de b7       	in	r29, 0x3e	; 62
	//TO Disable GLOBAL INT
	CLR_BIT(SREG,7);
     c0a:	af e5       	ldi	r26, 0x5F	; 95
     c0c:	b0 e0       	ldi	r27, 0x00	; 0
     c0e:	ef e5       	ldi	r30, 0x5F	; 95
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	80 81       	ld	r24, Z
     c14:	8f 77       	andi	r24, 0x7F	; 127
     c16:	8c 93       	st	X, r24
	//TO Disable ADC_INT
	ADCSRA_REG -> IntEnable = 0;
     c18:	e6 e2       	ldi	r30, 0x26	; 38
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	80 81       	ld	r24, Z
     c1e:	87 7f       	andi	r24, 0xF7	; 247
     c20:	80 83       	st	Z, r24
}
     c22:	cf 91       	pop	r28
     c24:	df 91       	pop	r29
     c26:	08 95       	ret

00000c28 <MADC_Adc_SET_CALL_BACK>:
void MADC_Adc_SET_CALL_BACK(void(*ptr)(void))
{
     c28:	df 93       	push	r29
     c2a:	cf 93       	push	r28
     c2c:	00 d0       	rcall	.+0      	; 0xc2e <MADC_Adc_SET_CALL_BACK+0x6>
     c2e:	cd b7       	in	r28, 0x3d	; 61
     c30:	de b7       	in	r29, 0x3e	; 62
     c32:	9a 83       	std	Y+2, r25	; 0x02
     c34:	89 83       	std	Y+1, r24	; 0x01
	Adc_Int_CALL_BACK = ptr;
     c36:	89 81       	ldd	r24, Y+1	; 0x01
     c38:	9a 81       	ldd	r25, Y+2	; 0x02
     c3a:	90 93 81 00 	sts	0x0081, r25
     c3e:	80 93 80 00 	sts	0x0080, r24
}
     c42:	0f 90       	pop	r0
     c44:	0f 90       	pop	r0
     c46:	cf 91       	pop	r28
     c48:	df 91       	pop	r29
     c4a:	08 95       	ret

00000c4c <__vector_16>:
/* Prototype for ADC ISR */
void __vector_16(void)     __attribute__((signal));
void __vector_16(void)
{
     c4c:	1f 92       	push	r1
     c4e:	0f 92       	push	r0
     c50:	0f b6       	in	r0, 0x3f	; 63
     c52:	0f 92       	push	r0
     c54:	11 24       	eor	r1, r1
     c56:	2f 93       	push	r18
     c58:	3f 93       	push	r19
     c5a:	4f 93       	push	r20
     c5c:	5f 93       	push	r21
     c5e:	6f 93       	push	r22
     c60:	7f 93       	push	r23
     c62:	8f 93       	push	r24
     c64:	9f 93       	push	r25
     c66:	af 93       	push	r26
     c68:	bf 93       	push	r27
     c6a:	ef 93       	push	r30
     c6c:	ff 93       	push	r31
     c6e:	df 93       	push	r29
     c70:	cf 93       	push	r28
     c72:	cd b7       	in	r28, 0x3d	; 61
     c74:	de b7       	in	r29, 0x3e	; 62
	Adc_Int_CALL_BACK();
     c76:	e0 91 80 00 	lds	r30, 0x0080
     c7a:	f0 91 81 00 	lds	r31, 0x0081
     c7e:	09 95       	icall
}
     c80:	cf 91       	pop	r28
     c82:	df 91       	pop	r29
     c84:	ff 91       	pop	r31
     c86:	ef 91       	pop	r30
     c88:	bf 91       	pop	r27
     c8a:	af 91       	pop	r26
     c8c:	9f 91       	pop	r25
     c8e:	8f 91       	pop	r24
     c90:	7f 91       	pop	r23
     c92:	6f 91       	pop	r22
     c94:	5f 91       	pop	r21
     c96:	4f 91       	pop	r20
     c98:	3f 91       	pop	r19
     c9a:	2f 91       	pop	r18
     c9c:	0f 90       	pop	r0
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	0f 90       	pop	r0
     ca2:	1f 90       	pop	r1
     ca4:	18 95       	reti

00000ca6 <MEXTI_voidEXTIEnable>:
void (*EXT_INT_0_CALL_BACK)(void);
void (*EXT_INT_1_CALL_BACK)(void);
void (*EXT_INT_2_CALL_BACK)(void);

void MEXTI_voidEXTIEnable(u8 Copy_u8EXTI_Num, u8 Copy_u8EXTI_Sense)
{
     ca6:	df 93       	push	r29
     ca8:	cf 93       	push	r28
     caa:	cd b7       	in	r28, 0x3d	; 61
     cac:	de b7       	in	r29, 0x3e	; 62
     cae:	2a 97       	sbiw	r28, 0x0a	; 10
     cb0:	0f b6       	in	r0, 0x3f	; 63
     cb2:	f8 94       	cli
     cb4:	de bf       	out	0x3e, r29	; 62
     cb6:	0f be       	out	0x3f, r0	; 63
     cb8:	cd bf       	out	0x3d, r28	; 61
     cba:	89 83       	std	Y+1, r24	; 0x01
     cbc:	6a 83       	std	Y+2, r22	; 0x02
	SET_BIT(SREG,7);               //TO ENABLE GLOBAL INT
     cbe:	af e5       	ldi	r26, 0x5F	; 95
     cc0:	b0 e0       	ldi	r27, 0x00	; 0
     cc2:	ef e5       	ldi	r30, 0x5F	; 95
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	80 81       	ld	r24, Z
     cc8:	80 68       	ori	r24, 0x80	; 128
     cca:	8c 93       	st	X, r24
	switch(Copy_u8EXTI_Num)
     ccc:	89 81       	ldd	r24, Y+1	; 0x01
     cce:	28 2f       	mov	r18, r24
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	3a 87       	std	Y+10, r19	; 0x0a
     cd4:	29 87       	std	Y+9, r18	; 0x09
     cd6:	89 85       	ldd	r24, Y+9	; 0x09
     cd8:	9a 85       	ldd	r25, Y+10	; 0x0a
     cda:	81 30       	cpi	r24, 0x01	; 1
     cdc:	91 05       	cpc	r25, r1
     cde:	09 f4       	brne	.+2      	; 0xce2 <MEXTI_voidEXTIEnable+0x3c>
     ce0:	6d c0       	rjmp	.+218    	; 0xdbc <MEXTI_voidEXTIEnable+0x116>
     ce2:	29 85       	ldd	r18, Y+9	; 0x09
     ce4:	3a 85       	ldd	r19, Y+10	; 0x0a
     ce6:	22 30       	cpi	r18, 0x02	; 2
     ce8:	31 05       	cpc	r19, r1
     cea:	09 f4       	brne	.+2      	; 0xcee <MEXTI_voidEXTIEnable+0x48>
     cec:	c9 c0       	rjmp	.+402    	; 0xe80 <MEXTI_voidEXTIEnable+0x1da>
     cee:	89 85       	ldd	r24, Y+9	; 0x09
     cf0:	9a 85       	ldd	r25, Y+10	; 0x0a
     cf2:	00 97       	sbiw	r24, 0x00	; 0
     cf4:	09 f0       	breq	.+2      	; 0xcf8 <MEXTI_voidEXTIEnable+0x52>
     cf6:	e9 c0       	rjmp	.+466    	; 0xeca <MEXTI_voidEXTIEnable+0x224>
	{
		case EXT_INT_0:
		SET_BIT(GICR,6);           //TO ENABLE INT0 INT
     cf8:	ab e5       	ldi	r26, 0x5B	; 91
     cfa:	b0 e0       	ldi	r27, 0x00	; 0
     cfc:	eb e5       	ldi	r30, 0x5B	; 91
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	80 81       	ld	r24, Z
     d02:	80 64       	ori	r24, 0x40	; 64
     d04:	8c 93       	st	X, r24
		switch(Copy_u8EXTI_Sense)
     d06:	8a 81       	ldd	r24, Y+2	; 0x02
     d08:	28 2f       	mov	r18, r24
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	38 87       	std	Y+8, r19	; 0x08
     d0e:	2f 83       	std	Y+7, r18	; 0x07
     d10:	8f 81       	ldd	r24, Y+7	; 0x07
     d12:	98 85       	ldd	r25, Y+8	; 0x08
     d14:	81 30       	cpi	r24, 0x01	; 1
     d16:	91 05       	cpc	r25, r1
     d18:	21 f1       	breq	.+72     	; 0xd62 <MEXTI_voidEXTIEnable+0xbc>
     d1a:	2f 81       	ldd	r18, Y+7	; 0x07
     d1c:	38 85       	ldd	r19, Y+8	; 0x08
     d1e:	22 30       	cpi	r18, 0x02	; 2
     d20:	31 05       	cpc	r19, r1
     d22:	2c f4       	brge	.+10     	; 0xd2e <MEXTI_voidEXTIEnable+0x88>
     d24:	8f 81       	ldd	r24, Y+7	; 0x07
     d26:	98 85       	ldd	r25, Y+8	; 0x08
     d28:	00 97       	sbiw	r24, 0x00	; 0
     d2a:	61 f0       	breq	.+24     	; 0xd44 <MEXTI_voidEXTIEnable+0x9e>
     d2c:	ce c0       	rjmp	.+412    	; 0xeca <MEXTI_voidEXTIEnable+0x224>
     d2e:	2f 81       	ldd	r18, Y+7	; 0x07
     d30:	38 85       	ldd	r19, Y+8	; 0x08
     d32:	22 30       	cpi	r18, 0x02	; 2
     d34:	31 05       	cpc	r19, r1
     d36:	21 f1       	breq	.+72     	; 0xd80 <MEXTI_voidEXTIEnable+0xda>
     d38:	8f 81       	ldd	r24, Y+7	; 0x07
     d3a:	98 85       	ldd	r25, Y+8	; 0x08
     d3c:	83 30       	cpi	r24, 0x03	; 3
     d3e:	91 05       	cpc	r25, r1
     d40:	71 f1       	breq	.+92     	; 0xd9e <MEXTI_voidEXTIEnable+0xf8>
     d42:	c3 c0       	rjmp	.+390    	; 0xeca <MEXTI_voidEXTIEnable+0x224>
		{
			case FALLING_EDGE:
			CLR_BIT(MCUCR,0);
     d44:	a5 e5       	ldi	r26, 0x55	; 85
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	e5 e5       	ldi	r30, 0x55	; 85
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	8e 7f       	andi	r24, 0xFE	; 254
     d50:	8c 93       	st	X, r24
			SET_BIT(MCUCR,1);
     d52:	a5 e5       	ldi	r26, 0x55	; 85
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	e5 e5       	ldi	r30, 0x55	; 85
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	82 60       	ori	r24, 0x02	; 2
     d5e:	8c 93       	st	X, r24
     d60:	b4 c0       	rjmp	.+360    	; 0xeca <MEXTI_voidEXTIEnable+0x224>
			break;
			case RISING_EDGE:
			SET_BIT(MCUCR,0);
     d62:	a5 e5       	ldi	r26, 0x55	; 85
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	e5 e5       	ldi	r30, 0x55	; 85
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	81 60       	ori	r24, 0x01	; 1
     d6e:	8c 93       	st	X, r24
			SET_BIT(MCUCR,1);
     d70:	a5 e5       	ldi	r26, 0x55	; 85
     d72:	b0 e0       	ldi	r27, 0x00	; 0
     d74:	e5 e5       	ldi	r30, 0x55	; 85
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	80 81       	ld	r24, Z
     d7a:	82 60       	ori	r24, 0x02	; 2
     d7c:	8c 93       	st	X, r24
     d7e:	a5 c0       	rjmp	.+330    	; 0xeca <MEXTI_voidEXTIEnable+0x224>
			break;
			case LOGICAL_CHANGE:
		    SET_BIT(MCUCR,0);
     d80:	a5 e5       	ldi	r26, 0x55	; 85
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	e5 e5       	ldi	r30, 0x55	; 85
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	81 60       	ori	r24, 0x01	; 1
     d8c:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,1);
     d8e:	a5 e5       	ldi	r26, 0x55	; 85
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	e5 e5       	ldi	r30, 0x55	; 85
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	8d 7f       	andi	r24, 0xFD	; 253
     d9a:	8c 93       	st	X, r24
     d9c:	96 c0       	rjmp	.+300    	; 0xeca <MEXTI_voidEXTIEnable+0x224>
			break;
			case LOW_LEVEL:
			CLR_BIT(MCUCR,0);
     d9e:	a5 e5       	ldi	r26, 0x55	; 85
     da0:	b0 e0       	ldi	r27, 0x00	; 0
     da2:	e5 e5       	ldi	r30, 0x55	; 85
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	80 81       	ld	r24, Z
     da8:	8e 7f       	andi	r24, 0xFE	; 254
     daa:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,1);
     dac:	a5 e5       	ldi	r26, 0x55	; 85
     dae:	b0 e0       	ldi	r27, 0x00	; 0
     db0:	e5 e5       	ldi	r30, 0x55	; 85
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z
     db6:	8d 7f       	andi	r24, 0xFD	; 253
     db8:	8c 93       	st	X, r24
     dba:	87 c0       	rjmp	.+270    	; 0xeca <MEXTI_voidEXTIEnable+0x224>
			
			break;
		}
		break;
		case EXT_INT_1:
		SET_BIT(GICR,7);           //TO ENABLE INT1 INT
     dbc:	ab e5       	ldi	r26, 0x5B	; 91
     dbe:	b0 e0       	ldi	r27, 0x00	; 0
     dc0:	eb e5       	ldi	r30, 0x5B	; 91
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	80 68       	ori	r24, 0x80	; 128
     dc8:	8c 93       	st	X, r24
		switch(Copy_u8EXTI_Sense)
     dca:	8a 81       	ldd	r24, Y+2	; 0x02
     dcc:	28 2f       	mov	r18, r24
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	3e 83       	std	Y+6, r19	; 0x06
     dd2:	2d 83       	std	Y+5, r18	; 0x05
     dd4:	8d 81       	ldd	r24, Y+5	; 0x05
     dd6:	9e 81       	ldd	r25, Y+6	; 0x06
     dd8:	81 30       	cpi	r24, 0x01	; 1
     dda:	91 05       	cpc	r25, r1
     ddc:	21 f1       	breq	.+72     	; 0xe26 <MEXTI_voidEXTIEnable+0x180>
     dde:	2d 81       	ldd	r18, Y+5	; 0x05
     de0:	3e 81       	ldd	r19, Y+6	; 0x06
     de2:	22 30       	cpi	r18, 0x02	; 2
     de4:	31 05       	cpc	r19, r1
     de6:	2c f4       	brge	.+10     	; 0xdf2 <MEXTI_voidEXTIEnable+0x14c>
     de8:	8d 81       	ldd	r24, Y+5	; 0x05
     dea:	9e 81       	ldd	r25, Y+6	; 0x06
     dec:	00 97       	sbiw	r24, 0x00	; 0
     dee:	61 f0       	breq	.+24     	; 0xe08 <MEXTI_voidEXTIEnable+0x162>
     df0:	6c c0       	rjmp	.+216    	; 0xeca <MEXTI_voidEXTIEnable+0x224>
     df2:	2d 81       	ldd	r18, Y+5	; 0x05
     df4:	3e 81       	ldd	r19, Y+6	; 0x06
     df6:	22 30       	cpi	r18, 0x02	; 2
     df8:	31 05       	cpc	r19, r1
     dfa:	21 f1       	breq	.+72     	; 0xe44 <MEXTI_voidEXTIEnable+0x19e>
     dfc:	8d 81       	ldd	r24, Y+5	; 0x05
     dfe:	9e 81       	ldd	r25, Y+6	; 0x06
     e00:	83 30       	cpi	r24, 0x03	; 3
     e02:	91 05       	cpc	r25, r1
     e04:	71 f1       	breq	.+92     	; 0xe62 <MEXTI_voidEXTIEnable+0x1bc>
     e06:	61 c0       	rjmp	.+194    	; 0xeca <MEXTI_voidEXTIEnable+0x224>
		{
			case FALLING_EDGE:
			CLR_BIT(MCUCR,2);
     e08:	a5 e5       	ldi	r26, 0x55	; 85
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	e5 e5       	ldi	r30, 0x55	; 85
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	8b 7f       	andi	r24, 0xFB	; 251
     e14:	8c 93       	st	X, r24
			SET_BIT(MCUCR,3);
     e16:	a5 e5       	ldi	r26, 0x55	; 85
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	e5 e5       	ldi	r30, 0x55	; 85
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	88 60       	ori	r24, 0x08	; 8
     e22:	8c 93       	st	X, r24
     e24:	52 c0       	rjmp	.+164    	; 0xeca <MEXTI_voidEXTIEnable+0x224>
			break;
			case RISING_EDGE:
			SET_BIT(MCUCR,2);
     e26:	a5 e5       	ldi	r26, 0x55	; 85
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	e5 e5       	ldi	r30, 0x55	; 85
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	84 60       	ori	r24, 0x04	; 4
     e32:	8c 93       	st	X, r24
			SET_BIT(MCUCR,3);
     e34:	a5 e5       	ldi	r26, 0x55	; 85
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	e5 e5       	ldi	r30, 0x55	; 85
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	88 60       	ori	r24, 0x08	; 8
     e40:	8c 93       	st	X, r24
     e42:	43 c0       	rjmp	.+134    	; 0xeca <MEXTI_voidEXTIEnable+0x224>
			break;
			case LOGICAL_CHANGE:
		    SET_BIT(MCUCR,2);
     e44:	a5 e5       	ldi	r26, 0x55	; 85
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e5 e5       	ldi	r30, 0x55	; 85
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	84 60       	ori	r24, 0x04	; 4
     e50:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,3);
     e52:	a5 e5       	ldi	r26, 0x55	; 85
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e5 e5       	ldi	r30, 0x55	; 85
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	87 7f       	andi	r24, 0xF7	; 247
     e5e:	8c 93       	st	X, r24
     e60:	34 c0       	rjmp	.+104    	; 0xeca <MEXTI_voidEXTIEnable+0x224>
			break;
			case LOW_LEVEL:
			CLR_BIT(MCUCR,2);
     e62:	a5 e5       	ldi	r26, 0x55	; 85
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e5 e5       	ldi	r30, 0x55	; 85
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	8b 7f       	andi	r24, 0xFB	; 251
     e6e:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,3);
     e70:	a5 e5       	ldi	r26, 0x55	; 85
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	e5 e5       	ldi	r30, 0x55	; 85
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	87 7f       	andi	r24, 0xF7	; 247
     e7c:	8c 93       	st	X, r24
     e7e:	25 c0       	rjmp	.+74     	; 0xeca <MEXTI_voidEXTIEnable+0x224>
			
			break;
		}
		break;
		case EXT_INT_2:
		SET_BIT(GICR,5);           //TO ENABLE INT2 INT
     e80:	ab e5       	ldi	r26, 0x5B	; 91
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	eb e5       	ldi	r30, 0x5B	; 91
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	80 62       	ori	r24, 0x20	; 32
     e8c:	8c 93       	st	X, r24
		switch(Copy_u8EXTI_Sense)
     e8e:	8a 81       	ldd	r24, Y+2	; 0x02
     e90:	28 2f       	mov	r18, r24
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	3c 83       	std	Y+4, r19	; 0x04
     e96:	2b 83       	std	Y+3, r18	; 0x03
     e98:	8b 81       	ldd	r24, Y+3	; 0x03
     e9a:	9c 81       	ldd	r25, Y+4	; 0x04
     e9c:	00 97       	sbiw	r24, 0x00	; 0
     e9e:	31 f0       	breq	.+12     	; 0xeac <MEXTI_voidEXTIEnable+0x206>
     ea0:	2b 81       	ldd	r18, Y+3	; 0x03
     ea2:	3c 81       	ldd	r19, Y+4	; 0x04
     ea4:	21 30       	cpi	r18, 0x01	; 1
     ea6:	31 05       	cpc	r19, r1
     ea8:	49 f0       	breq	.+18     	; 0xebc <MEXTI_voidEXTIEnable+0x216>
     eaa:	0f c0       	rjmp	.+30     	; 0xeca <MEXTI_voidEXTIEnable+0x224>
		{
			case FALLING_EDGE:
			CLR_BIT(MCUCSR,6);
     eac:	a4 e5       	ldi	r26, 0x54	; 84
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	e4 e5       	ldi	r30, 0x54	; 84
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	8f 7b       	andi	r24, 0xBF	; 191
     eb8:	8c 93       	st	X, r24
     eba:	07 c0       	rjmp	.+14     	; 0xeca <MEXTI_voidEXTIEnable+0x224>
			break;
			case RISING_EDGE:
			SET_BIT(MCUCSR,6);
     ebc:	a4 e5       	ldi	r26, 0x54	; 84
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e4 e5       	ldi	r30, 0x54	; 84
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	80 64       	ori	r24, 0x40	; 64
     ec8:	8c 93       	st	X, r24
	    break;
		default:
			
		break;
	}
}
     eca:	2a 96       	adiw	r28, 0x0a	; 10
     ecc:	0f b6       	in	r0, 0x3f	; 63
     ece:	f8 94       	cli
     ed0:	de bf       	out	0x3e, r29	; 62
     ed2:	0f be       	out	0x3f, r0	; 63
     ed4:	cd bf       	out	0x3d, r28	; 61
     ed6:	cf 91       	pop	r28
     ed8:	df 91       	pop	r29
     eda:	08 95       	ret

00000edc <MEXTI_voidEXTIDisable>:


void MEXTI_voidEXTIDisable(u8 Copy_u8EXTI_Num)
{
     edc:	df 93       	push	r29
     ede:	cf 93       	push	r28
     ee0:	00 d0       	rcall	.+0      	; 0xee2 <MEXTI_voidEXTIDisable+0x6>
     ee2:	0f 92       	push	r0
     ee4:	cd b7       	in	r28, 0x3d	; 61
     ee6:	de b7       	in	r29, 0x3e	; 62
     ee8:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(SREG,7);               //TO ENABLE GLOBAL INT
     eea:	af e5       	ldi	r26, 0x5F	; 95
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	ef e5       	ldi	r30, 0x5F	; 95
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	8f 77       	andi	r24, 0x7F	; 127
     ef6:	8c 93       	st	X, r24
	switch(Copy_u8EXTI_Num)
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	3b 83       	std	Y+3, r19	; 0x03
     f00:	2a 83       	std	Y+2, r18	; 0x02
     f02:	8a 81       	ldd	r24, Y+2	; 0x02
     f04:	9b 81       	ldd	r25, Y+3	; 0x03
     f06:	81 30       	cpi	r24, 0x01	; 1
     f08:	91 05       	cpc	r25, r1
     f0a:	89 f0       	breq	.+34     	; 0xf2e <MEXTI_voidEXTIDisable+0x52>
     f0c:	2a 81       	ldd	r18, Y+2	; 0x02
     f0e:	3b 81       	ldd	r19, Y+3	; 0x03
     f10:	22 30       	cpi	r18, 0x02	; 2
     f12:	31 05       	cpc	r19, r1
     f14:	a1 f0       	breq	.+40     	; 0xf3e <MEXTI_voidEXTIDisable+0x62>
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	9b 81       	ldd	r25, Y+3	; 0x03
     f1a:	00 97       	sbiw	r24, 0x00	; 0
     f1c:	b9 f4       	brne	.+46     	; 0xf4c <MEXTI_voidEXTIDisable+0x70>
	{
		case EXT_INT_0:
		CLR_BIT(GICR,6);           //TO DISABLE INT0 INT
     f1e:	ab e5       	ldi	r26, 0x5B	; 91
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	eb e5       	ldi	r30, 0x5B	; 91
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	8f 7b       	andi	r24, 0xBF	; 191
     f2a:	8c 93       	st	X, r24
     f2c:	0f c0       	rjmp	.+30     	; 0xf4c <MEXTI_voidEXTIDisable+0x70>
		break;                          
		case EXT_INT_1:                 
		CLR_BIT(GICR,7);           //TO DISABLE INT1 INT
     f2e:	ab e5       	ldi	r26, 0x5B	; 91
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	eb e5       	ldi	r30, 0x5B	; 91
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	8f 77       	andi	r24, 0x7F	; 127
     f3a:	8c 93       	st	X, r24
     f3c:	07 c0       	rjmp	.+14     	; 0xf4c <MEXTI_voidEXTIDisable+0x70>
		break;                          
		case EXT_INT_2:                 
		CLR_BIT(GICR,5);           //TO DISABLE INT2 INT
     f3e:	ab e5       	ldi	r26, 0x5B	; 91
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	eb e5       	ldi	r30, 0x5B	; 91
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	8f 7d       	andi	r24, 0xDF	; 223
     f4a:	8c 93       	st	X, r24
	    break;
		default:
			
		break;
	}
}
     f4c:	0f 90       	pop	r0
     f4e:	0f 90       	pop	r0
     f50:	0f 90       	pop	r0
     f52:	cf 91       	pop	r28
     f54:	df 91       	pop	r29
     f56:	08 95       	ret

00000f58 <EXT_INT_0_SET_CALL_BACK>:


void EXT_INT_0_SET_CALL_BACK(void(*ptr)(void))
{
     f58:	df 93       	push	r29
     f5a:	cf 93       	push	r28
     f5c:	00 d0       	rcall	.+0      	; 0xf5e <EXT_INT_0_SET_CALL_BACK+0x6>
     f5e:	cd b7       	in	r28, 0x3d	; 61
     f60:	de b7       	in	r29, 0x3e	; 62
     f62:	9a 83       	std	Y+2, r25	; 0x02
     f64:	89 83       	std	Y+1, r24	; 0x01
	EXT_INT_0_CALL_BACK = ptr;
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	9a 81       	ldd	r25, Y+2	; 0x02
     f6a:	90 93 85 00 	sts	0x0085, r25
     f6e:	80 93 84 00 	sts	0x0084, r24
}
     f72:	0f 90       	pop	r0
     f74:	0f 90       	pop	r0
     f76:	cf 91       	pop	r28
     f78:	df 91       	pop	r29
     f7a:	08 95       	ret

00000f7c <__vector_1>:

void __vector_1(void)     __attribute__((signal));
void __vector_1(void)
{
     f7c:	1f 92       	push	r1
     f7e:	0f 92       	push	r0
     f80:	0f b6       	in	r0, 0x3f	; 63
     f82:	0f 92       	push	r0
     f84:	11 24       	eor	r1, r1
     f86:	2f 93       	push	r18
     f88:	3f 93       	push	r19
     f8a:	4f 93       	push	r20
     f8c:	5f 93       	push	r21
     f8e:	6f 93       	push	r22
     f90:	7f 93       	push	r23
     f92:	8f 93       	push	r24
     f94:	9f 93       	push	r25
     f96:	af 93       	push	r26
     f98:	bf 93       	push	r27
     f9a:	ef 93       	push	r30
     f9c:	ff 93       	push	r31
     f9e:	df 93       	push	r29
     fa0:	cf 93       	push	r28
     fa2:	cd b7       	in	r28, 0x3d	; 61
     fa4:	de b7       	in	r29, 0x3e	; 62
	EXT_INT_0_CALL_BACK();
     fa6:	e0 91 84 00 	lds	r30, 0x0084
     faa:	f0 91 85 00 	lds	r31, 0x0085
     fae:	09 95       	icall
}
     fb0:	cf 91       	pop	r28
     fb2:	df 91       	pop	r29
     fb4:	ff 91       	pop	r31
     fb6:	ef 91       	pop	r30
     fb8:	bf 91       	pop	r27
     fba:	af 91       	pop	r26
     fbc:	9f 91       	pop	r25
     fbe:	8f 91       	pop	r24
     fc0:	7f 91       	pop	r23
     fc2:	6f 91       	pop	r22
     fc4:	5f 91       	pop	r21
     fc6:	4f 91       	pop	r20
     fc8:	3f 91       	pop	r19
     fca:	2f 91       	pop	r18
     fcc:	0f 90       	pop	r0
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	0f 90       	pop	r0
     fd2:	1f 90       	pop	r1
     fd4:	18 95       	reti

00000fd6 <EXT_INT_1_SET_CALL_BACK>:


void EXT_INT_1_SET_CALL_BACK(void(*ptr)(void))
{
     fd6:	df 93       	push	r29
     fd8:	cf 93       	push	r28
     fda:	00 d0       	rcall	.+0      	; 0xfdc <EXT_INT_1_SET_CALL_BACK+0x6>
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
     fe0:	9a 83       	std	Y+2, r25	; 0x02
     fe2:	89 83       	std	Y+1, r24	; 0x01
	EXT_INT_1_CALL_BACK = ptr;
     fe4:	89 81       	ldd	r24, Y+1	; 0x01
     fe6:	9a 81       	ldd	r25, Y+2	; 0x02
     fe8:	90 93 87 00 	sts	0x0087, r25
     fec:	80 93 86 00 	sts	0x0086, r24
}
     ff0:	0f 90       	pop	r0
     ff2:	0f 90       	pop	r0
     ff4:	cf 91       	pop	r28
     ff6:	df 91       	pop	r29
     ff8:	08 95       	ret

00000ffa <__vector_2>:

void __vector_2(void)     __attribute__((signal));
void __vector_2(void)
{
     ffa:	1f 92       	push	r1
     ffc:	0f 92       	push	r0
     ffe:	0f b6       	in	r0, 0x3f	; 63
    1000:	0f 92       	push	r0
    1002:	11 24       	eor	r1, r1
    1004:	2f 93       	push	r18
    1006:	3f 93       	push	r19
    1008:	4f 93       	push	r20
    100a:	5f 93       	push	r21
    100c:	6f 93       	push	r22
    100e:	7f 93       	push	r23
    1010:	8f 93       	push	r24
    1012:	9f 93       	push	r25
    1014:	af 93       	push	r26
    1016:	bf 93       	push	r27
    1018:	ef 93       	push	r30
    101a:	ff 93       	push	r31
    101c:	df 93       	push	r29
    101e:	cf 93       	push	r28
    1020:	cd b7       	in	r28, 0x3d	; 61
    1022:	de b7       	in	r29, 0x3e	; 62
	EXT_INT_1_CALL_BACK();
    1024:	e0 91 86 00 	lds	r30, 0x0086
    1028:	f0 91 87 00 	lds	r31, 0x0087
    102c:	09 95       	icall
}
    102e:	cf 91       	pop	r28
    1030:	df 91       	pop	r29
    1032:	ff 91       	pop	r31
    1034:	ef 91       	pop	r30
    1036:	bf 91       	pop	r27
    1038:	af 91       	pop	r26
    103a:	9f 91       	pop	r25
    103c:	8f 91       	pop	r24
    103e:	7f 91       	pop	r23
    1040:	6f 91       	pop	r22
    1042:	5f 91       	pop	r21
    1044:	4f 91       	pop	r20
    1046:	3f 91       	pop	r19
    1048:	2f 91       	pop	r18
    104a:	0f 90       	pop	r0
    104c:	0f be       	out	0x3f, r0	; 63
    104e:	0f 90       	pop	r0
    1050:	1f 90       	pop	r1
    1052:	18 95       	reti

00001054 <EXT_INT_2_SET_CALL_BACK>:


void EXT_INT_2_SET_CALL_BACK(void(*ptr)(void))
{
    1054:	df 93       	push	r29
    1056:	cf 93       	push	r28
    1058:	00 d0       	rcall	.+0      	; 0x105a <EXT_INT_2_SET_CALL_BACK+0x6>
    105a:	cd b7       	in	r28, 0x3d	; 61
    105c:	de b7       	in	r29, 0x3e	; 62
    105e:	9a 83       	std	Y+2, r25	; 0x02
    1060:	89 83       	std	Y+1, r24	; 0x01
	EXT_INT_2_CALL_BACK = ptr;
    1062:	89 81       	ldd	r24, Y+1	; 0x01
    1064:	9a 81       	ldd	r25, Y+2	; 0x02
    1066:	90 93 83 00 	sts	0x0083, r25
    106a:	80 93 82 00 	sts	0x0082, r24
}
    106e:	0f 90       	pop	r0
    1070:	0f 90       	pop	r0
    1072:	cf 91       	pop	r28
    1074:	df 91       	pop	r29
    1076:	08 95       	ret

00001078 <__vector_3>:

void __vector_3(void)     __attribute__((signal));
void __vector_3(void)
{
    1078:	1f 92       	push	r1
    107a:	0f 92       	push	r0
    107c:	0f b6       	in	r0, 0x3f	; 63
    107e:	0f 92       	push	r0
    1080:	11 24       	eor	r1, r1
    1082:	2f 93       	push	r18
    1084:	3f 93       	push	r19
    1086:	4f 93       	push	r20
    1088:	5f 93       	push	r21
    108a:	6f 93       	push	r22
    108c:	7f 93       	push	r23
    108e:	8f 93       	push	r24
    1090:	9f 93       	push	r25
    1092:	af 93       	push	r26
    1094:	bf 93       	push	r27
    1096:	ef 93       	push	r30
    1098:	ff 93       	push	r31
    109a:	df 93       	push	r29
    109c:	cf 93       	push	r28
    109e:	cd b7       	in	r28, 0x3d	; 61
    10a0:	de b7       	in	r29, 0x3e	; 62
	EXT_INT_2_CALL_BACK();
    10a2:	e0 91 82 00 	lds	r30, 0x0082
    10a6:	f0 91 83 00 	lds	r31, 0x0083
    10aa:	09 95       	icall
}
    10ac:	cf 91       	pop	r28
    10ae:	df 91       	pop	r29
    10b0:	ff 91       	pop	r31
    10b2:	ef 91       	pop	r30
    10b4:	bf 91       	pop	r27
    10b6:	af 91       	pop	r26
    10b8:	9f 91       	pop	r25
    10ba:	8f 91       	pop	r24
    10bc:	7f 91       	pop	r23
    10be:	6f 91       	pop	r22
    10c0:	5f 91       	pop	r21
    10c2:	4f 91       	pop	r20
    10c4:	3f 91       	pop	r19
    10c6:	2f 91       	pop	r18
    10c8:	0f 90       	pop	r0
    10ca:	0f be       	out	0x3f, r0	; 63
    10cc:	0f 90       	pop	r0
    10ce:	1f 90       	pop	r1
    10d0:	18 95       	reti

000010d2 <MDIO_voidSetPinDirection>:
#include "DIO_PRIVATE.h"
#include "DIO_INTERFACE.h"


void MDIO_voidSetPinDirection (u8 Copy_u8PortId, u8 Copy_u8PinId ,u8 Copy_u8PinDirection)
{
    10d2:	df 93       	push	r29
    10d4:	cf 93       	push	r28
    10d6:	00 d0       	rcall	.+0      	; 0x10d8 <MDIO_voidSetPinDirection+0x6>
    10d8:	00 d0       	rcall	.+0      	; 0x10da <MDIO_voidSetPinDirection+0x8>
    10da:	0f 92       	push	r0
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
    10e0:	89 83       	std	Y+1, r24	; 0x01
    10e2:	6a 83       	std	Y+2, r22	; 0x02
    10e4:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8PortId)
    10e6:	89 81       	ldd	r24, Y+1	; 0x01
    10e8:	28 2f       	mov	r18, r24
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	3d 83       	std	Y+5, r19	; 0x05
    10ee:	2c 83       	std	Y+4, r18	; 0x04
    10f0:	8c 81       	ldd	r24, Y+4	; 0x04
    10f2:	9d 81       	ldd	r25, Y+5	; 0x05
    10f4:	81 30       	cpi	r24, 0x01	; 1
    10f6:	91 05       	cpc	r25, r1
    10f8:	09 f4       	brne	.+2      	; 0x10fc <MDIO_voidSetPinDirection+0x2a>
    10fa:	47 c0       	rjmp	.+142    	; 0x118a <MDIO_voidSetPinDirection+0xb8>
    10fc:	2c 81       	ldd	r18, Y+4	; 0x04
    10fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1100:	22 30       	cpi	r18, 0x02	; 2
    1102:	31 05       	cpc	r19, r1
    1104:	2c f4       	brge	.+10     	; 0x1110 <MDIO_voidSetPinDirection+0x3e>
    1106:	8c 81       	ldd	r24, Y+4	; 0x04
    1108:	9d 81       	ldd	r25, Y+5	; 0x05
    110a:	00 97       	sbiw	r24, 0x00	; 0
    110c:	71 f0       	breq	.+28     	; 0x112a <MDIO_voidSetPinDirection+0x58>
    110e:	cb c0       	rjmp	.+406    	; 0x12a6 <MDIO_voidSetPinDirection+0x1d4>
    1110:	2c 81       	ldd	r18, Y+4	; 0x04
    1112:	3d 81       	ldd	r19, Y+5	; 0x05
    1114:	22 30       	cpi	r18, 0x02	; 2
    1116:	31 05       	cpc	r19, r1
    1118:	09 f4       	brne	.+2      	; 0x111c <MDIO_voidSetPinDirection+0x4a>
    111a:	67 c0       	rjmp	.+206    	; 0x11ea <MDIO_voidSetPinDirection+0x118>
    111c:	8c 81       	ldd	r24, Y+4	; 0x04
    111e:	9d 81       	ldd	r25, Y+5	; 0x05
    1120:	83 30       	cpi	r24, 0x03	; 3
    1122:	91 05       	cpc	r25, r1
    1124:	09 f4       	brne	.+2      	; 0x1128 <MDIO_voidSetPinDirection+0x56>
    1126:	91 c0       	rjmp	.+290    	; 0x124a <MDIO_voidSetPinDirection+0x178>
    1128:	be c0       	rjmp	.+380    	; 0x12a6 <MDIO_voidSetPinDirection+0x1d4>
	{
	case DIO_u8_PORTA:
		if(Copy_u8PinDirection == DIO_u8_OUTPUT )
    112a:	8b 81       	ldd	r24, Y+3	; 0x03
    112c:	81 30       	cpi	r24, 0x01	; 1
    112e:	a1 f4       	brne	.+40     	; 0x1158 <MDIO_voidSetPinDirection+0x86>
		{
			SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);
    1130:	aa e3       	ldi	r26, 0x3A	; 58
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	ea e3       	ldi	r30, 0x3A	; 58
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	48 2f       	mov	r20, r24
    113c:	8a 81       	ldd	r24, Y+2	; 0x02
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	02 2e       	mov	r0, r18
    1148:	02 c0       	rjmp	.+4      	; 0x114e <MDIO_voidSetPinDirection+0x7c>
    114a:	88 0f       	add	r24, r24
    114c:	99 1f       	adc	r25, r25
    114e:	0a 94       	dec	r0
    1150:	e2 f7       	brpl	.-8      	; 0x114a <MDIO_voidSetPinDirection+0x78>
    1152:	84 2b       	or	r24, r20
    1154:	8c 93       	st	X, r24
    1156:	a7 c0       	rjmp	.+334    	; 0x12a6 <MDIO_voidSetPinDirection+0x1d4>
		}
		else if(Copy_u8PinDirection == DIO_u8_INPUT)
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	88 23       	and	r24, r24
    115c:	09 f0       	breq	.+2      	; 0x1160 <MDIO_voidSetPinDirection+0x8e>
    115e:	a3 c0       	rjmp	.+326    	; 0x12a6 <MDIO_voidSetPinDirection+0x1d4>
		{
			CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);
    1160:	aa e3       	ldi	r26, 0x3A	; 58
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	ea e3       	ldi	r30, 0x3A	; 58
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	48 2f       	mov	r20, r24
    116c:	8a 81       	ldd	r24, Y+2	; 0x02
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	02 2e       	mov	r0, r18
    1178:	02 c0       	rjmp	.+4      	; 0x117e <MDIO_voidSetPinDirection+0xac>
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	0a 94       	dec	r0
    1180:	e2 f7       	brpl	.-8      	; 0x117a <MDIO_voidSetPinDirection+0xa8>
    1182:	80 95       	com	r24
    1184:	84 23       	and	r24, r20
    1186:	8c 93       	st	X, r24
    1188:	8e c0       	rjmp	.+284    	; 0x12a6 <MDIO_voidSetPinDirection+0x1d4>
		}
		break;
	case DIO_u8_PORTB:
		if(Copy_u8PinDirection == DIO_u8_OUTPUT )
    118a:	8b 81       	ldd	r24, Y+3	; 0x03
    118c:	81 30       	cpi	r24, 0x01	; 1
    118e:	a1 f4       	brne	.+40     	; 0x11b8 <MDIO_voidSetPinDirection+0xe6>
		{
			SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);
    1190:	a7 e3       	ldi	r26, 0x37	; 55
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	e7 e3       	ldi	r30, 0x37	; 55
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	48 2f       	mov	r20, r24
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
    119e:	28 2f       	mov	r18, r24
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	02 2e       	mov	r0, r18
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <MDIO_voidSetPinDirection+0xdc>
    11aa:	88 0f       	add	r24, r24
    11ac:	99 1f       	adc	r25, r25
    11ae:	0a 94       	dec	r0
    11b0:	e2 f7       	brpl	.-8      	; 0x11aa <MDIO_voidSetPinDirection+0xd8>
    11b2:	84 2b       	or	r24, r20
    11b4:	8c 93       	st	X, r24
    11b6:	77 c0       	rjmp	.+238    	; 0x12a6 <MDIO_voidSetPinDirection+0x1d4>
		}
		else if(Copy_u8PinDirection == DIO_u8_INPUT)
    11b8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ba:	88 23       	and	r24, r24
    11bc:	09 f0       	breq	.+2      	; 0x11c0 <MDIO_voidSetPinDirection+0xee>
    11be:	73 c0       	rjmp	.+230    	; 0x12a6 <MDIO_voidSetPinDirection+0x1d4>
		{
			CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);
    11c0:	a7 e3       	ldi	r26, 0x37	; 55
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	e7 e3       	ldi	r30, 0x37	; 55
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	48 2f       	mov	r20, r24
    11cc:	8a 81       	ldd	r24, Y+2	; 0x02
    11ce:	28 2f       	mov	r18, r24
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	02 2e       	mov	r0, r18
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <MDIO_voidSetPinDirection+0x10c>
    11da:	88 0f       	add	r24, r24
    11dc:	99 1f       	adc	r25, r25
    11de:	0a 94       	dec	r0
    11e0:	e2 f7       	brpl	.-8      	; 0x11da <MDIO_voidSetPinDirection+0x108>
    11e2:	80 95       	com	r24
    11e4:	84 23       	and	r24, r20
    11e6:	8c 93       	st	X, r24
    11e8:	5e c0       	rjmp	.+188    	; 0x12a6 <MDIO_voidSetPinDirection+0x1d4>
		}
		break;
	case DIO_u8_PORTC:
		if(Copy_u8PinDirection == DIO_u8_OUTPUT )
    11ea:	8b 81       	ldd	r24, Y+3	; 0x03
    11ec:	81 30       	cpi	r24, 0x01	; 1
    11ee:	a1 f4       	brne	.+40     	; 0x1218 <MDIO_voidSetPinDirection+0x146>
		{
			SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);
    11f0:	a4 e3       	ldi	r26, 0x34	; 52
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	e4 e3       	ldi	r30, 0x34	; 52
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	48 2f       	mov	r20, r24
    11fc:	8a 81       	ldd	r24, Y+2	; 0x02
    11fe:	28 2f       	mov	r18, r24
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	02 2e       	mov	r0, r18
    1208:	02 c0       	rjmp	.+4      	; 0x120e <MDIO_voidSetPinDirection+0x13c>
    120a:	88 0f       	add	r24, r24
    120c:	99 1f       	adc	r25, r25
    120e:	0a 94       	dec	r0
    1210:	e2 f7       	brpl	.-8      	; 0x120a <MDIO_voidSetPinDirection+0x138>
    1212:	84 2b       	or	r24, r20
    1214:	8c 93       	st	X, r24
    1216:	47 c0       	rjmp	.+142    	; 0x12a6 <MDIO_voidSetPinDirection+0x1d4>
		}
		else if(Copy_u8PinDirection == DIO_u8_INPUT)
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	88 23       	and	r24, r24
    121c:	09 f0       	breq	.+2      	; 0x1220 <MDIO_voidSetPinDirection+0x14e>
    121e:	43 c0       	rjmp	.+134    	; 0x12a6 <MDIO_voidSetPinDirection+0x1d4>
		{
			CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);
    1220:	a4 e3       	ldi	r26, 0x34	; 52
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	e4 e3       	ldi	r30, 0x34	; 52
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	48 2f       	mov	r20, r24
    122c:	8a 81       	ldd	r24, Y+2	; 0x02
    122e:	28 2f       	mov	r18, r24
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	02 2e       	mov	r0, r18
    1238:	02 c0       	rjmp	.+4      	; 0x123e <MDIO_voidSetPinDirection+0x16c>
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	0a 94       	dec	r0
    1240:	e2 f7       	brpl	.-8      	; 0x123a <MDIO_voidSetPinDirection+0x168>
    1242:	80 95       	com	r24
    1244:	84 23       	and	r24, r20
    1246:	8c 93       	st	X, r24
    1248:	2e c0       	rjmp	.+92     	; 0x12a6 <MDIO_voidSetPinDirection+0x1d4>
		}
		break;
	case DIO_u8_PORTD:
		if(Copy_u8PinDirection == DIO_u8_OUTPUT )
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	81 30       	cpi	r24, 0x01	; 1
    124e:	a1 f4       	brne	.+40     	; 0x1278 <MDIO_voidSetPinDirection+0x1a6>
		{
			SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);
    1250:	a1 e3       	ldi	r26, 0x31	; 49
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	e1 e3       	ldi	r30, 0x31	; 49
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	48 2f       	mov	r20, r24
    125c:	8a 81       	ldd	r24, Y+2	; 0x02
    125e:	28 2f       	mov	r18, r24
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	02 2e       	mov	r0, r18
    1268:	02 c0       	rjmp	.+4      	; 0x126e <MDIO_voidSetPinDirection+0x19c>
    126a:	88 0f       	add	r24, r24
    126c:	99 1f       	adc	r25, r25
    126e:	0a 94       	dec	r0
    1270:	e2 f7       	brpl	.-8      	; 0x126a <MDIO_voidSetPinDirection+0x198>
    1272:	84 2b       	or	r24, r20
    1274:	8c 93       	st	X, r24
    1276:	17 c0       	rjmp	.+46     	; 0x12a6 <MDIO_voidSetPinDirection+0x1d4>
		}
		else if(Copy_u8PinDirection == DIO_u8_INPUT)
    1278:	8b 81       	ldd	r24, Y+3	; 0x03
    127a:	88 23       	and	r24, r24
    127c:	a1 f4       	brne	.+40     	; 0x12a6 <MDIO_voidSetPinDirection+0x1d4>
		{
			CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);
    127e:	a1 e3       	ldi	r26, 0x31	; 49
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	e1 e3       	ldi	r30, 0x31	; 49
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	48 2f       	mov	r20, r24
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	28 2f       	mov	r18, r24
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	02 2e       	mov	r0, r18
    1296:	02 c0       	rjmp	.+4      	; 0x129c <MDIO_voidSetPinDirection+0x1ca>
    1298:	88 0f       	add	r24, r24
    129a:	99 1f       	adc	r25, r25
    129c:	0a 94       	dec	r0
    129e:	e2 f7       	brpl	.-8      	; 0x1298 <MDIO_voidSetPinDirection+0x1c6>
    12a0:	80 95       	com	r24
    12a2:	84 23       	and	r24, r20
    12a4:	8c 93       	st	X, r24
		break;
	default:

		break;
	}
}
    12a6:	0f 90       	pop	r0
    12a8:	0f 90       	pop	r0
    12aa:	0f 90       	pop	r0
    12ac:	0f 90       	pop	r0
    12ae:	0f 90       	pop	r0
    12b0:	cf 91       	pop	r28
    12b2:	df 91       	pop	r29
    12b4:	08 95       	ret

000012b6 <MDIO_voidSetPinValue>:


void MDIO_voidSetPinValue     (u8 Copy_u8PortId, u8 Copy_u8PinId ,u8 Copy_u8PinValue)
{
    12b6:	df 93       	push	r29
    12b8:	cf 93       	push	r28
    12ba:	00 d0       	rcall	.+0      	; 0x12bc <MDIO_voidSetPinValue+0x6>
    12bc:	00 d0       	rcall	.+0      	; 0x12be <MDIO_voidSetPinValue+0x8>
    12be:	0f 92       	push	r0
    12c0:	cd b7       	in	r28, 0x3d	; 61
    12c2:	de b7       	in	r29, 0x3e	; 62
    12c4:	89 83       	std	Y+1, r24	; 0x01
    12c6:	6a 83       	std	Y+2, r22	; 0x02
    12c8:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8PortId)
    12ca:	89 81       	ldd	r24, Y+1	; 0x01
    12cc:	28 2f       	mov	r18, r24
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	3d 83       	std	Y+5, r19	; 0x05
    12d2:	2c 83       	std	Y+4, r18	; 0x04
    12d4:	8c 81       	ldd	r24, Y+4	; 0x04
    12d6:	9d 81       	ldd	r25, Y+5	; 0x05
    12d8:	81 30       	cpi	r24, 0x01	; 1
    12da:	91 05       	cpc	r25, r1
    12dc:	09 f4       	brne	.+2      	; 0x12e0 <MDIO_voidSetPinValue+0x2a>
    12de:	47 c0       	rjmp	.+142    	; 0x136e <MDIO_voidSetPinValue+0xb8>
    12e0:	2c 81       	ldd	r18, Y+4	; 0x04
    12e2:	3d 81       	ldd	r19, Y+5	; 0x05
    12e4:	22 30       	cpi	r18, 0x02	; 2
    12e6:	31 05       	cpc	r19, r1
    12e8:	2c f4       	brge	.+10     	; 0x12f4 <MDIO_voidSetPinValue+0x3e>
    12ea:	8c 81       	ldd	r24, Y+4	; 0x04
    12ec:	9d 81       	ldd	r25, Y+5	; 0x05
    12ee:	00 97       	sbiw	r24, 0x00	; 0
    12f0:	71 f0       	breq	.+28     	; 0x130e <MDIO_voidSetPinValue+0x58>
    12f2:	cb c0       	rjmp	.+406    	; 0x148a <MDIO_voidSetPinValue+0x1d4>
    12f4:	2c 81       	ldd	r18, Y+4	; 0x04
    12f6:	3d 81       	ldd	r19, Y+5	; 0x05
    12f8:	22 30       	cpi	r18, 0x02	; 2
    12fa:	31 05       	cpc	r19, r1
    12fc:	09 f4       	brne	.+2      	; 0x1300 <MDIO_voidSetPinValue+0x4a>
    12fe:	67 c0       	rjmp	.+206    	; 0x13ce <MDIO_voidSetPinValue+0x118>
    1300:	8c 81       	ldd	r24, Y+4	; 0x04
    1302:	9d 81       	ldd	r25, Y+5	; 0x05
    1304:	83 30       	cpi	r24, 0x03	; 3
    1306:	91 05       	cpc	r25, r1
    1308:	09 f4       	brne	.+2      	; 0x130c <MDIO_voidSetPinValue+0x56>
    130a:	91 c0       	rjmp	.+290    	; 0x142e <MDIO_voidSetPinValue+0x178>
    130c:	be c0       	rjmp	.+380    	; 0x148a <MDIO_voidSetPinValue+0x1d4>
	{
	case DIO_u8_PORTA:
		if(Copy_u8PinValue == DIO_u8_HIGH )
    130e:	8b 81       	ldd	r24, Y+3	; 0x03
    1310:	81 30       	cpi	r24, 0x01	; 1
    1312:	a1 f4       	brne	.+40     	; 0x133c <MDIO_voidSetPinValue+0x86>
		{
			SET_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);
    1314:	ab e3       	ldi	r26, 0x3B	; 59
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	eb e3       	ldi	r30, 0x3B	; 59
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	48 2f       	mov	r20, r24
    1320:	8a 81       	ldd	r24, Y+2	; 0x02
    1322:	28 2f       	mov	r18, r24
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	02 2e       	mov	r0, r18
    132c:	02 c0       	rjmp	.+4      	; 0x1332 <MDIO_voidSetPinValue+0x7c>
    132e:	88 0f       	add	r24, r24
    1330:	99 1f       	adc	r25, r25
    1332:	0a 94       	dec	r0
    1334:	e2 f7       	brpl	.-8      	; 0x132e <MDIO_voidSetPinValue+0x78>
    1336:	84 2b       	or	r24, r20
    1338:	8c 93       	st	X, r24
    133a:	a7 c0       	rjmp	.+334    	; 0x148a <MDIO_voidSetPinValue+0x1d4>
		}
		else if(Copy_u8PinValue == DIO_u8_LOW)
    133c:	8b 81       	ldd	r24, Y+3	; 0x03
    133e:	88 23       	and	r24, r24
    1340:	09 f0       	breq	.+2      	; 0x1344 <MDIO_voidSetPinValue+0x8e>
    1342:	a3 c0       	rjmp	.+326    	; 0x148a <MDIO_voidSetPinValue+0x1d4>
		{
			CLR_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);
    1344:	ab e3       	ldi	r26, 0x3B	; 59
    1346:	b0 e0       	ldi	r27, 0x00	; 0
    1348:	eb e3       	ldi	r30, 0x3B	; 59
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	48 2f       	mov	r20, r24
    1350:	8a 81       	ldd	r24, Y+2	; 0x02
    1352:	28 2f       	mov	r18, r24
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	02 2e       	mov	r0, r18
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <MDIO_voidSetPinValue+0xac>
    135e:	88 0f       	add	r24, r24
    1360:	99 1f       	adc	r25, r25
    1362:	0a 94       	dec	r0
    1364:	e2 f7       	brpl	.-8      	; 0x135e <MDIO_voidSetPinValue+0xa8>
    1366:	80 95       	com	r24
    1368:	84 23       	and	r24, r20
    136a:	8c 93       	st	X, r24
    136c:	8e c0       	rjmp	.+284    	; 0x148a <MDIO_voidSetPinValue+0x1d4>
		}
		break;
	case DIO_u8_PORTB:
		if(Copy_u8PinValue == DIO_u8_HIGH )
    136e:	8b 81       	ldd	r24, Y+3	; 0x03
    1370:	81 30       	cpi	r24, 0x01	; 1
    1372:	a1 f4       	brne	.+40     	; 0x139c <MDIO_voidSetPinValue+0xe6>
		{
			SET_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);
    1374:	a8 e3       	ldi	r26, 0x38	; 56
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	e8 e3       	ldi	r30, 0x38	; 56
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	48 2f       	mov	r20, r24
    1380:	8a 81       	ldd	r24, Y+2	; 0x02
    1382:	28 2f       	mov	r18, r24
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	02 2e       	mov	r0, r18
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <MDIO_voidSetPinValue+0xdc>
    138e:	88 0f       	add	r24, r24
    1390:	99 1f       	adc	r25, r25
    1392:	0a 94       	dec	r0
    1394:	e2 f7       	brpl	.-8      	; 0x138e <MDIO_voidSetPinValue+0xd8>
    1396:	84 2b       	or	r24, r20
    1398:	8c 93       	st	X, r24
    139a:	77 c0       	rjmp	.+238    	; 0x148a <MDIO_voidSetPinValue+0x1d4>
		}
		else if(Copy_u8PinValue == DIO_u8_LOW)
    139c:	8b 81       	ldd	r24, Y+3	; 0x03
    139e:	88 23       	and	r24, r24
    13a0:	09 f0       	breq	.+2      	; 0x13a4 <MDIO_voidSetPinValue+0xee>
    13a2:	73 c0       	rjmp	.+230    	; 0x148a <MDIO_voidSetPinValue+0x1d4>
		{
			CLR_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);
    13a4:	a8 e3       	ldi	r26, 0x38	; 56
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	e8 e3       	ldi	r30, 0x38	; 56
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	48 2f       	mov	r20, r24
    13b0:	8a 81       	ldd	r24, Y+2	; 0x02
    13b2:	28 2f       	mov	r18, r24
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	02 2e       	mov	r0, r18
    13bc:	02 c0       	rjmp	.+4      	; 0x13c2 <MDIO_voidSetPinValue+0x10c>
    13be:	88 0f       	add	r24, r24
    13c0:	99 1f       	adc	r25, r25
    13c2:	0a 94       	dec	r0
    13c4:	e2 f7       	brpl	.-8      	; 0x13be <MDIO_voidSetPinValue+0x108>
    13c6:	80 95       	com	r24
    13c8:	84 23       	and	r24, r20
    13ca:	8c 93       	st	X, r24
    13cc:	5e c0       	rjmp	.+188    	; 0x148a <MDIO_voidSetPinValue+0x1d4>
		}
		break;
	case DIO_u8_PORTC:
		if(Copy_u8PinValue == DIO_u8_HIGH )
    13ce:	8b 81       	ldd	r24, Y+3	; 0x03
    13d0:	81 30       	cpi	r24, 0x01	; 1
    13d2:	a1 f4       	brne	.+40     	; 0x13fc <MDIO_voidSetPinValue+0x146>
		{
			SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);
    13d4:	a5 e3       	ldi	r26, 0x35	; 53
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	e5 e3       	ldi	r30, 0x35	; 53
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	48 2f       	mov	r20, r24
    13e0:	8a 81       	ldd	r24, Y+2	; 0x02
    13e2:	28 2f       	mov	r18, r24
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	02 2e       	mov	r0, r18
    13ec:	02 c0       	rjmp	.+4      	; 0x13f2 <MDIO_voidSetPinValue+0x13c>
    13ee:	88 0f       	add	r24, r24
    13f0:	99 1f       	adc	r25, r25
    13f2:	0a 94       	dec	r0
    13f4:	e2 f7       	brpl	.-8      	; 0x13ee <MDIO_voidSetPinValue+0x138>
    13f6:	84 2b       	or	r24, r20
    13f8:	8c 93       	st	X, r24
    13fa:	47 c0       	rjmp	.+142    	; 0x148a <MDIO_voidSetPinValue+0x1d4>
		}
		else if(Copy_u8PinValue == DIO_u8_LOW)
    13fc:	8b 81       	ldd	r24, Y+3	; 0x03
    13fe:	88 23       	and	r24, r24
    1400:	09 f0       	breq	.+2      	; 0x1404 <MDIO_voidSetPinValue+0x14e>
    1402:	43 c0       	rjmp	.+134    	; 0x148a <MDIO_voidSetPinValue+0x1d4>
		{
			CLR_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);
    1404:	a5 e3       	ldi	r26, 0x35	; 53
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	e5 e3       	ldi	r30, 0x35	; 53
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	48 2f       	mov	r20, r24
    1410:	8a 81       	ldd	r24, Y+2	; 0x02
    1412:	28 2f       	mov	r18, r24
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	02 2e       	mov	r0, r18
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <MDIO_voidSetPinValue+0x16c>
    141e:	88 0f       	add	r24, r24
    1420:	99 1f       	adc	r25, r25
    1422:	0a 94       	dec	r0
    1424:	e2 f7       	brpl	.-8      	; 0x141e <MDIO_voidSetPinValue+0x168>
    1426:	80 95       	com	r24
    1428:	84 23       	and	r24, r20
    142a:	8c 93       	st	X, r24
    142c:	2e c0       	rjmp	.+92     	; 0x148a <MDIO_voidSetPinValue+0x1d4>
		}
		break;
	case DIO_u8_PORTD:
		if(Copy_u8PinValue == DIO_u8_HIGH )
    142e:	8b 81       	ldd	r24, Y+3	; 0x03
    1430:	81 30       	cpi	r24, 0x01	; 1
    1432:	a1 f4       	brne	.+40     	; 0x145c <MDIO_voidSetPinValue+0x1a6>
		{
			SET_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);
    1434:	a2 e3       	ldi	r26, 0x32	; 50
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	e2 e3       	ldi	r30, 0x32	; 50
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	48 2f       	mov	r20, r24
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	28 2f       	mov	r18, r24
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	02 2e       	mov	r0, r18
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <MDIO_voidSetPinValue+0x19c>
    144e:	88 0f       	add	r24, r24
    1450:	99 1f       	adc	r25, r25
    1452:	0a 94       	dec	r0
    1454:	e2 f7       	brpl	.-8      	; 0x144e <MDIO_voidSetPinValue+0x198>
    1456:	84 2b       	or	r24, r20
    1458:	8c 93       	st	X, r24
    145a:	17 c0       	rjmp	.+46     	; 0x148a <MDIO_voidSetPinValue+0x1d4>
		}
		else if(Copy_u8PinValue == DIO_u8_LOW)
    145c:	8b 81       	ldd	r24, Y+3	; 0x03
    145e:	88 23       	and	r24, r24
    1460:	a1 f4       	brne	.+40     	; 0x148a <MDIO_voidSetPinValue+0x1d4>
		{
			CLR_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);
    1462:	a2 e3       	ldi	r26, 0x32	; 50
    1464:	b0 e0       	ldi	r27, 0x00	; 0
    1466:	e2 e3       	ldi	r30, 0x32	; 50
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	48 2f       	mov	r20, r24
    146e:	8a 81       	ldd	r24, Y+2	; 0x02
    1470:	28 2f       	mov	r18, r24
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	02 2e       	mov	r0, r18
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <MDIO_voidSetPinValue+0x1ca>
    147c:	88 0f       	add	r24, r24
    147e:	99 1f       	adc	r25, r25
    1480:	0a 94       	dec	r0
    1482:	e2 f7       	brpl	.-8      	; 0x147c <MDIO_voidSetPinValue+0x1c6>
    1484:	80 95       	com	r24
    1486:	84 23       	and	r24, r20
    1488:	8c 93       	st	X, r24
		break;
	default:

		break;
	}
}
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	0f 90       	pop	r0
    1490:	0f 90       	pop	r0
    1492:	0f 90       	pop	r0
    1494:	cf 91       	pop	r28
    1496:	df 91       	pop	r29
    1498:	08 95       	ret

0000149a <MDIO_voidSetPortDirection>:


void MDIO_voidSetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
    149a:	df 93       	push	r29
    149c:	cf 93       	push	r28
    149e:	00 d0       	rcall	.+0      	; 0x14a0 <MDIO_voidSetPortDirection+0x6>
    14a0:	00 d0       	rcall	.+0      	; 0x14a2 <MDIO_voidSetPortDirection+0x8>
    14a2:	cd b7       	in	r28, 0x3d	; 61
    14a4:	de b7       	in	r29, 0x3e	; 62
    14a6:	89 83       	std	Y+1, r24	; 0x01
    14a8:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortId)
    14aa:	89 81       	ldd	r24, Y+1	; 0x01
    14ac:	28 2f       	mov	r18, r24
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	3c 83       	std	Y+4, r19	; 0x04
    14b2:	2b 83       	std	Y+3, r18	; 0x03
    14b4:	8b 81       	ldd	r24, Y+3	; 0x03
    14b6:	9c 81       	ldd	r25, Y+4	; 0x04
    14b8:	81 30       	cpi	r24, 0x01	; 1
    14ba:	91 05       	cpc	r25, r1
    14bc:	d1 f0       	breq	.+52     	; 0x14f2 <MDIO_voidSetPortDirection+0x58>
    14be:	2b 81       	ldd	r18, Y+3	; 0x03
    14c0:	3c 81       	ldd	r19, Y+4	; 0x04
    14c2:	22 30       	cpi	r18, 0x02	; 2
    14c4:	31 05       	cpc	r19, r1
    14c6:	2c f4       	brge	.+10     	; 0x14d2 <MDIO_voidSetPortDirection+0x38>
    14c8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ca:	9c 81       	ldd	r25, Y+4	; 0x04
    14cc:	00 97       	sbiw	r24, 0x00	; 0
    14ce:	61 f0       	breq	.+24     	; 0x14e8 <MDIO_voidSetPortDirection+0x4e>
    14d0:	1e c0       	rjmp	.+60     	; 0x150e <MDIO_voidSetPortDirection+0x74>
    14d2:	2b 81       	ldd	r18, Y+3	; 0x03
    14d4:	3c 81       	ldd	r19, Y+4	; 0x04
    14d6:	22 30       	cpi	r18, 0x02	; 2
    14d8:	31 05       	cpc	r19, r1
    14da:	81 f0       	breq	.+32     	; 0x14fc <MDIO_voidSetPortDirection+0x62>
    14dc:	8b 81       	ldd	r24, Y+3	; 0x03
    14de:	9c 81       	ldd	r25, Y+4	; 0x04
    14e0:	83 30       	cpi	r24, 0x03	; 3
    14e2:	91 05       	cpc	r25, r1
    14e4:	81 f0       	breq	.+32     	; 0x1506 <MDIO_voidSetPortDirection+0x6c>
    14e6:	13 c0       	rjmp	.+38     	; 0x150e <MDIO_voidSetPortDirection+0x74>
	{
	case DIO_u8_PORTA:
		DIO_u8_DDRA_REG = Copy_u8PortDirection;
    14e8:	ea e3       	ldi	r30, 0x3A	; 58
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	8a 81       	ldd	r24, Y+2	; 0x02
    14ee:	80 83       	st	Z, r24
    14f0:	0e c0       	rjmp	.+28     	; 0x150e <MDIO_voidSetPortDirection+0x74>
		break;
	case DIO_u8_PORTB:
		DIO_u8_DDRB_REG = Copy_u8PortDirection;
    14f2:	e7 e3       	ldi	r30, 0x37	; 55
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	8a 81       	ldd	r24, Y+2	; 0x02
    14f8:	80 83       	st	Z, r24
    14fa:	09 c0       	rjmp	.+18     	; 0x150e <MDIO_voidSetPortDirection+0x74>
		break;
	case DIO_u8_PORTC:
		DIO_u8_DDRC_REG = Copy_u8PortDirection;
    14fc:	e4 e3       	ldi	r30, 0x34	; 52
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	8a 81       	ldd	r24, Y+2	; 0x02
    1502:	80 83       	st	Z, r24
    1504:	04 c0       	rjmp	.+8      	; 0x150e <MDIO_voidSetPortDirection+0x74>
		break;
	case DIO_u8_PORTD:
		DIO_u8_DDRD_REG = Copy_u8PortDirection;
    1506:	e1 e3       	ldi	r30, 0x31	; 49
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	8a 81       	ldd	r24, Y+2	; 0x02
    150c:	80 83       	st	Z, r24
		break;
	default:

		break;
	}
}
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	0f 90       	pop	r0
    1516:	cf 91       	pop	r28
    1518:	df 91       	pop	r29
    151a:	08 95       	ret

0000151c <MDIO_voidSetPortValue>:


void MDIO_voidSetPortValue    (u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
    151c:	df 93       	push	r29
    151e:	cf 93       	push	r28
    1520:	00 d0       	rcall	.+0      	; 0x1522 <MDIO_voidSetPortValue+0x6>
    1522:	00 d0       	rcall	.+0      	; 0x1524 <MDIO_voidSetPortValue+0x8>
    1524:	cd b7       	in	r28, 0x3d	; 61
    1526:	de b7       	in	r29, 0x3e	; 62
    1528:	89 83       	std	Y+1, r24	; 0x01
    152a:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortId)
    152c:	89 81       	ldd	r24, Y+1	; 0x01
    152e:	28 2f       	mov	r18, r24
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	3c 83       	std	Y+4, r19	; 0x04
    1534:	2b 83       	std	Y+3, r18	; 0x03
    1536:	8b 81       	ldd	r24, Y+3	; 0x03
    1538:	9c 81       	ldd	r25, Y+4	; 0x04
    153a:	81 30       	cpi	r24, 0x01	; 1
    153c:	91 05       	cpc	r25, r1
    153e:	d1 f0       	breq	.+52     	; 0x1574 <MDIO_voidSetPortValue+0x58>
    1540:	2b 81       	ldd	r18, Y+3	; 0x03
    1542:	3c 81       	ldd	r19, Y+4	; 0x04
    1544:	22 30       	cpi	r18, 0x02	; 2
    1546:	31 05       	cpc	r19, r1
    1548:	2c f4       	brge	.+10     	; 0x1554 <MDIO_voidSetPortValue+0x38>
    154a:	8b 81       	ldd	r24, Y+3	; 0x03
    154c:	9c 81       	ldd	r25, Y+4	; 0x04
    154e:	00 97       	sbiw	r24, 0x00	; 0
    1550:	61 f0       	breq	.+24     	; 0x156a <MDIO_voidSetPortValue+0x4e>
    1552:	1e c0       	rjmp	.+60     	; 0x1590 <MDIO_voidSetPortValue+0x74>
    1554:	2b 81       	ldd	r18, Y+3	; 0x03
    1556:	3c 81       	ldd	r19, Y+4	; 0x04
    1558:	22 30       	cpi	r18, 0x02	; 2
    155a:	31 05       	cpc	r19, r1
    155c:	81 f0       	breq	.+32     	; 0x157e <MDIO_voidSetPortValue+0x62>
    155e:	8b 81       	ldd	r24, Y+3	; 0x03
    1560:	9c 81       	ldd	r25, Y+4	; 0x04
    1562:	83 30       	cpi	r24, 0x03	; 3
    1564:	91 05       	cpc	r25, r1
    1566:	81 f0       	breq	.+32     	; 0x1588 <MDIO_voidSetPortValue+0x6c>
    1568:	13 c0       	rjmp	.+38     	; 0x1590 <MDIO_voidSetPortValue+0x74>
	{
	case DIO_u8_PORTA:
		DIO_u8_PORTA_REG = Copy_u8PortValue;
    156a:	eb e3       	ldi	r30, 0x3B	; 59
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	8a 81       	ldd	r24, Y+2	; 0x02
    1570:	80 83       	st	Z, r24
    1572:	0e c0       	rjmp	.+28     	; 0x1590 <MDIO_voidSetPortValue+0x74>
		break;
	case DIO_u8_PORTB:
		DIO_u8_PORTB_REG = Copy_u8PortValue;
    1574:	e8 e3       	ldi	r30, 0x38	; 56
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	8a 81       	ldd	r24, Y+2	; 0x02
    157a:	80 83       	st	Z, r24
    157c:	09 c0       	rjmp	.+18     	; 0x1590 <MDIO_voidSetPortValue+0x74>
		break;
	case DIO_u8_PORTC:
		DIO_u8_PORTC_REG = Copy_u8PortValue;
    157e:	e5 e3       	ldi	r30, 0x35	; 53
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	8a 81       	ldd	r24, Y+2	; 0x02
    1584:	80 83       	st	Z, r24
    1586:	04 c0       	rjmp	.+8      	; 0x1590 <MDIO_voidSetPortValue+0x74>
		break;
	case DIO_u8_PORTD:
		DIO_u8_PORTD_REG = Copy_u8PortValue;
    1588:	e2 e3       	ldi	r30, 0x32	; 50
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	8a 81       	ldd	r24, Y+2	; 0x02
    158e:	80 83       	st	Z, r24
		break;
	default:

		break;
	}
}
    1590:	0f 90       	pop	r0
    1592:	0f 90       	pop	r0
    1594:	0f 90       	pop	r0
    1596:	0f 90       	pop	r0
    1598:	cf 91       	pop	r28
    159a:	df 91       	pop	r29
    159c:	08 95       	ret

0000159e <MDIO_u8GetPinValue>:


u8 MDIO_u8GetPinValue         (u8 Copy_u8PortId, u8 Copy_u8PinId)
{
    159e:	df 93       	push	r29
    15a0:	cf 93       	push	r28
    15a2:	00 d0       	rcall	.+0      	; 0x15a4 <MDIO_u8GetPinValue+0x6>
    15a4:	00 d0       	rcall	.+0      	; 0x15a6 <MDIO_u8GetPinValue+0x8>
    15a6:	0f 92       	push	r0
    15a8:	cd b7       	in	r28, 0x3d	; 61
    15aa:	de b7       	in	r29, 0x3e	; 62
    15ac:	8a 83       	std	Y+2, r24	; 0x02
    15ae:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8VALUE;
	switch(Copy_u8PortId)
    15b0:	8a 81       	ldd	r24, Y+2	; 0x02
    15b2:	28 2f       	mov	r18, r24
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	3d 83       	std	Y+5, r19	; 0x05
    15b8:	2c 83       	std	Y+4, r18	; 0x04
    15ba:	4c 81       	ldd	r20, Y+4	; 0x04
    15bc:	5d 81       	ldd	r21, Y+5	; 0x05
    15be:	41 30       	cpi	r20, 0x01	; 1
    15c0:	51 05       	cpc	r21, r1
    15c2:	41 f1       	breq	.+80     	; 0x1614 <MDIO_u8GetPinValue+0x76>
    15c4:	8c 81       	ldd	r24, Y+4	; 0x04
    15c6:	9d 81       	ldd	r25, Y+5	; 0x05
    15c8:	82 30       	cpi	r24, 0x02	; 2
    15ca:	91 05       	cpc	r25, r1
    15cc:	34 f4       	brge	.+12     	; 0x15da <MDIO_u8GetPinValue+0x3c>
    15ce:	2c 81       	ldd	r18, Y+4	; 0x04
    15d0:	3d 81       	ldd	r19, Y+5	; 0x05
    15d2:	21 15       	cp	r18, r1
    15d4:	31 05       	cpc	r19, r1
    15d6:	61 f0       	breq	.+24     	; 0x15f0 <MDIO_u8GetPinValue+0x52>
    15d8:	52 c0       	rjmp	.+164    	; 0x167e <MDIO_u8GetPinValue+0xe0>
    15da:	4c 81       	ldd	r20, Y+4	; 0x04
    15dc:	5d 81       	ldd	r21, Y+5	; 0x05
    15de:	42 30       	cpi	r20, 0x02	; 2
    15e0:	51 05       	cpc	r21, r1
    15e2:	51 f1       	breq	.+84     	; 0x1638 <MDIO_u8GetPinValue+0x9a>
    15e4:	8c 81       	ldd	r24, Y+4	; 0x04
    15e6:	9d 81       	ldd	r25, Y+5	; 0x05
    15e8:	83 30       	cpi	r24, 0x03	; 3
    15ea:	91 05       	cpc	r25, r1
    15ec:	b9 f1       	breq	.+110    	; 0x165c <MDIO_u8GetPinValue+0xbe>
    15ee:	47 c0       	rjmp	.+142    	; 0x167e <MDIO_u8GetPinValue+0xe0>
	{
	case DIO_u8_PORTA:
		Local_u8VALUE = GET_BIT(DIO_u8_PINA_REG,Copy_u8PinId);
    15f0:	e9 e3       	ldi	r30, 0x39	; 57
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	80 81       	ld	r24, Z
    15f6:	28 2f       	mov	r18, r24
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	8b 81       	ldd	r24, Y+3	; 0x03
    15fc:	88 2f       	mov	r24, r24
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	a9 01       	movw	r20, r18
    1602:	02 c0       	rjmp	.+4      	; 0x1608 <MDIO_u8GetPinValue+0x6a>
    1604:	55 95       	asr	r21
    1606:	47 95       	ror	r20
    1608:	8a 95       	dec	r24
    160a:	e2 f7       	brpl	.-8      	; 0x1604 <MDIO_u8GetPinValue+0x66>
    160c:	ca 01       	movw	r24, r20
    160e:	81 70       	andi	r24, 0x01	; 1
    1610:	89 83       	std	Y+1, r24	; 0x01
    1612:	35 c0       	rjmp	.+106    	; 0x167e <MDIO_u8GetPinValue+0xe0>
		break;
	case DIO_u8_PORTB:
		Local_u8VALUE = GET_BIT(DIO_u8_PINB_REG,Copy_u8PinId);
    1614:	e6 e3       	ldi	r30, 0x36	; 54
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	28 2f       	mov	r18, r24
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	8b 81       	ldd	r24, Y+3	; 0x03
    1620:	88 2f       	mov	r24, r24
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	a9 01       	movw	r20, r18
    1626:	02 c0       	rjmp	.+4      	; 0x162c <MDIO_u8GetPinValue+0x8e>
    1628:	55 95       	asr	r21
    162a:	47 95       	ror	r20
    162c:	8a 95       	dec	r24
    162e:	e2 f7       	brpl	.-8      	; 0x1628 <MDIO_u8GetPinValue+0x8a>
    1630:	ca 01       	movw	r24, r20
    1632:	81 70       	andi	r24, 0x01	; 1
    1634:	89 83       	std	Y+1, r24	; 0x01
    1636:	23 c0       	rjmp	.+70     	; 0x167e <MDIO_u8GetPinValue+0xe0>
		break;
	case DIO_u8_PORTC:
		Local_u8VALUE = GET_BIT(DIO_u8_PINC_REG,Copy_u8PinId);
    1638:	e3 e3       	ldi	r30, 0x33	; 51
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	80 81       	ld	r24, Z
    163e:	28 2f       	mov	r18, r24
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	8b 81       	ldd	r24, Y+3	; 0x03
    1644:	88 2f       	mov	r24, r24
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	a9 01       	movw	r20, r18
    164a:	02 c0       	rjmp	.+4      	; 0x1650 <MDIO_u8GetPinValue+0xb2>
    164c:	55 95       	asr	r21
    164e:	47 95       	ror	r20
    1650:	8a 95       	dec	r24
    1652:	e2 f7       	brpl	.-8      	; 0x164c <MDIO_u8GetPinValue+0xae>
    1654:	ca 01       	movw	r24, r20
    1656:	81 70       	andi	r24, 0x01	; 1
    1658:	89 83       	std	Y+1, r24	; 0x01
    165a:	11 c0       	rjmp	.+34     	; 0x167e <MDIO_u8GetPinValue+0xe0>
		break;
	case DIO_u8_PORTD:
		Local_u8VALUE = GET_BIT(DIO_u8_PIND_REG,Copy_u8PinId);
    165c:	e0 e3       	ldi	r30, 0x30	; 48
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	28 2f       	mov	r18, r24
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	8b 81       	ldd	r24, Y+3	; 0x03
    1668:	88 2f       	mov	r24, r24
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	a9 01       	movw	r20, r18
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <MDIO_u8GetPinValue+0xd6>
    1670:	55 95       	asr	r21
    1672:	47 95       	ror	r20
    1674:	8a 95       	dec	r24
    1676:	e2 f7       	brpl	.-8      	; 0x1670 <MDIO_u8GetPinValue+0xd2>
    1678:	ca 01       	movw	r24, r20
    167a:	81 70       	andi	r24, 0x01	; 1
    167c:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:

		break;
	}
	return Local_u8VALUE;
    167e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1680:	0f 90       	pop	r0
    1682:	0f 90       	pop	r0
    1684:	0f 90       	pop	r0
    1686:	0f 90       	pop	r0
    1688:	0f 90       	pop	r0
    168a:	cf 91       	pop	r28
    168c:	df 91       	pop	r29
    168e:	08 95       	ret

00001690 <HKEYPAD_voidInit>:
		{ 'C' , 0 , '=' , '+'}
};
u8 KeypadCol [4] = KEYPAD_COLs;
u8 KeypadRow [4] = KEYPAD_ROWs;
void HKEYPAD_voidInit(void)
{
    1690:	df 93       	push	r29
    1692:	cf 93       	push	r28
    1694:	cd b7       	in	r28, 0x3d	; 61
    1696:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidSetPinDirection(KEYPAD_ROW_PORT,KeypadRow[0],DIO_u8_OUTPUT);
    1698:	90 91 7c 00 	lds	r25, 0x007C
    169c:	82 e0       	ldi	r24, 0x02	; 2
    169e:	69 2f       	mov	r22, r25
    16a0:	41 e0       	ldi	r20, 0x01	; 1
    16a2:	0e 94 69 08 	call	0x10d2	; 0x10d2 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(KEYPAD_ROW_PORT,KeypadRow[1],DIO_u8_OUTPUT);
    16a6:	90 91 7d 00 	lds	r25, 0x007D
    16aa:	82 e0       	ldi	r24, 0x02	; 2
    16ac:	69 2f       	mov	r22, r25
    16ae:	41 e0       	ldi	r20, 0x01	; 1
    16b0:	0e 94 69 08 	call	0x10d2	; 0x10d2 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(KEYPAD_ROW_PORT,KeypadRow[2],DIO_u8_OUTPUT);
    16b4:	90 91 7e 00 	lds	r25, 0x007E
    16b8:	82 e0       	ldi	r24, 0x02	; 2
    16ba:	69 2f       	mov	r22, r25
    16bc:	41 e0       	ldi	r20, 0x01	; 1
    16be:	0e 94 69 08 	call	0x10d2	; 0x10d2 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(KEYPAD_ROW_PORT,KeypadRow[3],DIO_u8_OUTPUT);
    16c2:	90 91 7f 00 	lds	r25, 0x007F
    16c6:	82 e0       	ldi	r24, 0x02	; 2
    16c8:	69 2f       	mov	r22, r25
    16ca:	41 e0       	ldi	r20, 0x01	; 1
    16cc:	0e 94 69 08 	call	0x10d2	; 0x10d2 <MDIO_voidSetPinDirection>
	
	MDIO_voidSetPinValue(KEYPAD_ROW_PORT,KeypadRow[0],DIO_u8_HIGH);
    16d0:	90 91 7c 00 	lds	r25, 0x007C
    16d4:	82 e0       	ldi	r24, 0x02	; 2
    16d6:	69 2f       	mov	r22, r25
    16d8:	41 e0       	ldi	r20, 0x01	; 1
    16da:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(KEYPAD_ROW_PORT,KeypadRow[1],DIO_u8_HIGH);
    16de:	90 91 7d 00 	lds	r25, 0x007D
    16e2:	82 e0       	ldi	r24, 0x02	; 2
    16e4:	69 2f       	mov	r22, r25
    16e6:	41 e0       	ldi	r20, 0x01	; 1
    16e8:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(KEYPAD_ROW_PORT,KeypadRow[2],DIO_u8_HIGH);
    16ec:	90 91 7e 00 	lds	r25, 0x007E
    16f0:	82 e0       	ldi	r24, 0x02	; 2
    16f2:	69 2f       	mov	r22, r25
    16f4:	41 e0       	ldi	r20, 0x01	; 1
    16f6:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(KEYPAD_ROW_PORT,KeypadRow[3],DIO_u8_HIGH);
    16fa:	90 91 7f 00 	lds	r25, 0x007F
    16fe:	82 e0       	ldi	r24, 0x02	; 2
    1700:	69 2f       	mov	r22, r25
    1702:	41 e0       	ldi	r20, 0x01	; 1
    1704:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
	
	MDIO_voidSetPinDirection(KEYPAD_COL_PORT,KeypadCol[0],DIO_u8_INPUT);
    1708:	90 91 78 00 	lds	r25, 0x0078
    170c:	83 e0       	ldi	r24, 0x03	; 3
    170e:	69 2f       	mov	r22, r25
    1710:	40 e0       	ldi	r20, 0x00	; 0
    1712:	0e 94 69 08 	call	0x10d2	; 0x10d2 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(KEYPAD_COL_PORT,KeypadCol[1],DIO_u8_INPUT);
    1716:	90 91 79 00 	lds	r25, 0x0079
    171a:	83 e0       	ldi	r24, 0x03	; 3
    171c:	69 2f       	mov	r22, r25
    171e:	40 e0       	ldi	r20, 0x00	; 0
    1720:	0e 94 69 08 	call	0x10d2	; 0x10d2 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(KEYPAD_COL_PORT,KeypadCol[2],DIO_u8_INPUT);
    1724:	90 91 7a 00 	lds	r25, 0x007A
    1728:	83 e0       	ldi	r24, 0x03	; 3
    172a:	69 2f       	mov	r22, r25
    172c:	40 e0       	ldi	r20, 0x00	; 0
    172e:	0e 94 69 08 	call	0x10d2	; 0x10d2 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(KEYPAD_COL_PORT,KeypadCol[3],DIO_u8_INPUT);
    1732:	90 91 7b 00 	lds	r25, 0x007B
    1736:	83 e0       	ldi	r24, 0x03	; 3
    1738:	69 2f       	mov	r22, r25
    173a:	40 e0       	ldi	r20, 0x00	; 0
    173c:	0e 94 69 08 	call	0x10d2	; 0x10d2 <MDIO_voidSetPinDirection>
}
    1740:	cf 91       	pop	r28
    1742:	df 91       	pop	r29
    1744:	08 95       	ret

00001746 <HKEYPAD_u8GetPressedKey>:

u8 HKEYPAD_u8GetPressedKey (void)
{
    1746:	df 93       	push	r29
    1748:	cf 93       	push	r28
    174a:	00 d0       	rcall	.+0      	; 0x174c <HKEYPAD_u8GetPressedKey+0x6>
    174c:	00 d0       	rcall	.+0      	; 0x174e <HKEYPAD_u8GetPressedKey+0x8>
    174e:	cd b7       	in	r28, 0x3d	; 61
    1750:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Reading = 0xFF;
    1752:	8f ef       	ldi	r24, 0xFF	; 255
    1754:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_u8Row = 0;
    1756:	1b 82       	std	Y+3, r1	; 0x03
	u8 Local_u8Col = 0;
    1758:	1a 82       	std	Y+2, r1	; 0x02

	u8 Local_value = RELEASED;
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	89 83       	std	Y+1, r24	; 0x01
	for (Local_u8Row = 0 ; Local_u8Row <= 3 ; Local_u8Row++)
    175e:	1b 82       	std	Y+3, r1	; 0x03
    1760:	53 c0       	rjmp	.+166    	; 0x1808 <HKEYPAD_u8GetPressedKey+0xc2>
	{
		MDIO_voidSetPinValue(KEYPAD_ROW_PORT,KeypadRow[Local_u8Row],DIO_u8_LOW);
    1762:	8b 81       	ldd	r24, Y+3	; 0x03
    1764:	88 2f       	mov	r24, r24
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	fc 01       	movw	r30, r24
    176a:	e4 58       	subi	r30, 0x84	; 132
    176c:	ff 4f       	sbci	r31, 0xFF	; 255
    176e:	90 81       	ld	r25, Z
    1770:	82 e0       	ldi	r24, 0x02	; 2
    1772:	69 2f       	mov	r22, r25
    1774:	40 e0       	ldi	r20, 0x00	; 0
    1776:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
		for (Local_u8Col = 0 ; Local_u8Col <= 3 ; Local_u8Col++)
    177a:	1a 82       	std	Y+2, r1	; 0x02
    177c:	33 c0       	rjmp	.+102    	; 0x17e4 <HKEYPAD_u8GetPressedKey+0x9e>
		{
			Local_value = MDIO_u8GetPinValue(KEYPAD_COL_PORT,KeypadCol[Local_u8Col]);
    177e:	8a 81       	ldd	r24, Y+2	; 0x02
    1780:	88 2f       	mov	r24, r24
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	fc 01       	movw	r30, r24
    1786:	e8 58       	subi	r30, 0x88	; 136
    1788:	ff 4f       	sbci	r31, 0xFF	; 255
    178a:	90 81       	ld	r25, Z
    178c:	83 e0       	ldi	r24, 0x03	; 3
    178e:	69 2f       	mov	r22, r25
    1790:	0e 94 cf 0a 	call	0x159e	; 0x159e <MDIO_u8GetPinValue>
    1794:	89 83       	std	Y+1, r24	; 0x01
			if(Local_value == PRESSED)
    1796:	89 81       	ldd	r24, Y+1	; 0x01
    1798:	88 23       	and	r24, r24
    179a:	09 f5       	brne	.+66     	; 0x17de <HKEYPAD_u8GetPressedKey+0x98>
			{
				Local_value = MDIO_u8GetPinValue(KEYPAD_COL_PORT,KeypadCol[Local_u8Col]);
    179c:	8a 81       	ldd	r24, Y+2	; 0x02
    179e:	88 2f       	mov	r24, r24
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	fc 01       	movw	r30, r24
    17a4:	e8 58       	subi	r30, 0x88	; 136
    17a6:	ff 4f       	sbci	r31, 0xFF	; 255
    17a8:	90 81       	ld	r25, Z
    17aa:	83 e0       	ldi	r24, 0x03	; 3
    17ac:	69 2f       	mov	r22, r25
    17ae:	0e 94 cf 0a 	call	0x159e	; 0x159e <MDIO_u8GetPinValue>
    17b2:	89 83       	std	Y+1, r24	; 0x01
				if(Local_value == PRESSED)
    17b4:	89 81       	ldd	r24, Y+1	; 0x01
    17b6:	88 23       	and	r24, r24
    17b8:	91 f4       	brne	.+36     	; 0x17de <HKEYPAD_u8GetPressedKey+0x98>
				{
					Local_u8Reading = arr[Local_u8Row][Local_u8Col];
    17ba:	8b 81       	ldd	r24, Y+3	; 0x03
    17bc:	48 2f       	mov	r20, r24
    17be:	50 e0       	ldi	r21, 0x00	; 0
    17c0:	8a 81       	ldd	r24, Y+2	; 0x02
    17c2:	28 2f       	mov	r18, r24
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	ca 01       	movw	r24, r20
    17c8:	88 0f       	add	r24, r24
    17ca:	99 1f       	adc	r25, r25
    17cc:	88 0f       	add	r24, r24
    17ce:	99 1f       	adc	r25, r25
    17d0:	82 0f       	add	r24, r18
    17d2:	93 1f       	adc	r25, r19
    17d4:	fc 01       	movw	r30, r24
    17d6:	e8 59       	subi	r30, 0x98	; 152
    17d8:	ff 4f       	sbci	r31, 0xFF	; 255
    17da:	80 81       	ld	r24, Z
    17dc:	8c 83       	std	Y+4, r24	; 0x04

	u8 Local_value = RELEASED;
	for (Local_u8Row = 0 ; Local_u8Row <= 3 ; Local_u8Row++)
	{
		MDIO_voidSetPinValue(KEYPAD_ROW_PORT,KeypadRow[Local_u8Row],DIO_u8_LOW);
		for (Local_u8Col = 0 ; Local_u8Col <= 3 ; Local_u8Col++)
    17de:	8a 81       	ldd	r24, Y+2	; 0x02
    17e0:	8f 5f       	subi	r24, 0xFF	; 255
    17e2:	8a 83       	std	Y+2, r24	; 0x02
    17e4:	8a 81       	ldd	r24, Y+2	; 0x02
    17e6:	84 30       	cpi	r24, 0x04	; 4
    17e8:	50 f2       	brcs	.-108    	; 0x177e <HKEYPAD_u8GetPressedKey+0x38>
				{
					Local_u8Reading = arr[Local_u8Row][Local_u8Col];
				}
			}
		}
		MDIO_voidSetPinValue(KEYPAD_ROW_PORT,KeypadRow[Local_u8Row],DIO_u8_HIGH);
    17ea:	8b 81       	ldd	r24, Y+3	; 0x03
    17ec:	88 2f       	mov	r24, r24
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	fc 01       	movw	r30, r24
    17f2:	e4 58       	subi	r30, 0x84	; 132
    17f4:	ff 4f       	sbci	r31, 0xFF	; 255
    17f6:	90 81       	ld	r25, Z
    17f8:	82 e0       	ldi	r24, 0x02	; 2
    17fa:	69 2f       	mov	r22, r25
    17fc:	41 e0       	ldi	r20, 0x01	; 1
    17fe:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
	u8 Local_u8Reading = 0xFF;
	u8 Local_u8Row = 0;
	u8 Local_u8Col = 0;

	u8 Local_value = RELEASED;
	for (Local_u8Row = 0 ; Local_u8Row <= 3 ; Local_u8Row++)
    1802:	8b 81       	ldd	r24, Y+3	; 0x03
    1804:	8f 5f       	subi	r24, 0xFF	; 255
    1806:	8b 83       	std	Y+3, r24	; 0x03
    1808:	8b 81       	ldd	r24, Y+3	; 0x03
    180a:	84 30       	cpi	r24, 0x04	; 4
    180c:	08 f4       	brcc	.+2      	; 0x1810 <HKEYPAD_u8GetPressedKey+0xca>
    180e:	a9 cf       	rjmp	.-174    	; 0x1762 <HKEYPAD_u8GetPressedKey+0x1c>
				}
			}
		}
		MDIO_voidSetPinValue(KEYPAD_ROW_PORT,KeypadRow[Local_u8Row],DIO_u8_HIGH);
	}
	return Local_u8Reading ;
    1810:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1812:	0f 90       	pop	r0
    1814:	0f 90       	pop	r0
    1816:	0f 90       	pop	r0
    1818:	0f 90       	pop	r0
    181a:	cf 91       	pop	r28
    181c:	df 91       	pop	r29
    181e:	08 95       	ret

00001820 <HLCD_voidInit>:
#include "LCD_CONFIG.h"
#include "LCD_PRIVATE.h"
#include "LCD_INTERFACE.h"

void HLCD_voidInit(void)
{
    1820:	df 93       	push	r29
    1822:	cf 93       	push	r28
    1824:	cd b7       	in	r28, 0x3d	; 61
    1826:	de b7       	in	r29, 0x3e	; 62
    1828:	2e 97       	sbiw	r28, 0x0e	; 14
    182a:	0f b6       	in	r0, 0x3f	; 63
    182c:	f8 94       	cli
    182e:	de bf       	out	0x3e, r29	; 62
    1830:	0f be       	out	0x3f, r0	; 63
    1832:	cd bf       	out	0x3d, r28	; 61
	MDIO_voidSetPinDirection(LCD_CONTROL_PORT,LCD_EN_PIN,DIO_u8_OUTPUT);
    1834:	80 e0       	ldi	r24, 0x00	; 0
    1836:	62 e0       	ldi	r22, 0x02	; 2
    1838:	41 e0       	ldi	r20, 0x01	; 1
    183a:	0e 94 69 08 	call	0x10d2	; 0x10d2 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_u8_OUTPUT);
    183e:	80 e0       	ldi	r24, 0x00	; 0
    1840:	63 e0       	ldi	r22, 0x03	; 3
    1842:	41 e0       	ldi	r20, 0x01	; 1
    1844:	0e 94 69 08 	call	0x10d2	; 0x10d2 <MDIO_voidSetPinDirection>
	#if (LCD_MODE == _8_BIT_MODE)
	MDIO_voidSetPortDirection(LCD_DATA_PORT,0xFF);
	_delay_ms(100);
	HLCD_voidSendCommand(0x38);			/*select 8-bit Mode*/
	#elif (LCD_MODE == _4_BIT_MODE)
	MDIO_voidSetPinDirection(LCD_DATA_PORT,LCD_DATA_PIN_4,DIO_u8_OUTPUT);
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	60 e0       	ldi	r22, 0x00	; 0
    184c:	41 e0       	ldi	r20, 0x01	; 1
    184e:	0e 94 69 08 	call	0x10d2	; 0x10d2 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(LCD_DATA_PORT,LCD_DATA_PIN_5,DIO_u8_OUTPUT);
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	61 e0       	ldi	r22, 0x01	; 1
    1856:	41 e0       	ldi	r20, 0x01	; 1
    1858:	0e 94 69 08 	call	0x10d2	; 0x10d2 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(LCD_DATA_PORT,LCD_DATA_PIN_6,DIO_u8_OUTPUT);
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	62 e0       	ldi	r22, 0x02	; 2
    1860:	41 e0       	ldi	r20, 0x01	; 1
    1862:	0e 94 69 08 	call	0x10d2	; 0x10d2 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(LCD_DATA_PORT,LCD_DATA_PIN_7,DIO_u8_OUTPUT);
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	64 e0       	ldi	r22, 0x04	; 4
    186a:	41 e0       	ldi	r20, 0x01	; 1
    186c:	0e 94 69 08 	call	0x10d2	; 0x10d2 <MDIO_voidSetPinDirection>
    1870:	80 e0       	ldi	r24, 0x00	; 0
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	a8 ec       	ldi	r26, 0xC8	; 200
    1876:	b2 e4       	ldi	r27, 0x42	; 66
    1878:	8b 87       	std	Y+11, r24	; 0x0b
    187a:	9c 87       	std	Y+12, r25	; 0x0c
    187c:	ad 87       	std	Y+13, r26	; 0x0d
    187e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1880:	6b 85       	ldd	r22, Y+11	; 0x0b
    1882:	7c 85       	ldd	r23, Y+12	; 0x0c
    1884:	8d 85       	ldd	r24, Y+13	; 0x0d
    1886:	9e 85       	ldd	r25, Y+14	; 0x0e
    1888:	20 e0       	ldi	r18, 0x00	; 0
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	4a ef       	ldi	r20, 0xFA	; 250
    188e:	54 e4       	ldi	r21, 0x44	; 68
    1890:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1894:	dc 01       	movw	r26, r24
    1896:	cb 01       	movw	r24, r22
    1898:	8f 83       	std	Y+7, r24	; 0x07
    189a:	98 87       	std	Y+8, r25	; 0x08
    189c:	a9 87       	std	Y+9, r26	; 0x09
    189e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18a0:	6f 81       	ldd	r22, Y+7	; 0x07
    18a2:	78 85       	ldd	r23, Y+8	; 0x08
    18a4:	89 85       	ldd	r24, Y+9	; 0x09
    18a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    18a8:	20 e0       	ldi	r18, 0x00	; 0
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	40 e8       	ldi	r20, 0x80	; 128
    18ae:	5f e3       	ldi	r21, 0x3F	; 63
    18b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18b4:	88 23       	and	r24, r24
    18b6:	2c f4       	brge	.+10     	; 0x18c2 <HLCD_voidInit+0xa2>
		__ticks = 1;
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	9e 83       	std	Y+6, r25	; 0x06
    18be:	8d 83       	std	Y+5, r24	; 0x05
    18c0:	3f c0       	rjmp	.+126    	; 0x1940 <HLCD_voidInit+0x120>
	else if (__tmp > 65535)
    18c2:	6f 81       	ldd	r22, Y+7	; 0x07
    18c4:	78 85       	ldd	r23, Y+8	; 0x08
    18c6:	89 85       	ldd	r24, Y+9	; 0x09
    18c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ca:	20 e0       	ldi	r18, 0x00	; 0
    18cc:	3f ef       	ldi	r19, 0xFF	; 255
    18ce:	4f e7       	ldi	r20, 0x7F	; 127
    18d0:	57 e4       	ldi	r21, 0x47	; 71
    18d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18d6:	18 16       	cp	r1, r24
    18d8:	4c f5       	brge	.+82     	; 0x192c <HLCD_voidInit+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18da:	6b 85       	ldd	r22, Y+11	; 0x0b
    18dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    18de:	8d 85       	ldd	r24, Y+13	; 0x0d
    18e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	40 e2       	ldi	r20, 0x20	; 32
    18e8:	51 e4       	ldi	r21, 0x41	; 65
    18ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ee:	dc 01       	movw	r26, r24
    18f0:	cb 01       	movw	r24, r22
    18f2:	bc 01       	movw	r22, r24
    18f4:	cd 01       	movw	r24, r26
    18f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18fa:	dc 01       	movw	r26, r24
    18fc:	cb 01       	movw	r24, r22
    18fe:	9e 83       	std	Y+6, r25	; 0x06
    1900:	8d 83       	std	Y+5, r24	; 0x05
    1902:	0f c0       	rjmp	.+30     	; 0x1922 <HLCD_voidInit+0x102>
    1904:	88 ec       	ldi	r24, 0xC8	; 200
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	9c 83       	std	Y+4, r25	; 0x04
    190a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    190c:	8b 81       	ldd	r24, Y+3	; 0x03
    190e:	9c 81       	ldd	r25, Y+4	; 0x04
    1910:	01 97       	sbiw	r24, 0x01	; 1
    1912:	f1 f7       	brne	.-4      	; 0x1910 <HLCD_voidInit+0xf0>
    1914:	9c 83       	std	Y+4, r25	; 0x04
    1916:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1918:	8d 81       	ldd	r24, Y+5	; 0x05
    191a:	9e 81       	ldd	r25, Y+6	; 0x06
    191c:	01 97       	sbiw	r24, 0x01	; 1
    191e:	9e 83       	std	Y+6, r25	; 0x06
    1920:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1922:	8d 81       	ldd	r24, Y+5	; 0x05
    1924:	9e 81       	ldd	r25, Y+6	; 0x06
    1926:	00 97       	sbiw	r24, 0x00	; 0
    1928:	69 f7       	brne	.-38     	; 0x1904 <HLCD_voidInit+0xe4>
    192a:	14 c0       	rjmp	.+40     	; 0x1954 <HLCD_voidInit+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    192c:	6f 81       	ldd	r22, Y+7	; 0x07
    192e:	78 85       	ldd	r23, Y+8	; 0x08
    1930:	89 85       	ldd	r24, Y+9	; 0x09
    1932:	9a 85       	ldd	r25, Y+10	; 0x0a
    1934:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1938:	dc 01       	movw	r26, r24
    193a:	cb 01       	movw	r24, r22
    193c:	9e 83       	std	Y+6, r25	; 0x06
    193e:	8d 83       	std	Y+5, r24	; 0x05
    1940:	8d 81       	ldd	r24, Y+5	; 0x05
    1942:	9e 81       	ldd	r25, Y+6	; 0x06
    1944:	9a 83       	std	Y+2, r25	; 0x02
    1946:	89 83       	std	Y+1, r24	; 0x01
    1948:	89 81       	ldd	r24, Y+1	; 0x01
    194a:	9a 81       	ldd	r25, Y+2	; 0x02
    194c:	01 97       	sbiw	r24, 0x01	; 1
    194e:	f1 f7       	brne	.-4      	; 0x194c <HLCD_voidInit+0x12c>
    1950:	9a 83       	std	Y+2, r25	; 0x02
    1952:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
	HLCD_voidSendCommand(0x33);		   /*select 4-bit Mode*/
    1954:	83 e3       	ldi	r24, 0x33	; 51
    1956:	0e 94 c8 0c 	call	0x1990	; 0x1990 <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0x32);
    195a:	82 e3       	ldi	r24, 0x32	; 50
    195c:	0e 94 c8 0c 	call	0x1990	; 0x1990 <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0x28);
    1960:	88 e2       	ldi	r24, 0x28	; 40
    1962:	0e 94 c8 0c 	call	0x1990	; 0x1990 <HLCD_voidSendCommand>
	#endif
	
	HLCD_voidSendCommand(0x0C);		/*TURN LCD DISPLAY		  */	
    1966:	8c e0       	ldi	r24, 0x0C	; 12
    1968:	0e 94 c8 0c 	call	0x1990	; 0x1990 <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0x02);		/*RETURN HOME			  */
    196c:	82 e0       	ldi	r24, 0x02	; 2
    196e:	0e 94 c8 0c 	call	0x1990	; 0x1990 <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0x01);		/*CLEAR	LCD DISPLAY		  */
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	0e 94 c8 0c 	call	0x1990	; 0x1990 <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0x06);		/*MOVE FROM LEFT TO RIGHT */
    1978:	86 e0       	ldi	r24, 0x06	; 6
    197a:	0e 94 c8 0c 	call	0x1990	; 0x1990 <HLCD_voidSendCommand>
}
    197e:	2e 96       	adiw	r28, 0x0e	; 14
    1980:	0f b6       	in	r0, 0x3f	; 63
    1982:	f8 94       	cli
    1984:	de bf       	out	0x3e, r29	; 62
    1986:	0f be       	out	0x3f, r0	; 63
    1988:	cd bf       	out	0x3d, r28	; 61
    198a:	cf 91       	pop	r28
    198c:	df 91       	pop	r29
    198e:	08 95       	ret

00001990 <HLCD_voidSendCommand>:

void HLCD_voidSendCommand(u8 Copy_u8Cmd)
{
    1990:	df 93       	push	r29
    1992:	cf 93       	push	r28
    1994:	cd b7       	in	r28, 0x3d	; 61
    1996:	de b7       	in	r29, 0x3e	; 62
    1998:	ab 97       	sbiw	r28, 0x2b	; 43
    199a:	0f b6       	in	r0, 0x3f	; 63
    199c:	f8 94       	cli
    199e:	de bf       	out	0x3e, r29	; 62
    19a0:	0f be       	out	0x3f, r0	; 63
    19a2:	cd bf       	out	0x3d, r28	; 61
    19a4:	8b a7       	std	Y+43, r24	; 0x2b
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_EN_PIN,DIO_u8_LOW);
	_delay_ms(5);
	
	#elif (LCD_MODE == _4_BIT_MODE)
	//to select command register
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_u8_LOW);
    19a6:	80 e0       	ldi	r24, 0x00	; 0
    19a8:	63 e0       	ldi	r22, 0x03	; 3
    19aa:	40 e0       	ldi	r20, 0x00	; 0
    19ac:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PIN_4, GET_BIT(Copy_u8Cmd,4));
    19b0:	8b a5       	ldd	r24, Y+43	; 0x2b
    19b2:	82 95       	swap	r24
    19b4:	8f 70       	andi	r24, 0x0F	; 15
    19b6:	98 2f       	mov	r25, r24
    19b8:	91 70       	andi	r25, 0x01	; 1
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	60 e0       	ldi	r22, 0x00	; 0
    19be:	49 2f       	mov	r20, r25
    19c0:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PIN_5, GET_BIT(Copy_u8Cmd,5));
    19c4:	8b a5       	ldd	r24, Y+43	; 0x2b
    19c6:	82 95       	swap	r24
    19c8:	86 95       	lsr	r24
    19ca:	87 70       	andi	r24, 0x07	; 7
    19cc:	98 2f       	mov	r25, r24
    19ce:	91 70       	andi	r25, 0x01	; 1
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	61 e0       	ldi	r22, 0x01	; 1
    19d4:	49 2f       	mov	r20, r25
    19d6:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PIN_6, GET_BIT(Copy_u8Cmd,6));
    19da:	8b a5       	ldd	r24, Y+43	; 0x2b
    19dc:	82 95       	swap	r24
    19de:	86 95       	lsr	r24
    19e0:	86 95       	lsr	r24
    19e2:	83 70       	andi	r24, 0x03	; 3
    19e4:	98 2f       	mov	r25, r24
    19e6:	91 70       	andi	r25, 0x01	; 1
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	62 e0       	ldi	r22, 0x02	; 2
    19ec:	49 2f       	mov	r20, r25
    19ee:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PIN_7, GET_BIT(Copy_u8Cmd,7));
    19f2:	8b a5       	ldd	r24, Y+43	; 0x2b
    19f4:	98 2f       	mov	r25, r24
    19f6:	99 1f       	adc	r25, r25
    19f8:	99 27       	eor	r25, r25
    19fa:	99 1f       	adc	r25, r25
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	64 e0       	ldi	r22, 0x04	; 4
    1a00:	49 2f       	mov	r20, r25
    1a02:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>

	MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_EN_PIN,DIO_u8_HIGH); //EN
    1a06:	80 e0       	ldi	r24, 0x00	; 0
    1a08:	62 e0       	ldi	r22, 0x02	; 2
    1a0a:	41 e0       	ldi	r20, 0x01	; 1
    1a0c:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
    1a10:	80 e0       	ldi	r24, 0x00	; 0
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	a0 e8       	ldi	r26, 0x80	; 128
    1a16:	bf e3       	ldi	r27, 0x3F	; 63
    1a18:	8f a3       	std	Y+39, r24	; 0x27
    1a1a:	98 a7       	std	Y+40, r25	; 0x28
    1a1c:	a9 a7       	std	Y+41, r26	; 0x29
    1a1e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a20:	6f a1       	ldd	r22, Y+39	; 0x27
    1a22:	78 a5       	ldd	r23, Y+40	; 0x28
    1a24:	89 a5       	ldd	r24, Y+41	; 0x29
    1a26:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a28:	20 e0       	ldi	r18, 0x00	; 0
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	4a ef       	ldi	r20, 0xFA	; 250
    1a2e:	54 e4       	ldi	r21, 0x44	; 68
    1a30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a34:	dc 01       	movw	r26, r24
    1a36:	cb 01       	movw	r24, r22
    1a38:	8b a3       	std	Y+35, r24	; 0x23
    1a3a:	9c a3       	std	Y+36, r25	; 0x24
    1a3c:	ad a3       	std	Y+37, r26	; 0x25
    1a3e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a40:	6b a1       	ldd	r22, Y+35	; 0x23
    1a42:	7c a1       	ldd	r23, Y+36	; 0x24
    1a44:	8d a1       	ldd	r24, Y+37	; 0x25
    1a46:	9e a1       	ldd	r25, Y+38	; 0x26
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	40 e8       	ldi	r20, 0x80	; 128
    1a4e:	5f e3       	ldi	r21, 0x3F	; 63
    1a50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a54:	88 23       	and	r24, r24
    1a56:	2c f4       	brge	.+10     	; 0x1a62 <HLCD_voidSendCommand+0xd2>
		__ticks = 1;
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	9a a3       	std	Y+34, r25	; 0x22
    1a5e:	89 a3       	std	Y+33, r24	; 0x21
    1a60:	3f c0       	rjmp	.+126    	; 0x1ae0 <HLCD_voidSendCommand+0x150>
	else if (__tmp > 65535)
    1a62:	6b a1       	ldd	r22, Y+35	; 0x23
    1a64:	7c a1       	ldd	r23, Y+36	; 0x24
    1a66:	8d a1       	ldd	r24, Y+37	; 0x25
    1a68:	9e a1       	ldd	r25, Y+38	; 0x26
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	3f ef       	ldi	r19, 0xFF	; 255
    1a6e:	4f e7       	ldi	r20, 0x7F	; 127
    1a70:	57 e4       	ldi	r21, 0x47	; 71
    1a72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a76:	18 16       	cp	r1, r24
    1a78:	4c f5       	brge	.+82     	; 0x1acc <HLCD_voidSendCommand+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a7a:	6f a1       	ldd	r22, Y+39	; 0x27
    1a7c:	78 a5       	ldd	r23, Y+40	; 0x28
    1a7e:	89 a5       	ldd	r24, Y+41	; 0x29
    1a80:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a82:	20 e0       	ldi	r18, 0x00	; 0
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	40 e2       	ldi	r20, 0x20	; 32
    1a88:	51 e4       	ldi	r21, 0x41	; 65
    1a8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a8e:	dc 01       	movw	r26, r24
    1a90:	cb 01       	movw	r24, r22
    1a92:	bc 01       	movw	r22, r24
    1a94:	cd 01       	movw	r24, r26
    1a96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a9a:	dc 01       	movw	r26, r24
    1a9c:	cb 01       	movw	r24, r22
    1a9e:	9a a3       	std	Y+34, r25	; 0x22
    1aa0:	89 a3       	std	Y+33, r24	; 0x21
    1aa2:	0f c0       	rjmp	.+30     	; 0x1ac2 <HLCD_voidSendCommand+0x132>
    1aa4:	88 ec       	ldi	r24, 0xC8	; 200
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	98 a3       	std	Y+32, r25	; 0x20
    1aaa:	8f 8f       	std	Y+31, r24	; 0x1f
    1aac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1aae:	98 a1       	ldd	r25, Y+32	; 0x20
    1ab0:	01 97       	sbiw	r24, 0x01	; 1
    1ab2:	f1 f7       	brne	.-4      	; 0x1ab0 <HLCD_voidSendCommand+0x120>
    1ab4:	98 a3       	std	Y+32, r25	; 0x20
    1ab6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab8:	89 a1       	ldd	r24, Y+33	; 0x21
    1aba:	9a a1       	ldd	r25, Y+34	; 0x22
    1abc:	01 97       	sbiw	r24, 0x01	; 1
    1abe:	9a a3       	std	Y+34, r25	; 0x22
    1ac0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ac2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ac4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ac6:	00 97       	sbiw	r24, 0x00	; 0
    1ac8:	69 f7       	brne	.-38     	; 0x1aa4 <HLCD_voidSendCommand+0x114>
    1aca:	14 c0       	rjmp	.+40     	; 0x1af4 <HLCD_voidSendCommand+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1acc:	6b a1       	ldd	r22, Y+35	; 0x23
    1ace:	7c a1       	ldd	r23, Y+36	; 0x24
    1ad0:	8d a1       	ldd	r24, Y+37	; 0x25
    1ad2:	9e a1       	ldd	r25, Y+38	; 0x26
    1ad4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad8:	dc 01       	movw	r26, r24
    1ada:	cb 01       	movw	r24, r22
    1adc:	9a a3       	std	Y+34, r25	; 0x22
    1ade:	89 a3       	std	Y+33, r24	; 0x21
    1ae0:	89 a1       	ldd	r24, Y+33	; 0x21
    1ae2:	9a a1       	ldd	r25, Y+34	; 0x22
    1ae4:	9e 8f       	std	Y+30, r25	; 0x1e
    1ae6:	8d 8f       	std	Y+29, r24	; 0x1d
    1ae8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1aea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1aec:	01 97       	sbiw	r24, 0x01	; 1
    1aee:	f1 f7       	brne	.-4      	; 0x1aec <HLCD_voidSendCommand+0x15c>
    1af0:	9e 8f       	std	Y+30, r25	; 0x1e
    1af2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_EN_PIN,DIO_u8_LOW);
    1af4:	80 e0       	ldi	r24, 0x00	; 0
    1af6:	62 e0       	ldi	r22, 0x02	; 2
    1af8:	40 e0       	ldi	r20, 0x00	; 0
    1afa:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
	
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PIN_4, GET_BIT(Copy_u8Cmd,0));
    1afe:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b00:	98 2f       	mov	r25, r24
    1b02:	91 70       	andi	r25, 0x01	; 1
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	60 e0       	ldi	r22, 0x00	; 0
    1b08:	49 2f       	mov	r20, r25
    1b0a:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PIN_5, GET_BIT(Copy_u8Cmd,1));
    1b0e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b10:	86 95       	lsr	r24
    1b12:	98 2f       	mov	r25, r24
    1b14:	91 70       	andi	r25, 0x01	; 1
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	61 e0       	ldi	r22, 0x01	; 1
    1b1a:	49 2f       	mov	r20, r25
    1b1c:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PIN_6, GET_BIT(Copy_u8Cmd,2));
    1b20:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b22:	86 95       	lsr	r24
    1b24:	86 95       	lsr	r24
    1b26:	98 2f       	mov	r25, r24
    1b28:	91 70       	andi	r25, 0x01	; 1
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	62 e0       	ldi	r22, 0x02	; 2
    1b2e:	49 2f       	mov	r20, r25
    1b30:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PIN_7, GET_BIT(Copy_u8Cmd,3));
    1b34:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b36:	86 95       	lsr	r24
    1b38:	86 95       	lsr	r24
    1b3a:	86 95       	lsr	r24
    1b3c:	98 2f       	mov	r25, r24
    1b3e:	91 70       	andi	r25, 0x01	; 1
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	64 e0       	ldi	r22, 0x04	; 4
    1b44:	49 2f       	mov	r20, r25
    1b46:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
	
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_EN_PIN,DIO_u8_HIGH); //EN
    1b4a:	80 e0       	ldi	r24, 0x00	; 0
    1b4c:	62 e0       	ldi	r22, 0x02	; 2
    1b4e:	41 e0       	ldi	r20, 0x01	; 1
    1b50:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
    1b54:	80 e0       	ldi	r24, 0x00	; 0
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	a0 e8       	ldi	r26, 0x80	; 128
    1b5a:	bf e3       	ldi	r27, 0x3F	; 63
    1b5c:	89 8f       	std	Y+25, r24	; 0x19
    1b5e:	9a 8f       	std	Y+26, r25	; 0x1a
    1b60:	ab 8f       	std	Y+27, r26	; 0x1b
    1b62:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b64:	69 8d       	ldd	r22, Y+25	; 0x19
    1b66:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b68:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b6c:	20 e0       	ldi	r18, 0x00	; 0
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	4a ef       	ldi	r20, 0xFA	; 250
    1b72:	54 e4       	ldi	r21, 0x44	; 68
    1b74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b78:	dc 01       	movw	r26, r24
    1b7a:	cb 01       	movw	r24, r22
    1b7c:	8d 8b       	std	Y+21, r24	; 0x15
    1b7e:	9e 8b       	std	Y+22, r25	; 0x16
    1b80:	af 8b       	std	Y+23, r26	; 0x17
    1b82:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b84:	6d 89       	ldd	r22, Y+21	; 0x15
    1b86:	7e 89       	ldd	r23, Y+22	; 0x16
    1b88:	8f 89       	ldd	r24, Y+23	; 0x17
    1b8a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b8c:	20 e0       	ldi	r18, 0x00	; 0
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	40 e8       	ldi	r20, 0x80	; 128
    1b92:	5f e3       	ldi	r21, 0x3F	; 63
    1b94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b98:	88 23       	and	r24, r24
    1b9a:	2c f4       	brge	.+10     	; 0x1ba6 <HLCD_voidSendCommand+0x216>
		__ticks = 1;
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	9c 8b       	std	Y+20, r25	; 0x14
    1ba2:	8b 8b       	std	Y+19, r24	; 0x13
    1ba4:	3f c0       	rjmp	.+126    	; 0x1c24 <HLCD_voidSendCommand+0x294>
	else if (__tmp > 65535)
    1ba6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ba8:	7e 89       	ldd	r23, Y+22	; 0x16
    1baa:	8f 89       	ldd	r24, Y+23	; 0x17
    1bac:	98 8d       	ldd	r25, Y+24	; 0x18
    1bae:	20 e0       	ldi	r18, 0x00	; 0
    1bb0:	3f ef       	ldi	r19, 0xFF	; 255
    1bb2:	4f e7       	ldi	r20, 0x7F	; 127
    1bb4:	57 e4       	ldi	r21, 0x47	; 71
    1bb6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bba:	18 16       	cp	r1, r24
    1bbc:	4c f5       	brge	.+82     	; 0x1c10 <HLCD_voidSendCommand+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bbe:	69 8d       	ldd	r22, Y+25	; 0x19
    1bc0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bc2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bc4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bc6:	20 e0       	ldi	r18, 0x00	; 0
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	40 e2       	ldi	r20, 0x20	; 32
    1bcc:	51 e4       	ldi	r21, 0x41	; 65
    1bce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	cb 01       	movw	r24, r22
    1bd6:	bc 01       	movw	r22, r24
    1bd8:	cd 01       	movw	r24, r26
    1bda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bde:	dc 01       	movw	r26, r24
    1be0:	cb 01       	movw	r24, r22
    1be2:	9c 8b       	std	Y+20, r25	; 0x14
    1be4:	8b 8b       	std	Y+19, r24	; 0x13
    1be6:	0f c0       	rjmp	.+30     	; 0x1c06 <HLCD_voidSendCommand+0x276>
    1be8:	88 ec       	ldi	r24, 0xC8	; 200
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	9a 8b       	std	Y+18, r25	; 0x12
    1bee:	89 8b       	std	Y+17, r24	; 0x11
    1bf0:	89 89       	ldd	r24, Y+17	; 0x11
    1bf2:	9a 89       	ldd	r25, Y+18	; 0x12
    1bf4:	01 97       	sbiw	r24, 0x01	; 1
    1bf6:	f1 f7       	brne	.-4      	; 0x1bf4 <HLCD_voidSendCommand+0x264>
    1bf8:	9a 8b       	std	Y+18, r25	; 0x12
    1bfa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bfc:	8b 89       	ldd	r24, Y+19	; 0x13
    1bfe:	9c 89       	ldd	r25, Y+20	; 0x14
    1c00:	01 97       	sbiw	r24, 0x01	; 1
    1c02:	9c 8b       	std	Y+20, r25	; 0x14
    1c04:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c06:	8b 89       	ldd	r24, Y+19	; 0x13
    1c08:	9c 89       	ldd	r25, Y+20	; 0x14
    1c0a:	00 97       	sbiw	r24, 0x00	; 0
    1c0c:	69 f7       	brne	.-38     	; 0x1be8 <HLCD_voidSendCommand+0x258>
    1c0e:	14 c0       	rjmp	.+40     	; 0x1c38 <HLCD_voidSendCommand+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c10:	6d 89       	ldd	r22, Y+21	; 0x15
    1c12:	7e 89       	ldd	r23, Y+22	; 0x16
    1c14:	8f 89       	ldd	r24, Y+23	; 0x17
    1c16:	98 8d       	ldd	r25, Y+24	; 0x18
    1c18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c1c:	dc 01       	movw	r26, r24
    1c1e:	cb 01       	movw	r24, r22
    1c20:	9c 8b       	std	Y+20, r25	; 0x14
    1c22:	8b 8b       	std	Y+19, r24	; 0x13
    1c24:	8b 89       	ldd	r24, Y+19	; 0x13
    1c26:	9c 89       	ldd	r25, Y+20	; 0x14
    1c28:	98 8b       	std	Y+16, r25	; 0x10
    1c2a:	8f 87       	std	Y+15, r24	; 0x0f
    1c2c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c2e:	98 89       	ldd	r25, Y+16	; 0x10
    1c30:	01 97       	sbiw	r24, 0x01	; 1
    1c32:	f1 f7       	brne	.-4      	; 0x1c30 <HLCD_voidSendCommand+0x2a0>
    1c34:	98 8b       	std	Y+16, r25	; 0x10
    1c36:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_EN_PIN,DIO_u8_LOW);
    1c38:	80 e0       	ldi	r24, 0x00	; 0
    1c3a:	62 e0       	ldi	r22, 0x02	; 2
    1c3c:	40 e0       	ldi	r20, 0x00	; 0
    1c3e:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
    1c42:	80 e0       	ldi	r24, 0x00	; 0
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	a0 ea       	ldi	r26, 0xA0	; 160
    1c48:	b0 e4       	ldi	r27, 0x40	; 64
    1c4a:	8b 87       	std	Y+11, r24	; 0x0b
    1c4c:	9c 87       	std	Y+12, r25	; 0x0c
    1c4e:	ad 87       	std	Y+13, r26	; 0x0d
    1c50:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c52:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c54:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c56:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c58:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c5a:	20 e0       	ldi	r18, 0x00	; 0
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	4a ef       	ldi	r20, 0xFA	; 250
    1c60:	54 e4       	ldi	r21, 0x44	; 68
    1c62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c66:	dc 01       	movw	r26, r24
    1c68:	cb 01       	movw	r24, r22
    1c6a:	8f 83       	std	Y+7, r24	; 0x07
    1c6c:	98 87       	std	Y+8, r25	; 0x08
    1c6e:	a9 87       	std	Y+9, r26	; 0x09
    1c70:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c72:	6f 81       	ldd	r22, Y+7	; 0x07
    1c74:	78 85       	ldd	r23, Y+8	; 0x08
    1c76:	89 85       	ldd	r24, Y+9	; 0x09
    1c78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c7a:	20 e0       	ldi	r18, 0x00	; 0
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	40 e8       	ldi	r20, 0x80	; 128
    1c80:	5f e3       	ldi	r21, 0x3F	; 63
    1c82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c86:	88 23       	and	r24, r24
    1c88:	2c f4       	brge	.+10     	; 0x1c94 <HLCD_voidSendCommand+0x304>
		__ticks = 1;
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	9e 83       	std	Y+6, r25	; 0x06
    1c90:	8d 83       	std	Y+5, r24	; 0x05
    1c92:	3f c0       	rjmp	.+126    	; 0x1d12 <HLCD_voidSendCommand+0x382>
	else if (__tmp > 65535)
    1c94:	6f 81       	ldd	r22, Y+7	; 0x07
    1c96:	78 85       	ldd	r23, Y+8	; 0x08
    1c98:	89 85       	ldd	r24, Y+9	; 0x09
    1c9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	3f ef       	ldi	r19, 0xFF	; 255
    1ca0:	4f e7       	ldi	r20, 0x7F	; 127
    1ca2:	57 e4       	ldi	r21, 0x47	; 71
    1ca4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ca8:	18 16       	cp	r1, r24
    1caa:	4c f5       	brge	.+82     	; 0x1cfe <HLCD_voidSendCommand+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cac:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cae:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cb4:	20 e0       	ldi	r18, 0x00	; 0
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	40 e2       	ldi	r20, 0x20	; 32
    1cba:	51 e4       	ldi	r21, 0x41	; 65
    1cbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc0:	dc 01       	movw	r26, r24
    1cc2:	cb 01       	movw	r24, r22
    1cc4:	bc 01       	movw	r22, r24
    1cc6:	cd 01       	movw	r24, r26
    1cc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ccc:	dc 01       	movw	r26, r24
    1cce:	cb 01       	movw	r24, r22
    1cd0:	9e 83       	std	Y+6, r25	; 0x06
    1cd2:	8d 83       	std	Y+5, r24	; 0x05
    1cd4:	0f c0       	rjmp	.+30     	; 0x1cf4 <HLCD_voidSendCommand+0x364>
    1cd6:	88 ec       	ldi	r24, 0xC8	; 200
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	9c 83       	std	Y+4, r25	; 0x04
    1cdc:	8b 83       	std	Y+3, r24	; 0x03
    1cde:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce2:	01 97       	sbiw	r24, 0x01	; 1
    1ce4:	f1 f7       	brne	.-4      	; 0x1ce2 <HLCD_voidSendCommand+0x352>
    1ce6:	9c 83       	std	Y+4, r25	; 0x04
    1ce8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cea:	8d 81       	ldd	r24, Y+5	; 0x05
    1cec:	9e 81       	ldd	r25, Y+6	; 0x06
    1cee:	01 97       	sbiw	r24, 0x01	; 1
    1cf0:	9e 83       	std	Y+6, r25	; 0x06
    1cf2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cf4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf6:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf8:	00 97       	sbiw	r24, 0x00	; 0
    1cfa:	69 f7       	brne	.-38     	; 0x1cd6 <HLCD_voidSendCommand+0x346>
    1cfc:	14 c0       	rjmp	.+40     	; 0x1d26 <HLCD_voidSendCommand+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cfe:	6f 81       	ldd	r22, Y+7	; 0x07
    1d00:	78 85       	ldd	r23, Y+8	; 0x08
    1d02:	89 85       	ldd	r24, Y+9	; 0x09
    1d04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d0a:	dc 01       	movw	r26, r24
    1d0c:	cb 01       	movw	r24, r22
    1d0e:	9e 83       	std	Y+6, r25	; 0x06
    1d10:	8d 83       	std	Y+5, r24	; 0x05
    1d12:	8d 81       	ldd	r24, Y+5	; 0x05
    1d14:	9e 81       	ldd	r25, Y+6	; 0x06
    1d16:	9a 83       	std	Y+2, r25	; 0x02
    1d18:	89 83       	std	Y+1, r24	; 0x01
    1d1a:	89 81       	ldd	r24, Y+1	; 0x01
    1d1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d1e:	01 97       	sbiw	r24, 0x01	; 1
    1d20:	f1 f7       	brne	.-4      	; 0x1d1e <HLCD_voidSendCommand+0x38e>
    1d22:	9a 83       	std	Y+2, r25	; 0x02
    1d24:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	#endif
}
    1d26:	ab 96       	adiw	r28, 0x2b	; 43
    1d28:	0f b6       	in	r0, 0x3f	; 63
    1d2a:	f8 94       	cli
    1d2c:	de bf       	out	0x3e, r29	; 62
    1d2e:	0f be       	out	0x3f, r0	; 63
    1d30:	cd bf       	out	0x3d, r28	; 61
    1d32:	cf 91       	pop	r28
    1d34:	df 91       	pop	r29
    1d36:	08 95       	ret

00001d38 <HLCD_voidSendData>:

void HLCD_voidSendData(u8 Copy_u8Data)
{
    1d38:	df 93       	push	r29
    1d3a:	cf 93       	push	r28
    1d3c:	cd b7       	in	r28, 0x3d	; 61
    1d3e:	de b7       	in	r29, 0x3e	; 62
    1d40:	ab 97       	sbiw	r28, 0x2b	; 43
    1d42:	0f b6       	in	r0, 0x3f	; 63
    1d44:	f8 94       	cli
    1d46:	de bf       	out	0x3e, r29	; 62
    1d48:	0f be       	out	0x3f, r0	; 63
    1d4a:	cd bf       	out	0x3d, r28	; 61
    1d4c:	8b a7       	std	Y+43, r24	; 0x2b
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_EN_PIN,DIO_u8_LOW);
	_delay_ms(5);
	
	#elif (LCD_MODE == _4_BIT_MODE)
	//to select command register
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_u8_HIGH);
    1d4e:	80 e0       	ldi	r24, 0x00	; 0
    1d50:	63 e0       	ldi	r22, 0x03	; 3
    1d52:	41 e0       	ldi	r20, 0x01	; 1
    1d54:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PIN_4, GET_BIT(Copy_u8Data,4));
    1d58:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d5a:	82 95       	swap	r24
    1d5c:	8f 70       	andi	r24, 0x0F	; 15
    1d5e:	98 2f       	mov	r25, r24
    1d60:	91 70       	andi	r25, 0x01	; 1
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	60 e0       	ldi	r22, 0x00	; 0
    1d66:	49 2f       	mov	r20, r25
    1d68:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PIN_5, GET_BIT(Copy_u8Data,5));
    1d6c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d6e:	82 95       	swap	r24
    1d70:	86 95       	lsr	r24
    1d72:	87 70       	andi	r24, 0x07	; 7
    1d74:	98 2f       	mov	r25, r24
    1d76:	91 70       	andi	r25, 0x01	; 1
    1d78:	81 e0       	ldi	r24, 0x01	; 1
    1d7a:	61 e0       	ldi	r22, 0x01	; 1
    1d7c:	49 2f       	mov	r20, r25
    1d7e:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PIN_6, GET_BIT(Copy_u8Data,6));
    1d82:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d84:	82 95       	swap	r24
    1d86:	86 95       	lsr	r24
    1d88:	86 95       	lsr	r24
    1d8a:	83 70       	andi	r24, 0x03	; 3
    1d8c:	98 2f       	mov	r25, r24
    1d8e:	91 70       	andi	r25, 0x01	; 1
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	62 e0       	ldi	r22, 0x02	; 2
    1d94:	49 2f       	mov	r20, r25
    1d96:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PIN_7, GET_BIT(Copy_u8Data,7));
    1d9a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d9c:	98 2f       	mov	r25, r24
    1d9e:	99 1f       	adc	r25, r25
    1da0:	99 27       	eor	r25, r25
    1da2:	99 1f       	adc	r25, r25
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	64 e0       	ldi	r22, 0x04	; 4
    1da8:	49 2f       	mov	r20, r25
    1daa:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>

	MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_EN_PIN,DIO_u8_HIGH); //EN
    1dae:	80 e0       	ldi	r24, 0x00	; 0
    1db0:	62 e0       	ldi	r22, 0x02	; 2
    1db2:	41 e0       	ldi	r20, 0x01	; 1
    1db4:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
    1db8:	80 e0       	ldi	r24, 0x00	; 0
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	a0 e8       	ldi	r26, 0x80	; 128
    1dbe:	bf e3       	ldi	r27, 0x3F	; 63
    1dc0:	8f a3       	std	Y+39, r24	; 0x27
    1dc2:	98 a7       	std	Y+40, r25	; 0x28
    1dc4:	a9 a7       	std	Y+41, r26	; 0x29
    1dc6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dc8:	6f a1       	ldd	r22, Y+39	; 0x27
    1dca:	78 a5       	ldd	r23, Y+40	; 0x28
    1dcc:	89 a5       	ldd	r24, Y+41	; 0x29
    1dce:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dd0:	20 e0       	ldi	r18, 0x00	; 0
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	4a ef       	ldi	r20, 0xFA	; 250
    1dd6:	54 e4       	ldi	r21, 0x44	; 68
    1dd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ddc:	dc 01       	movw	r26, r24
    1dde:	cb 01       	movw	r24, r22
    1de0:	8b a3       	std	Y+35, r24	; 0x23
    1de2:	9c a3       	std	Y+36, r25	; 0x24
    1de4:	ad a3       	std	Y+37, r26	; 0x25
    1de6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1de8:	6b a1       	ldd	r22, Y+35	; 0x23
    1dea:	7c a1       	ldd	r23, Y+36	; 0x24
    1dec:	8d a1       	ldd	r24, Y+37	; 0x25
    1dee:	9e a1       	ldd	r25, Y+38	; 0x26
    1df0:	20 e0       	ldi	r18, 0x00	; 0
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	40 e8       	ldi	r20, 0x80	; 128
    1df6:	5f e3       	ldi	r21, 0x3F	; 63
    1df8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dfc:	88 23       	and	r24, r24
    1dfe:	2c f4       	brge	.+10     	; 0x1e0a <HLCD_voidSendData+0xd2>
		__ticks = 1;
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	9a a3       	std	Y+34, r25	; 0x22
    1e06:	89 a3       	std	Y+33, r24	; 0x21
    1e08:	3f c0       	rjmp	.+126    	; 0x1e88 <HLCD_voidSendData+0x150>
	else if (__tmp > 65535)
    1e0a:	6b a1       	ldd	r22, Y+35	; 0x23
    1e0c:	7c a1       	ldd	r23, Y+36	; 0x24
    1e0e:	8d a1       	ldd	r24, Y+37	; 0x25
    1e10:	9e a1       	ldd	r25, Y+38	; 0x26
    1e12:	20 e0       	ldi	r18, 0x00	; 0
    1e14:	3f ef       	ldi	r19, 0xFF	; 255
    1e16:	4f e7       	ldi	r20, 0x7F	; 127
    1e18:	57 e4       	ldi	r21, 0x47	; 71
    1e1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e1e:	18 16       	cp	r1, r24
    1e20:	4c f5       	brge	.+82     	; 0x1e74 <HLCD_voidSendData+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e22:	6f a1       	ldd	r22, Y+39	; 0x27
    1e24:	78 a5       	ldd	r23, Y+40	; 0x28
    1e26:	89 a5       	ldd	r24, Y+41	; 0x29
    1e28:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e2a:	20 e0       	ldi	r18, 0x00	; 0
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	40 e2       	ldi	r20, 0x20	; 32
    1e30:	51 e4       	ldi	r21, 0x41	; 65
    1e32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e36:	dc 01       	movw	r26, r24
    1e38:	cb 01       	movw	r24, r22
    1e3a:	bc 01       	movw	r22, r24
    1e3c:	cd 01       	movw	r24, r26
    1e3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e42:	dc 01       	movw	r26, r24
    1e44:	cb 01       	movw	r24, r22
    1e46:	9a a3       	std	Y+34, r25	; 0x22
    1e48:	89 a3       	std	Y+33, r24	; 0x21
    1e4a:	0f c0       	rjmp	.+30     	; 0x1e6a <HLCD_voidSendData+0x132>
    1e4c:	88 ec       	ldi	r24, 0xC8	; 200
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	98 a3       	std	Y+32, r25	; 0x20
    1e52:	8f 8f       	std	Y+31, r24	; 0x1f
    1e54:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e56:	98 a1       	ldd	r25, Y+32	; 0x20
    1e58:	01 97       	sbiw	r24, 0x01	; 1
    1e5a:	f1 f7       	brne	.-4      	; 0x1e58 <HLCD_voidSendData+0x120>
    1e5c:	98 a3       	std	Y+32, r25	; 0x20
    1e5e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e60:	89 a1       	ldd	r24, Y+33	; 0x21
    1e62:	9a a1       	ldd	r25, Y+34	; 0x22
    1e64:	01 97       	sbiw	r24, 0x01	; 1
    1e66:	9a a3       	std	Y+34, r25	; 0x22
    1e68:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e6a:	89 a1       	ldd	r24, Y+33	; 0x21
    1e6c:	9a a1       	ldd	r25, Y+34	; 0x22
    1e6e:	00 97       	sbiw	r24, 0x00	; 0
    1e70:	69 f7       	brne	.-38     	; 0x1e4c <HLCD_voidSendData+0x114>
    1e72:	14 c0       	rjmp	.+40     	; 0x1e9c <HLCD_voidSendData+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e74:	6b a1       	ldd	r22, Y+35	; 0x23
    1e76:	7c a1       	ldd	r23, Y+36	; 0x24
    1e78:	8d a1       	ldd	r24, Y+37	; 0x25
    1e7a:	9e a1       	ldd	r25, Y+38	; 0x26
    1e7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e80:	dc 01       	movw	r26, r24
    1e82:	cb 01       	movw	r24, r22
    1e84:	9a a3       	std	Y+34, r25	; 0x22
    1e86:	89 a3       	std	Y+33, r24	; 0x21
    1e88:	89 a1       	ldd	r24, Y+33	; 0x21
    1e8a:	9a a1       	ldd	r25, Y+34	; 0x22
    1e8c:	9e 8f       	std	Y+30, r25	; 0x1e
    1e8e:	8d 8f       	std	Y+29, r24	; 0x1d
    1e90:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e92:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e94:	01 97       	sbiw	r24, 0x01	; 1
    1e96:	f1 f7       	brne	.-4      	; 0x1e94 <HLCD_voidSendData+0x15c>
    1e98:	9e 8f       	std	Y+30, r25	; 0x1e
    1e9a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_EN_PIN,DIO_u8_LOW);
    1e9c:	80 e0       	ldi	r24, 0x00	; 0
    1e9e:	62 e0       	ldi	r22, 0x02	; 2
    1ea0:	40 e0       	ldi	r20, 0x00	; 0
    1ea2:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
	
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PIN_4, GET_BIT(Copy_u8Data,0));
    1ea6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ea8:	98 2f       	mov	r25, r24
    1eaa:	91 70       	andi	r25, 0x01	; 1
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	60 e0       	ldi	r22, 0x00	; 0
    1eb0:	49 2f       	mov	r20, r25
    1eb2:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PIN_5, GET_BIT(Copy_u8Data,1));
    1eb6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1eb8:	86 95       	lsr	r24
    1eba:	98 2f       	mov	r25, r24
    1ebc:	91 70       	andi	r25, 0x01	; 1
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	61 e0       	ldi	r22, 0x01	; 1
    1ec2:	49 2f       	mov	r20, r25
    1ec4:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PIN_6, GET_BIT(Copy_u8Data,2));
    1ec8:	8b a5       	ldd	r24, Y+43	; 0x2b
    1eca:	86 95       	lsr	r24
    1ecc:	86 95       	lsr	r24
    1ece:	98 2f       	mov	r25, r24
    1ed0:	91 70       	andi	r25, 0x01	; 1
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	62 e0       	ldi	r22, 0x02	; 2
    1ed6:	49 2f       	mov	r20, r25
    1ed8:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PIN_7, GET_BIT(Copy_u8Data,3));
    1edc:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ede:	86 95       	lsr	r24
    1ee0:	86 95       	lsr	r24
    1ee2:	86 95       	lsr	r24
    1ee4:	98 2f       	mov	r25, r24
    1ee6:	91 70       	andi	r25, 0x01	; 1
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	64 e0       	ldi	r22, 0x04	; 4
    1eec:	49 2f       	mov	r20, r25
    1eee:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
	
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_EN_PIN,DIO_u8_HIGH); //EN
    1ef2:	80 e0       	ldi	r24, 0x00	; 0
    1ef4:	62 e0       	ldi	r22, 0x02	; 2
    1ef6:	41 e0       	ldi	r20, 0x01	; 1
    1ef8:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
    1efc:	80 e0       	ldi	r24, 0x00	; 0
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	a0 e8       	ldi	r26, 0x80	; 128
    1f02:	bf e3       	ldi	r27, 0x3F	; 63
    1f04:	89 8f       	std	Y+25, r24	; 0x19
    1f06:	9a 8f       	std	Y+26, r25	; 0x1a
    1f08:	ab 8f       	std	Y+27, r26	; 0x1b
    1f0a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f0c:	69 8d       	ldd	r22, Y+25	; 0x19
    1f0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f10:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f12:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f14:	20 e0       	ldi	r18, 0x00	; 0
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	4a ef       	ldi	r20, 0xFA	; 250
    1f1a:	54 e4       	ldi	r21, 0x44	; 68
    1f1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f20:	dc 01       	movw	r26, r24
    1f22:	cb 01       	movw	r24, r22
    1f24:	8d 8b       	std	Y+21, r24	; 0x15
    1f26:	9e 8b       	std	Y+22, r25	; 0x16
    1f28:	af 8b       	std	Y+23, r26	; 0x17
    1f2a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f2c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f2e:	7e 89       	ldd	r23, Y+22	; 0x16
    1f30:	8f 89       	ldd	r24, Y+23	; 0x17
    1f32:	98 8d       	ldd	r25, Y+24	; 0x18
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	40 e8       	ldi	r20, 0x80	; 128
    1f3a:	5f e3       	ldi	r21, 0x3F	; 63
    1f3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f40:	88 23       	and	r24, r24
    1f42:	2c f4       	brge	.+10     	; 0x1f4e <HLCD_voidSendData+0x216>
		__ticks = 1;
    1f44:	81 e0       	ldi	r24, 0x01	; 1
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	9c 8b       	std	Y+20, r25	; 0x14
    1f4a:	8b 8b       	std	Y+19, r24	; 0x13
    1f4c:	3f c0       	rjmp	.+126    	; 0x1fcc <HLCD_voidSendData+0x294>
	else if (__tmp > 65535)
    1f4e:	6d 89       	ldd	r22, Y+21	; 0x15
    1f50:	7e 89       	ldd	r23, Y+22	; 0x16
    1f52:	8f 89       	ldd	r24, Y+23	; 0x17
    1f54:	98 8d       	ldd	r25, Y+24	; 0x18
    1f56:	20 e0       	ldi	r18, 0x00	; 0
    1f58:	3f ef       	ldi	r19, 0xFF	; 255
    1f5a:	4f e7       	ldi	r20, 0x7F	; 127
    1f5c:	57 e4       	ldi	r21, 0x47	; 71
    1f5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f62:	18 16       	cp	r1, r24
    1f64:	4c f5       	brge	.+82     	; 0x1fb8 <HLCD_voidSendData+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f66:	69 8d       	ldd	r22, Y+25	; 0x19
    1f68:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f6e:	20 e0       	ldi	r18, 0x00	; 0
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	40 e2       	ldi	r20, 0x20	; 32
    1f74:	51 e4       	ldi	r21, 0x41	; 65
    1f76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f7a:	dc 01       	movw	r26, r24
    1f7c:	cb 01       	movw	r24, r22
    1f7e:	bc 01       	movw	r22, r24
    1f80:	cd 01       	movw	r24, r26
    1f82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f86:	dc 01       	movw	r26, r24
    1f88:	cb 01       	movw	r24, r22
    1f8a:	9c 8b       	std	Y+20, r25	; 0x14
    1f8c:	8b 8b       	std	Y+19, r24	; 0x13
    1f8e:	0f c0       	rjmp	.+30     	; 0x1fae <HLCD_voidSendData+0x276>
    1f90:	88 ec       	ldi	r24, 0xC8	; 200
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	9a 8b       	std	Y+18, r25	; 0x12
    1f96:	89 8b       	std	Y+17, r24	; 0x11
    1f98:	89 89       	ldd	r24, Y+17	; 0x11
    1f9a:	9a 89       	ldd	r25, Y+18	; 0x12
    1f9c:	01 97       	sbiw	r24, 0x01	; 1
    1f9e:	f1 f7       	brne	.-4      	; 0x1f9c <HLCD_voidSendData+0x264>
    1fa0:	9a 8b       	std	Y+18, r25	; 0x12
    1fa2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa4:	8b 89       	ldd	r24, Y+19	; 0x13
    1fa6:	9c 89       	ldd	r25, Y+20	; 0x14
    1fa8:	01 97       	sbiw	r24, 0x01	; 1
    1faa:	9c 8b       	std	Y+20, r25	; 0x14
    1fac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fae:	8b 89       	ldd	r24, Y+19	; 0x13
    1fb0:	9c 89       	ldd	r25, Y+20	; 0x14
    1fb2:	00 97       	sbiw	r24, 0x00	; 0
    1fb4:	69 f7       	brne	.-38     	; 0x1f90 <HLCD_voidSendData+0x258>
    1fb6:	14 c0       	rjmp	.+40     	; 0x1fe0 <HLCD_voidSendData+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fb8:	6d 89       	ldd	r22, Y+21	; 0x15
    1fba:	7e 89       	ldd	r23, Y+22	; 0x16
    1fbc:	8f 89       	ldd	r24, Y+23	; 0x17
    1fbe:	98 8d       	ldd	r25, Y+24	; 0x18
    1fc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc4:	dc 01       	movw	r26, r24
    1fc6:	cb 01       	movw	r24, r22
    1fc8:	9c 8b       	std	Y+20, r25	; 0x14
    1fca:	8b 8b       	std	Y+19, r24	; 0x13
    1fcc:	8b 89       	ldd	r24, Y+19	; 0x13
    1fce:	9c 89       	ldd	r25, Y+20	; 0x14
    1fd0:	98 8b       	std	Y+16, r25	; 0x10
    1fd2:	8f 87       	std	Y+15, r24	; 0x0f
    1fd4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fd6:	98 89       	ldd	r25, Y+16	; 0x10
    1fd8:	01 97       	sbiw	r24, 0x01	; 1
    1fda:	f1 f7       	brne	.-4      	; 0x1fd8 <HLCD_voidSendData+0x2a0>
    1fdc:	98 8b       	std	Y+16, r25	; 0x10
    1fde:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_EN_PIN,DIO_u8_LOW);
    1fe0:	80 e0       	ldi	r24, 0x00	; 0
    1fe2:	62 e0       	ldi	r22, 0x02	; 2
    1fe4:	40 e0       	ldi	r20, 0x00	; 0
    1fe6:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
    1fea:	80 e0       	ldi	r24, 0x00	; 0
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	a0 ea       	ldi	r26, 0xA0	; 160
    1ff0:	b0 e4       	ldi	r27, 0x40	; 64
    1ff2:	8b 87       	std	Y+11, r24	; 0x0b
    1ff4:	9c 87       	std	Y+12, r25	; 0x0c
    1ff6:	ad 87       	std	Y+13, r26	; 0x0d
    1ff8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ffa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ffc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ffe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2000:	9e 85       	ldd	r25, Y+14	; 0x0e
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	4a ef       	ldi	r20, 0xFA	; 250
    2008:	54 e4       	ldi	r21, 0x44	; 68
    200a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    200e:	dc 01       	movw	r26, r24
    2010:	cb 01       	movw	r24, r22
    2012:	8f 83       	std	Y+7, r24	; 0x07
    2014:	98 87       	std	Y+8, r25	; 0x08
    2016:	a9 87       	std	Y+9, r26	; 0x09
    2018:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    201a:	6f 81       	ldd	r22, Y+7	; 0x07
    201c:	78 85       	ldd	r23, Y+8	; 0x08
    201e:	89 85       	ldd	r24, Y+9	; 0x09
    2020:	9a 85       	ldd	r25, Y+10	; 0x0a
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	40 e8       	ldi	r20, 0x80	; 128
    2028:	5f e3       	ldi	r21, 0x3F	; 63
    202a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    202e:	88 23       	and	r24, r24
    2030:	2c f4       	brge	.+10     	; 0x203c <HLCD_voidSendData+0x304>
		__ticks = 1;
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	9e 83       	std	Y+6, r25	; 0x06
    2038:	8d 83       	std	Y+5, r24	; 0x05
    203a:	3f c0       	rjmp	.+126    	; 0x20ba <HLCD_voidSendData+0x382>
	else if (__tmp > 65535)
    203c:	6f 81       	ldd	r22, Y+7	; 0x07
    203e:	78 85       	ldd	r23, Y+8	; 0x08
    2040:	89 85       	ldd	r24, Y+9	; 0x09
    2042:	9a 85       	ldd	r25, Y+10	; 0x0a
    2044:	20 e0       	ldi	r18, 0x00	; 0
    2046:	3f ef       	ldi	r19, 0xFF	; 255
    2048:	4f e7       	ldi	r20, 0x7F	; 127
    204a:	57 e4       	ldi	r21, 0x47	; 71
    204c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2050:	18 16       	cp	r1, r24
    2052:	4c f5       	brge	.+82     	; 0x20a6 <HLCD_voidSendData+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2054:	6b 85       	ldd	r22, Y+11	; 0x0b
    2056:	7c 85       	ldd	r23, Y+12	; 0x0c
    2058:	8d 85       	ldd	r24, Y+13	; 0x0d
    205a:	9e 85       	ldd	r25, Y+14	; 0x0e
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	40 e2       	ldi	r20, 0x20	; 32
    2062:	51 e4       	ldi	r21, 0x41	; 65
    2064:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2068:	dc 01       	movw	r26, r24
    206a:	cb 01       	movw	r24, r22
    206c:	bc 01       	movw	r22, r24
    206e:	cd 01       	movw	r24, r26
    2070:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2074:	dc 01       	movw	r26, r24
    2076:	cb 01       	movw	r24, r22
    2078:	9e 83       	std	Y+6, r25	; 0x06
    207a:	8d 83       	std	Y+5, r24	; 0x05
    207c:	0f c0       	rjmp	.+30     	; 0x209c <HLCD_voidSendData+0x364>
    207e:	88 ec       	ldi	r24, 0xC8	; 200
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	9c 83       	std	Y+4, r25	; 0x04
    2084:	8b 83       	std	Y+3, r24	; 0x03
    2086:	8b 81       	ldd	r24, Y+3	; 0x03
    2088:	9c 81       	ldd	r25, Y+4	; 0x04
    208a:	01 97       	sbiw	r24, 0x01	; 1
    208c:	f1 f7       	brne	.-4      	; 0x208a <HLCD_voidSendData+0x352>
    208e:	9c 83       	std	Y+4, r25	; 0x04
    2090:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2092:	8d 81       	ldd	r24, Y+5	; 0x05
    2094:	9e 81       	ldd	r25, Y+6	; 0x06
    2096:	01 97       	sbiw	r24, 0x01	; 1
    2098:	9e 83       	std	Y+6, r25	; 0x06
    209a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    209c:	8d 81       	ldd	r24, Y+5	; 0x05
    209e:	9e 81       	ldd	r25, Y+6	; 0x06
    20a0:	00 97       	sbiw	r24, 0x00	; 0
    20a2:	69 f7       	brne	.-38     	; 0x207e <HLCD_voidSendData+0x346>
    20a4:	14 c0       	rjmp	.+40     	; 0x20ce <HLCD_voidSendData+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20a6:	6f 81       	ldd	r22, Y+7	; 0x07
    20a8:	78 85       	ldd	r23, Y+8	; 0x08
    20aa:	89 85       	ldd	r24, Y+9	; 0x09
    20ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b2:	dc 01       	movw	r26, r24
    20b4:	cb 01       	movw	r24, r22
    20b6:	9e 83       	std	Y+6, r25	; 0x06
    20b8:	8d 83       	std	Y+5, r24	; 0x05
    20ba:	8d 81       	ldd	r24, Y+5	; 0x05
    20bc:	9e 81       	ldd	r25, Y+6	; 0x06
    20be:	9a 83       	std	Y+2, r25	; 0x02
    20c0:	89 83       	std	Y+1, r24	; 0x01
    20c2:	89 81       	ldd	r24, Y+1	; 0x01
    20c4:	9a 81       	ldd	r25, Y+2	; 0x02
    20c6:	01 97       	sbiw	r24, 0x01	; 1
    20c8:	f1 f7       	brne	.-4      	; 0x20c6 <HLCD_voidSendData+0x38e>
    20ca:	9a 83       	std	Y+2, r25	; 0x02
    20cc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	#endif
}
    20ce:	ab 96       	adiw	r28, 0x2b	; 43
    20d0:	0f b6       	in	r0, 0x3f	; 63
    20d2:	f8 94       	cli
    20d4:	de bf       	out	0x3e, r29	; 62
    20d6:	0f be       	out	0x3f, r0	; 63
    20d8:	cd bf       	out	0x3d, r28	; 61
    20da:	cf 91       	pop	r28
    20dc:	df 91       	pop	r29
    20de:	08 95       	ret

000020e0 <HLCD_voidClearDisplay>:

void HLCD_voidClearDisplay(void)
{
    20e0:	df 93       	push	r29
    20e2:	cf 93       	push	r28
    20e4:	cd b7       	in	r28, 0x3d	; 61
    20e6:	de b7       	in	r29, 0x3e	; 62
	HLCD_voidSendCommand(0x01);
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	0e 94 c8 0c 	call	0x1990	; 0x1990 <HLCD_voidSendCommand>
}
    20ee:	cf 91       	pop	r28
    20f0:	df 91       	pop	r29
    20f2:	08 95       	ret

000020f4 <HLCD_voidSendString>:

void HLCD_voidSendString(const u8 *Ptr_u8PtrString)
{
    20f4:	df 93       	push	r29
    20f6:	cf 93       	push	r28
    20f8:	00 d0       	rcall	.+0      	; 0x20fa <HLCD_voidSendString+0x6>
    20fa:	cd b7       	in	r28, 0x3d	; 61
    20fc:	de b7       	in	r29, 0x3e	; 62
    20fe:	9a 83       	std	Y+2, r25	; 0x02
    2100:	89 83       	std	Y+1, r24	; 0x01
    2102:	0a c0       	rjmp	.+20     	; 0x2118 <HLCD_voidSendString+0x24>
	while(*Ptr_u8PtrString != 0)
	{
		HLCD_voidSendData(*Ptr_u8PtrString);
    2104:	e9 81       	ldd	r30, Y+1	; 0x01
    2106:	fa 81       	ldd	r31, Y+2	; 0x02
    2108:	80 81       	ld	r24, Z
    210a:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <HLCD_voidSendData>
		Ptr_u8PtrString++;
    210e:	89 81       	ldd	r24, Y+1	; 0x01
    2110:	9a 81       	ldd	r25, Y+2	; 0x02
    2112:	01 96       	adiw	r24, 0x01	; 1
    2114:	9a 83       	std	Y+2, r25	; 0x02
    2116:	89 83       	std	Y+1, r24	; 0x01
	HLCD_voidSendCommand(0x01);
}

void HLCD_voidSendString(const u8 *Ptr_u8PtrString)
{
	while(*Ptr_u8PtrString != 0)
    2118:	e9 81       	ldd	r30, Y+1	; 0x01
    211a:	fa 81       	ldd	r31, Y+2	; 0x02
    211c:	80 81       	ld	r24, Z
    211e:	88 23       	and	r24, r24
    2120:	89 f7       	brne	.-30     	; 0x2104 <HLCD_voidSendString+0x10>
	{
		HLCD_voidSendData(*Ptr_u8PtrString);
		Ptr_u8PtrString++;
	}
}
    2122:	0f 90       	pop	r0
    2124:	0f 90       	pop	r0
    2126:	cf 91       	pop	r28
    2128:	df 91       	pop	r29
    212a:	08 95       	ret

0000212c <HLCD_voidGoToPosition>:

void HLCD_voidGoToPosition(u8 Copy_u8RowNum,u8 Copy_u8ColNum)
{
    212c:	df 93       	push	r29
    212e:	cf 93       	push	r28
    2130:	00 d0       	rcall	.+0      	; 0x2132 <HLCD_voidGoToPosition+0x6>
    2132:	00 d0       	rcall	.+0      	; 0x2134 <HLCD_voidGoToPosition+0x8>
    2134:	00 d0       	rcall	.+0      	; 0x2136 <HLCD_voidGoToPosition+0xa>
    2136:	cd b7       	in	r28, 0x3d	; 61
    2138:	de b7       	in	r29, 0x3e	; 62
    213a:	8d 83       	std	Y+5, r24	; 0x05
    213c:	6e 83       	std	Y+6, r22	; 0x06
	u8 arr[4] ={0x80,0xC0,0x94,0xD4};
    213e:	80 e8       	ldi	r24, 0x80	; 128
    2140:	89 83       	std	Y+1, r24	; 0x01
    2142:	80 ec       	ldi	r24, 0xC0	; 192
    2144:	8a 83       	std	Y+2, r24	; 0x02
    2146:	84 e9       	ldi	r24, 0x94	; 148
    2148:	8b 83       	std	Y+3, r24	; 0x03
    214a:	84 ed       	ldi	r24, 0xD4	; 212
    214c:	8c 83       	std	Y+4, r24	; 0x04
	HLCD_voidSendCommand(arr[Copy_u8RowNum] + Copy_u8ColNum);
    214e:	8d 81       	ldd	r24, Y+5	; 0x05
    2150:	28 2f       	mov	r18, r24
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	ce 01       	movw	r24, r28
    2156:	01 96       	adiw	r24, 0x01	; 1
    2158:	fc 01       	movw	r30, r24
    215a:	e2 0f       	add	r30, r18
    215c:	f3 1f       	adc	r31, r19
    215e:	90 81       	ld	r25, Z
    2160:	8e 81       	ldd	r24, Y+6	; 0x06
    2162:	89 0f       	add	r24, r25
    2164:	0e 94 c8 0c 	call	0x1990	; 0x1990 <HLCD_voidSendCommand>
}
    2168:	26 96       	adiw	r28, 0x06	; 6
    216a:	0f b6       	in	r0, 0x3f	; 63
    216c:	f8 94       	cli
    216e:	de bf       	out	0x3e, r29	; 62
    2170:	0f be       	out	0x3f, r0	; 63
    2172:	cd bf       	out	0x3d, r28	; 61
    2174:	cf 91       	pop	r28
    2176:	df 91       	pop	r29
    2178:	08 95       	ret

0000217a <HLCD_voidDisplayNumber>:

void HLCD_voidDisplayNumber(s32 Copy_s32Number)
{
    217a:	df 93       	push	r29
    217c:	cf 93       	push	r28
    217e:	cd b7       	in	r28, 0x3d	; 61
    2180:	de b7       	in	r29, 0x3e	; 62
    2182:	60 97       	sbiw	r28, 0x10	; 16
    2184:	0f b6       	in	r0, 0x3f	; 63
    2186:	f8 94       	cli
    2188:	de bf       	out	0x3e, r29	; 62
    218a:	0f be       	out	0x3f, r0	; 63
    218c:	cd bf       	out	0x3d, r28	; 61
    218e:	6d 87       	std	Y+13, r22	; 0x0d
    2190:	7e 87       	std	Y+14, r23	; 0x0e
    2192:	8f 87       	std	Y+15, r24	; 0x0f
    2194:	98 8b       	std	Y+16, r25	; 0x10
	if(Copy_s32Number == 0)
    2196:	8d 85       	ldd	r24, Y+13	; 0x0d
    2198:	9e 85       	ldd	r25, Y+14	; 0x0e
    219a:	af 85       	ldd	r26, Y+15	; 0x0f
    219c:	b8 89       	ldd	r27, Y+16	; 0x10
    219e:	00 97       	sbiw	r24, 0x00	; 0
    21a0:	a1 05       	cpc	r26, r1
    21a2:	b1 05       	cpc	r27, r1
    21a4:	21 f4       	brne	.+8      	; 0x21ae <HLCD_voidDisplayNumber+0x34>
	{
		HLCD_voidSendData('0');
    21a6:	80 e3       	ldi	r24, 0x30	; 48
    21a8:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <HLCD_voidSendData>
    21ac:	65 c0       	rjmp	.+202    	; 0x2278 <HLCD_voidDisplayNumber+0xfe>
	}
	else if(Copy_s32Number > 0  )
    21ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    21b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    21b2:	af 85       	ldd	r26, Y+15	; 0x0f
    21b4:	b8 89       	ldd	r27, Y+16	; 0x10
    21b6:	18 16       	cp	r1, r24
    21b8:	19 06       	cpc	r1, r25
    21ba:	1a 06       	cpc	r1, r26
    21bc:	1b 06       	cpc	r1, r27
    21be:	0c f0       	brlt	.+2      	; 0x21c2 <HLCD_voidDisplayNumber+0x48>
    21c0:	5b c0       	rjmp	.+182    	; 0x2278 <HLCD_voidDisplayNumber+0xfe>
	{
		s8 i=0;
    21c2:	1a 82       	std	Y+2, r1	; 0x02
	    u8 Copy_u8Remander = 0;
    21c4:	19 82       	std	Y+1, r1	; 0x01
	    u8 arr[10] = {0};
    21c6:	8a e0       	ldi	r24, 0x0A	; 10
    21c8:	fe 01       	movw	r30, r28
    21ca:	33 96       	adiw	r30, 0x03	; 3
    21cc:	df 01       	movw	r26, r30
    21ce:	98 2f       	mov	r25, r24
    21d0:	1d 92       	st	X+, r1
    21d2:	9a 95       	dec	r25
    21d4:	e9 f7       	brne	.-6      	; 0x21d0 <HLCD_voidDisplayNumber+0x56>
    21d6:	30 c0       	rjmp	.+96     	; 0x2238 <HLCD_voidDisplayNumber+0xbe>
	    while(Copy_s32Number != 0)
	    {
	    	Copy_u8Remander = Copy_s32Number % 10;
    21d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    21da:	9e 85       	ldd	r25, Y+14	; 0x0e
    21dc:	af 85       	ldd	r26, Y+15	; 0x0f
    21de:	b8 89       	ldd	r27, Y+16	; 0x10
    21e0:	2a e0       	ldi	r18, 0x0A	; 10
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	40 e0       	ldi	r20, 0x00	; 0
    21e6:	50 e0       	ldi	r21, 0x00	; 0
    21e8:	bc 01       	movw	r22, r24
    21ea:	cd 01       	movw	r24, r26
    21ec:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <__divmodsi4>
    21f0:	dc 01       	movw	r26, r24
    21f2:	cb 01       	movw	r24, r22
    21f4:	89 83       	std	Y+1, r24	; 0x01
	    	arr[i] = Copy_u8Remander;
    21f6:	8a 81       	ldd	r24, Y+2	; 0x02
    21f8:	28 2f       	mov	r18, r24
    21fa:	33 27       	eor	r19, r19
    21fc:	27 fd       	sbrc	r18, 7
    21fe:	30 95       	com	r19
    2200:	ce 01       	movw	r24, r28
    2202:	03 96       	adiw	r24, 0x03	; 3
    2204:	fc 01       	movw	r30, r24
    2206:	e2 0f       	add	r30, r18
    2208:	f3 1f       	adc	r31, r19
    220a:	89 81       	ldd	r24, Y+1	; 0x01
    220c:	80 83       	st	Z, r24
	    	i++;
    220e:	8a 81       	ldd	r24, Y+2	; 0x02
    2210:	8f 5f       	subi	r24, 0xFF	; 255
    2212:	8a 83       	std	Y+2, r24	; 0x02
	    	Copy_s32Number /= 10;
    2214:	8d 85       	ldd	r24, Y+13	; 0x0d
    2216:	9e 85       	ldd	r25, Y+14	; 0x0e
    2218:	af 85       	ldd	r26, Y+15	; 0x0f
    221a:	b8 89       	ldd	r27, Y+16	; 0x10
    221c:	2a e0       	ldi	r18, 0x0A	; 10
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	40 e0       	ldi	r20, 0x00	; 0
    2222:	50 e0       	ldi	r21, 0x00	; 0
    2224:	bc 01       	movw	r22, r24
    2226:	cd 01       	movw	r24, r26
    2228:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <__divmodsi4>
    222c:	da 01       	movw	r26, r20
    222e:	c9 01       	movw	r24, r18
    2230:	8d 87       	std	Y+13, r24	; 0x0d
    2232:	9e 87       	std	Y+14, r25	; 0x0e
    2234:	af 87       	std	Y+15, r26	; 0x0f
    2236:	b8 8b       	std	Y+16, r27	; 0x10
	else if(Copy_s32Number > 0  )
	{
		s8 i=0;
	    u8 Copy_u8Remander = 0;
	    u8 arr[10] = {0};
	    while(Copy_s32Number != 0)
    2238:	8d 85       	ldd	r24, Y+13	; 0x0d
    223a:	9e 85       	ldd	r25, Y+14	; 0x0e
    223c:	af 85       	ldd	r26, Y+15	; 0x0f
    223e:	b8 89       	ldd	r27, Y+16	; 0x10
    2240:	00 97       	sbiw	r24, 0x00	; 0
    2242:	a1 05       	cpc	r26, r1
    2244:	b1 05       	cpc	r27, r1
    2246:	41 f6       	brne	.-112    	; 0x21d8 <HLCD_voidDisplayNumber+0x5e>
	    	Copy_u8Remander = Copy_s32Number % 10;
	    	arr[i] = Copy_u8Remander;
	    	i++;
	    	Copy_s32Number /= 10;
	    }
	    i--;
    2248:	8a 81       	ldd	r24, Y+2	; 0x02
    224a:	81 50       	subi	r24, 0x01	; 1
    224c:	8a 83       	std	Y+2, r24	; 0x02
    224e:	11 c0       	rjmp	.+34     	; 0x2272 <HLCD_voidDisplayNumber+0xf8>
	    while(i >= 0)
	    {
	    	HLCD_voidSendData(arr[i] + 48);
    2250:	8a 81       	ldd	r24, Y+2	; 0x02
    2252:	28 2f       	mov	r18, r24
    2254:	33 27       	eor	r19, r19
    2256:	27 fd       	sbrc	r18, 7
    2258:	30 95       	com	r19
    225a:	ce 01       	movw	r24, r28
    225c:	03 96       	adiw	r24, 0x03	; 3
    225e:	fc 01       	movw	r30, r24
    2260:	e2 0f       	add	r30, r18
    2262:	f3 1f       	adc	r31, r19
    2264:	80 81       	ld	r24, Z
    2266:	80 5d       	subi	r24, 0xD0	; 208
    2268:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <HLCD_voidSendData>
	    	i--;	
    226c:	8a 81       	ldd	r24, Y+2	; 0x02
    226e:	81 50       	subi	r24, 0x01	; 1
    2270:	8a 83       	std	Y+2, r24	; 0x02
	    	arr[i] = Copy_u8Remander;
	    	i++;
	    	Copy_s32Number /= 10;
	    }
	    i--;
	    while(i >= 0)
    2272:	8a 81       	ldd	r24, Y+2	; 0x02
    2274:	88 23       	and	r24, r24
    2276:	64 f7       	brge	.-40     	; 0x2250 <HLCD_voidDisplayNumber+0xd6>
	    	HLCD_voidSendData(arr[i] + 48);
	    	i--;	
	    }
	    
	}
}
    2278:	60 96       	adiw	r28, 0x10	; 16
    227a:	0f b6       	in	r0, 0x3f	; 63
    227c:	f8 94       	cli
    227e:	de bf       	out	0x3e, r29	; 62
    2280:	0f be       	out	0x3f, r0	; 63
    2282:	cd bf       	out	0x3d, r28	; 61
    2284:	cf 91       	pop	r28
    2286:	df 91       	pop	r29
    2288:	08 95       	ret

0000228a <HLCD_voidDisplaySpecialChar>:


void HLCD_voidDisplaySpecialChar(u8* Ptr_u8PtrChar,u8 CGRam_index,u8 Copy_u8RowNum,u8 Copy_u8ColNum)
{
    228a:	df 93       	push	r29
    228c:	cf 93       	push	r28
    228e:	cd b7       	in	r28, 0x3d	; 61
    2290:	de b7       	in	r29, 0x3e	; 62
    2292:	27 97       	sbiw	r28, 0x07	; 7
    2294:	0f b6       	in	r0, 0x3f	; 63
    2296:	f8 94       	cli
    2298:	de bf       	out	0x3e, r29	; 62
    229a:	0f be       	out	0x3f, r0	; 63
    229c:	cd bf       	out	0x3d, r28	; 61
    229e:	9c 83       	std	Y+4, r25	; 0x04
    22a0:	8b 83       	std	Y+3, r24	; 0x03
    22a2:	6d 83       	std	Y+5, r22	; 0x05
    22a4:	4e 83       	std	Y+6, r20	; 0x06
    22a6:	2f 83       	std	Y+7, r18	; 0x07
	HLCD_voidGoToPosition( Copy_u8RowNum, Copy_u8ColNum);
    22a8:	8e 81       	ldd	r24, Y+6	; 0x06
    22aa:	6f 81       	ldd	r22, Y+7	; 0x07
    22ac:	0e 94 96 10 	call	0x212c	; 0x212c <HLCD_voidGoToPosition>
	HLCD_voidSendData(CGRam_index);
    22b0:	8d 81       	ldd	r24, Y+5	; 0x05
    22b2:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <HLCD_voidSendData>
	u8 Local_u8address;
	u8 Local_u8Index;
	if (CGRam_index < 8)
    22b6:	8d 81       	ldd	r24, Y+5	; 0x05
    22b8:	88 30       	cpi	r24, 0x08	; 8
    22ba:	18 f5       	brcc	.+70     	; 0x2302 <HLCD_voidDisplaySpecialChar+0x78>
	{
		Local_u8address= CGRam_index * 8;
    22bc:	8d 81       	ldd	r24, Y+5	; 0x05
    22be:	88 2f       	mov	r24, r24
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	88 0f       	add	r24, r24
    22c4:	99 1f       	adc	r25, r25
    22c6:	88 0f       	add	r24, r24
    22c8:	99 1f       	adc	r25, r25
    22ca:	88 0f       	add	r24, r24
    22cc:	99 1f       	adc	r25, r25
    22ce:	8a 83       	std	Y+2, r24	; 0x02
		Local_u8address=SET_BIT(Local_u8address,6);
    22d0:	8a 81       	ldd	r24, Y+2	; 0x02
    22d2:	80 64       	ori	r24, 0x40	; 64
    22d4:	8a 83       	std	Y+2, r24	; 0x02
		HLCD_voidSendCommand(Local_u8address);
    22d6:	8a 81       	ldd	r24, Y+2	; 0x02
    22d8:	0e 94 c8 0c 	call	0x1990	; 0x1990 <HLCD_voidSendCommand>
		for(Local_u8Index = 0;Local_u8Index < 8;Local_u8Index++)
    22dc:	19 82       	std	Y+1, r1	; 0x01
    22de:	0e c0       	rjmp	.+28     	; 0x22fc <HLCD_voidDisplaySpecialChar+0x72>
		{
			HLCD_voidSendData(Ptr_u8PtrChar[Local_u8Index]);
    22e0:	89 81       	ldd	r24, Y+1	; 0x01
    22e2:	28 2f       	mov	r18, r24
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	8b 81       	ldd	r24, Y+3	; 0x03
    22e8:	9c 81       	ldd	r25, Y+4	; 0x04
    22ea:	fc 01       	movw	r30, r24
    22ec:	e2 0f       	add	r30, r18
    22ee:	f3 1f       	adc	r31, r19
    22f0:	80 81       	ld	r24, Z
    22f2:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <HLCD_voidSendData>
	if (CGRam_index < 8)
	{
		Local_u8address= CGRam_index * 8;
		Local_u8address=SET_BIT(Local_u8address,6);
		HLCD_voidSendCommand(Local_u8address);
		for(Local_u8Index = 0;Local_u8Index < 8;Local_u8Index++)
    22f6:	89 81       	ldd	r24, Y+1	; 0x01
    22f8:	8f 5f       	subi	r24, 0xFF	; 255
    22fa:	89 83       	std	Y+1, r24	; 0x01
    22fc:	89 81       	ldd	r24, Y+1	; 0x01
    22fe:	88 30       	cpi	r24, 0x08	; 8
    2300:	78 f3       	brcs	.-34     	; 0x22e0 <HLCD_voidDisplaySpecialChar+0x56>
		{
			HLCD_voidSendData(Ptr_u8PtrChar[Local_u8Index]);
		}
	}
	HLCD_voidSendCommand(0x02);
    2302:	82 e0       	ldi	r24, 0x02	; 2
    2304:	0e 94 c8 0c 	call	0x1990	; 0x1990 <HLCD_voidSendCommand>

}
    2308:	27 96       	adiw	r28, 0x07	; 7
    230a:	0f b6       	in	r0, 0x3f	; 63
    230c:	f8 94       	cli
    230e:	de bf       	out	0x3e, r29	; 62
    2310:	0f be       	out	0x3f, r0	; 63
    2312:	cd bf       	out	0x3d, r28	; 61
    2314:	cf 91       	pop	r28
    2316:	df 91       	pop	r29
    2318:	08 95       	ret

0000231a <HSSD_voidInitSSD>:
#include "SSD_CONFIG.h"
#include "SSD_PRIVATE.h"
#include "SSD_INTERFACE.h"

void HSSD_voidInitSSD(void)
{
    231a:	df 93       	push	r29
    231c:	cf 93       	push	r28
    231e:	cd b7       	in	r28, 0x3d	; 61
    2320:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidSetPinDirection(DIO_u8_PORTB ,DIO_u8_PIN0, DIO_u8_OUTPUT);
    2322:	81 e0       	ldi	r24, 0x01	; 1
    2324:	60 e0       	ldi	r22, 0x00	; 0
    2326:	41 e0       	ldi	r20, 0x01	; 1
    2328:	0e 94 69 08 	call	0x10d2	; 0x10d2 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(DIO_u8_PORTB ,DIO_u8_PIN1, DIO_u8_OUTPUT);
    232c:	81 e0       	ldi	r24, 0x01	; 1
    232e:	61 e0       	ldi	r22, 0x01	; 1
    2330:	41 e0       	ldi	r20, 0x01	; 1
    2332:	0e 94 69 08 	call	0x10d2	; 0x10d2 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(DIO_u8_PORTB ,DIO_u8_PIN2, DIO_u8_OUTPUT);
    2336:	81 e0       	ldi	r24, 0x01	; 1
    2338:	62 e0       	ldi	r22, 0x02	; 2
    233a:	41 e0       	ldi	r20, 0x01	; 1
    233c:	0e 94 69 08 	call	0x10d2	; 0x10d2 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(DIO_u8_PORTB ,DIO_u8_PIN4, DIO_u8_OUTPUT);
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	64 e0       	ldi	r22, 0x04	; 4
    2344:	41 e0       	ldi	r20, 0x01	; 1
    2346:	0e 94 69 08 	call	0x10d2	; 0x10d2 <MDIO_voidSetPinDirection>
                                        
	MDIO_voidSetPinDirection(DIO_u8_PORTB ,DIO_u8_PIN6, DIO_u8_OUTPUT);
    234a:	81 e0       	ldi	r24, 0x01	; 1
    234c:	66 e0       	ldi	r22, 0x06	; 6
    234e:	41 e0       	ldi	r20, 0x01	; 1
    2350:	0e 94 69 08 	call	0x10d2	; 0x10d2 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(DIO_u8_PORTB ,DIO_u8_PIN5, DIO_u8_OUTPUT);
    2354:	81 e0       	ldi	r24, 0x01	; 1
    2356:	65 e0       	ldi	r22, 0x05	; 5
    2358:	41 e0       	ldi	r20, 0x01	; 1
    235a:	0e 94 69 08 	call	0x10d2	; 0x10d2 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(DIO_u8_PORTA ,DIO_u8_PIN2, DIO_u8_OUTPUT);
    235e:	80 e0       	ldi	r24, 0x00	; 0
    2360:	62 e0       	ldi	r22, 0x02	; 2
    2362:	41 e0       	ldi	r20, 0x01	; 1
    2364:	0e 94 69 08 	call	0x10d2	; 0x10d2 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(DIO_u8_PORTA ,DIO_u8_PIN3, DIO_u8_OUTPUT);
    2368:	80 e0       	ldi	r24, 0x00	; 0
    236a:	63 e0       	ldi	r22, 0x03	; 3
    236c:	41 e0       	ldi	r20, 0x01	; 1
    236e:	0e 94 69 08 	call	0x10d2	; 0x10d2 <MDIO_voidSetPinDirection>
	
}
    2372:	cf 91       	pop	r28
    2374:	df 91       	pop	r29
    2376:	08 95       	ret

00002378 <HSSD_voidDisplayDigitSSD>:
void HSSD_voidDisplayDigitSSD(u8 Copy_u8Number,u8 Copy_u8SSD)
{
    2378:	df 93       	push	r29
    237a:	cf 93       	push	r28
    237c:	cd b7       	in	r28, 0x3d	; 61
    237e:	de b7       	in	r29, 0x3e	; 62
    2380:	2c 97       	sbiw	r28, 0x0c	; 12
    2382:	0f b6       	in	r0, 0x3f	; 63
    2384:	f8 94       	cli
    2386:	de bf       	out	0x3e, r29	; 62
    2388:	0f be       	out	0x3f, r0	; 63
    238a:	cd bf       	out	0x3d, r28	; 61
    238c:	89 83       	std	Y+1, r24	; 0x01
    238e:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8SSD)
    2390:	8a 81       	ldd	r24, Y+2	; 0x02
    2392:	28 2f       	mov	r18, r24
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	3c 87       	std	Y+12, r19	; 0x0c
    2398:	2b 87       	std	Y+11, r18	; 0x0b
    239a:	8b 85       	ldd	r24, Y+11	; 0x0b
    239c:	9c 85       	ldd	r25, Y+12	; 0x0c
    239e:	82 30       	cpi	r24, 0x02	; 2
    23a0:	91 05       	cpc	r25, r1
    23a2:	09 f4       	brne	.+2      	; 0x23a6 <HSSD_voidDisplayDigitSSD+0x2e>
    23a4:	50 c1       	rjmp	.+672    	; 0x2646 <HSSD_voidDisplayDigitSSD+0x2ce>
    23a6:	2b 85       	ldd	r18, Y+11	; 0x0b
    23a8:	3c 85       	ldd	r19, Y+12	; 0x0c
    23aa:	23 30       	cpi	r18, 0x03	; 3
    23ac:	31 05       	cpc	r19, r1
    23ae:	34 f4       	brge	.+12     	; 0x23bc <HSSD_voidDisplayDigitSSD+0x44>
    23b0:	8b 85       	ldd	r24, Y+11	; 0x0b
    23b2:	9c 85       	ldd	r25, Y+12	; 0x0c
    23b4:	81 30       	cpi	r24, 0x01	; 1
    23b6:	91 05       	cpc	r25, r1
    23b8:	71 f0       	breq	.+28     	; 0x23d6 <HSSD_voidDisplayDigitSSD+0x5e>
    23ba:	ec c4       	rjmp	.+2520   	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
    23bc:	2b 85       	ldd	r18, Y+11	; 0x0b
    23be:	3c 85       	ldd	r19, Y+12	; 0x0c
    23c0:	23 30       	cpi	r18, 0x03	; 3
    23c2:	31 05       	cpc	r19, r1
    23c4:	09 f4       	brne	.+2      	; 0x23c8 <HSSD_voidDisplayDigitSSD+0x50>
    23c6:	77 c2       	rjmp	.+1262   	; 0x28b6 <HSSD_voidDisplayDigitSSD+0x53e>
    23c8:	8b 85       	ldd	r24, Y+11	; 0x0b
    23ca:	9c 85       	ldd	r25, Y+12	; 0x0c
    23cc:	84 30       	cpi	r24, 0x04	; 4
    23ce:	91 05       	cpc	r25, r1
    23d0:	09 f4       	brne	.+2      	; 0x23d4 <HSSD_voidDisplayDigitSSD+0x5c>
    23d2:	a9 c3       	rjmp	.+1874   	; 0x2b26 <HSSD_voidDisplayDigitSSD+0x7ae>
    23d4:	df c4       	rjmp	.+2494   	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
	{
		case ONES_T:
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN6, DIO_u8_LOW);
    23d6:	81 e0       	ldi	r24, 0x01	; 1
    23d8:	66 e0       	ldi	r22, 0x06	; 6
    23da:	40 e0       	ldi	r20, 0x00	; 0
    23dc:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN5, DIO_u8_LOW);
    23e0:	81 e0       	ldi	r24, 0x01	; 1
    23e2:	65 e0       	ldi	r22, 0x05	; 5
    23e4:	40 e0       	ldi	r20, 0x00	; 0
    23e6:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTA ,DIO_u8_PIN2, DIO_u8_LOW);
    23ea:	80 e0       	ldi	r24, 0x00	; 0
    23ec:	62 e0       	ldi	r22, 0x02	; 2
    23ee:	40 e0       	ldi	r20, 0x00	; 0
    23f0:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTA ,DIO_u8_PIN3, DIO_u8_HIGH);
    23f4:	80 e0       	ldi	r24, 0x00	; 0
    23f6:	63 e0       	ldi	r22, 0x03	; 3
    23f8:	41 e0       	ldi	r20, 0x01	; 1
    23fa:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
		switch(Copy_u8Number)
    23fe:	89 81       	ldd	r24, Y+1	; 0x01
    2400:	28 2f       	mov	r18, r24
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	3a 87       	std	Y+10, r19	; 0x0a
    2406:	29 87       	std	Y+9, r18	; 0x09
    2408:	89 85       	ldd	r24, Y+9	; 0x09
    240a:	9a 85       	ldd	r25, Y+10	; 0x0a
    240c:	84 30       	cpi	r24, 0x04	; 4
    240e:	91 05       	cpc	r25, r1
    2410:	09 f4       	brne	.+2      	; 0x2414 <HSSD_voidDisplayDigitSSD+0x9c>
    2412:	9b c0       	rjmp	.+310    	; 0x254a <HSSD_voidDisplayDigitSSD+0x1d2>
    2414:	29 85       	ldd	r18, Y+9	; 0x09
    2416:	3a 85       	ldd	r19, Y+10	; 0x0a
    2418:	25 30       	cpi	r18, 0x05	; 5
    241a:	31 05       	cpc	r19, r1
    241c:	ec f4       	brge	.+58     	; 0x2458 <HSSD_voidDisplayDigitSSD+0xe0>
    241e:	89 85       	ldd	r24, Y+9	; 0x09
    2420:	9a 85       	ldd	r25, Y+10	; 0x0a
    2422:	81 30       	cpi	r24, 0x01	; 1
    2424:	91 05       	cpc	r25, r1
    2426:	09 f4       	brne	.+2      	; 0x242a <HSSD_voidDisplayDigitSSD+0xb2>
    2428:	51 c0       	rjmp	.+162    	; 0x24cc <HSSD_voidDisplayDigitSSD+0x154>
    242a:	29 85       	ldd	r18, Y+9	; 0x09
    242c:	3a 85       	ldd	r19, Y+10	; 0x0a
    242e:	22 30       	cpi	r18, 0x02	; 2
    2430:	31 05       	cpc	r19, r1
    2432:	2c f4       	brge	.+10     	; 0x243e <HSSD_voidDisplayDigitSSD+0xc6>
    2434:	89 85       	ldd	r24, Y+9	; 0x09
    2436:	9a 85       	ldd	r25, Y+10	; 0x0a
    2438:	00 97       	sbiw	r24, 0x00	; 0
    243a:	99 f1       	breq	.+102    	; 0x24a2 <HSSD_voidDisplayDigitSSD+0x12a>
    243c:	ab c4       	rjmp	.+2390   	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
    243e:	29 85       	ldd	r18, Y+9	; 0x09
    2440:	3a 85       	ldd	r19, Y+10	; 0x0a
    2442:	22 30       	cpi	r18, 0x02	; 2
    2444:	31 05       	cpc	r19, r1
    2446:	09 f4       	brne	.+2      	; 0x244a <HSSD_voidDisplayDigitSSD+0xd2>
    2448:	56 c0       	rjmp	.+172    	; 0x24f6 <HSSD_voidDisplayDigitSSD+0x17e>
    244a:	89 85       	ldd	r24, Y+9	; 0x09
    244c:	9a 85       	ldd	r25, Y+10	; 0x0a
    244e:	83 30       	cpi	r24, 0x03	; 3
    2450:	91 05       	cpc	r25, r1
    2452:	09 f4       	brne	.+2      	; 0x2456 <HSSD_voidDisplayDigitSSD+0xde>
    2454:	65 c0       	rjmp	.+202    	; 0x2520 <HSSD_voidDisplayDigitSSD+0x1a8>
    2456:	9e c4       	rjmp	.+2364   	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
    2458:	29 85       	ldd	r18, Y+9	; 0x09
    245a:	3a 85       	ldd	r19, Y+10	; 0x0a
    245c:	27 30       	cpi	r18, 0x07	; 7
    245e:	31 05       	cpc	r19, r1
    2460:	09 f4       	brne	.+2      	; 0x2464 <HSSD_voidDisplayDigitSSD+0xec>
    2462:	b2 c0       	rjmp	.+356    	; 0x25c8 <HSSD_voidDisplayDigitSSD+0x250>
    2464:	89 85       	ldd	r24, Y+9	; 0x09
    2466:	9a 85       	ldd	r25, Y+10	; 0x0a
    2468:	88 30       	cpi	r24, 0x08	; 8
    246a:	91 05       	cpc	r25, r1
    246c:	6c f4       	brge	.+26     	; 0x2488 <HSSD_voidDisplayDigitSSD+0x110>
    246e:	29 85       	ldd	r18, Y+9	; 0x09
    2470:	3a 85       	ldd	r19, Y+10	; 0x0a
    2472:	25 30       	cpi	r18, 0x05	; 5
    2474:	31 05       	cpc	r19, r1
    2476:	09 f4       	brne	.+2      	; 0x247a <HSSD_voidDisplayDigitSSD+0x102>
    2478:	7d c0       	rjmp	.+250    	; 0x2574 <HSSD_voidDisplayDigitSSD+0x1fc>
    247a:	89 85       	ldd	r24, Y+9	; 0x09
    247c:	9a 85       	ldd	r25, Y+10	; 0x0a
    247e:	86 30       	cpi	r24, 0x06	; 6
    2480:	91 05       	cpc	r25, r1
    2482:	09 f4       	brne	.+2      	; 0x2486 <HSSD_voidDisplayDigitSSD+0x10e>
    2484:	8c c0       	rjmp	.+280    	; 0x259e <HSSD_voidDisplayDigitSSD+0x226>
    2486:	86 c4       	rjmp	.+2316   	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
    2488:	29 85       	ldd	r18, Y+9	; 0x09
    248a:	3a 85       	ldd	r19, Y+10	; 0x0a
    248c:	28 30       	cpi	r18, 0x08	; 8
    248e:	31 05       	cpc	r19, r1
    2490:	09 f4       	brne	.+2      	; 0x2494 <HSSD_voidDisplayDigitSSD+0x11c>
    2492:	af c0       	rjmp	.+350    	; 0x25f2 <HSSD_voidDisplayDigitSSD+0x27a>
    2494:	89 85       	ldd	r24, Y+9	; 0x09
    2496:	9a 85       	ldd	r25, Y+10	; 0x0a
    2498:	89 30       	cpi	r24, 0x09	; 9
    249a:	91 05       	cpc	r25, r1
    249c:	09 f4       	brne	.+2      	; 0x24a0 <HSSD_voidDisplayDigitSSD+0x128>
    249e:	be c0       	rjmp	.+380    	; 0x261c <HSSD_voidDisplayDigitSSD+0x2a4>
    24a0:	79 c4       	rjmp	.+2290   	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
		{
			case 0:
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN0, DIO_u8_LOW);
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	60 e0       	ldi	r22, 0x00	; 0
    24a6:	40 e0       	ldi	r20, 0x00	; 0
    24a8:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN1, DIO_u8_LOW);
    24ac:	81 e0       	ldi	r24, 0x01	; 1
    24ae:	61 e0       	ldi	r22, 0x01	; 1
    24b0:	40 e0       	ldi	r20, 0x00	; 0
    24b2:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN2, DIO_u8_LOW);
    24b6:	81 e0       	ldi	r24, 0x01	; 1
    24b8:	62 e0       	ldi	r22, 0x02	; 2
    24ba:	40 e0       	ldi	r20, 0x00	; 0
    24bc:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN4, DIO_u8_LOW);
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    24c2:	64 e0       	ldi	r22, 0x04	; 4
    24c4:	40 e0       	ldi	r20, 0x00	; 0
    24c6:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
    24ca:	64 c4       	rjmp	.+2248   	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
			break;						 
			case 1:						 
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN0, DIO_u8_HIGH);
    24cc:	81 e0       	ldi	r24, 0x01	; 1
    24ce:	60 e0       	ldi	r22, 0x00	; 0
    24d0:	41 e0       	ldi	r20, 0x01	; 1
    24d2:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN1, DIO_u8_LOW);
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	61 e0       	ldi	r22, 0x01	; 1
    24da:	40 e0       	ldi	r20, 0x00	; 0
    24dc:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN2, DIO_u8_LOW);
    24e0:	81 e0       	ldi	r24, 0x01	; 1
    24e2:	62 e0       	ldi	r22, 0x02	; 2
    24e4:	40 e0       	ldi	r20, 0x00	; 0
    24e6:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN4, DIO_u8_LOW);
    24ea:	81 e0       	ldi	r24, 0x01	; 1
    24ec:	64 e0       	ldi	r22, 0x04	; 4
    24ee:	40 e0       	ldi	r20, 0x00	; 0
    24f0:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
    24f4:	4f c4       	rjmp	.+2206   	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
			break;						  
			case 2:						  
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN0, DIO_u8_LOW);
    24f6:	81 e0       	ldi	r24, 0x01	; 1
    24f8:	60 e0       	ldi	r22, 0x00	; 0
    24fa:	40 e0       	ldi	r20, 0x00	; 0
    24fc:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN1, DIO_u8_HIGH);
    2500:	81 e0       	ldi	r24, 0x01	; 1
    2502:	61 e0       	ldi	r22, 0x01	; 1
    2504:	41 e0       	ldi	r20, 0x01	; 1
    2506:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN2, DIO_u8_LOW);
    250a:	81 e0       	ldi	r24, 0x01	; 1
    250c:	62 e0       	ldi	r22, 0x02	; 2
    250e:	40 e0       	ldi	r20, 0x00	; 0
    2510:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN4, DIO_u8_LOW);
    2514:	81 e0       	ldi	r24, 0x01	; 1
    2516:	64 e0       	ldi	r22, 0x04	; 4
    2518:	40 e0       	ldi	r20, 0x00	; 0
    251a:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
    251e:	3a c4       	rjmp	.+2164   	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
			break;						 
			case 3:						 
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN0, DIO_u8_HIGH);
    2520:	81 e0       	ldi	r24, 0x01	; 1
    2522:	60 e0       	ldi	r22, 0x00	; 0
    2524:	41 e0       	ldi	r20, 0x01	; 1
    2526:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN1, DIO_u8_HIGH);
    252a:	81 e0       	ldi	r24, 0x01	; 1
    252c:	61 e0       	ldi	r22, 0x01	; 1
    252e:	41 e0       	ldi	r20, 0x01	; 1
    2530:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN2, DIO_u8_LOW);
    2534:	81 e0       	ldi	r24, 0x01	; 1
    2536:	62 e0       	ldi	r22, 0x02	; 2
    2538:	40 e0       	ldi	r20, 0x00	; 0
    253a:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN4, DIO_u8_LOW);
    253e:	81 e0       	ldi	r24, 0x01	; 1
    2540:	64 e0       	ldi	r22, 0x04	; 4
    2542:	40 e0       	ldi	r20, 0x00	; 0
    2544:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
    2548:	25 c4       	rjmp	.+2122   	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
			break;						  
			case 4:						  
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN0, DIO_u8_LOW);
    254a:	81 e0       	ldi	r24, 0x01	; 1
    254c:	60 e0       	ldi	r22, 0x00	; 0
    254e:	40 e0       	ldi	r20, 0x00	; 0
    2550:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN1, DIO_u8_LOW);
    2554:	81 e0       	ldi	r24, 0x01	; 1
    2556:	61 e0       	ldi	r22, 0x01	; 1
    2558:	40 e0       	ldi	r20, 0x00	; 0
    255a:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN2, DIO_u8_HIGH);
    255e:	81 e0       	ldi	r24, 0x01	; 1
    2560:	62 e0       	ldi	r22, 0x02	; 2
    2562:	41 e0       	ldi	r20, 0x01	; 1
    2564:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN4, DIO_u8_LOW);
    2568:	81 e0       	ldi	r24, 0x01	; 1
    256a:	64 e0       	ldi	r22, 0x04	; 4
    256c:	40 e0       	ldi	r20, 0x00	; 0
    256e:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
    2572:	10 c4       	rjmp	.+2080   	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
			break;						 
			case 5:						 
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN0, DIO_u8_HIGH);
    2574:	81 e0       	ldi	r24, 0x01	; 1
    2576:	60 e0       	ldi	r22, 0x00	; 0
    2578:	41 e0       	ldi	r20, 0x01	; 1
    257a:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN1, DIO_u8_LOW);
    257e:	81 e0       	ldi	r24, 0x01	; 1
    2580:	61 e0       	ldi	r22, 0x01	; 1
    2582:	40 e0       	ldi	r20, 0x00	; 0
    2584:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN2, DIO_u8_HIGH);
    2588:	81 e0       	ldi	r24, 0x01	; 1
    258a:	62 e0       	ldi	r22, 0x02	; 2
    258c:	41 e0       	ldi	r20, 0x01	; 1
    258e:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN4, DIO_u8_LOW);
    2592:	81 e0       	ldi	r24, 0x01	; 1
    2594:	64 e0       	ldi	r22, 0x04	; 4
    2596:	40 e0       	ldi	r20, 0x00	; 0
    2598:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
    259c:	fb c3       	rjmp	.+2038   	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
			break;						  
			case 6:						  
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN0, DIO_u8_LOW);
    259e:	81 e0       	ldi	r24, 0x01	; 1
    25a0:	60 e0       	ldi	r22, 0x00	; 0
    25a2:	40 e0       	ldi	r20, 0x00	; 0
    25a4:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN1, DIO_u8_HIGH);
    25a8:	81 e0       	ldi	r24, 0x01	; 1
    25aa:	61 e0       	ldi	r22, 0x01	; 1
    25ac:	41 e0       	ldi	r20, 0x01	; 1
    25ae:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN2, DIO_u8_HIGH);
    25b2:	81 e0       	ldi	r24, 0x01	; 1
    25b4:	62 e0       	ldi	r22, 0x02	; 2
    25b6:	41 e0       	ldi	r20, 0x01	; 1
    25b8:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN4, DIO_u8_LOW);
    25bc:	81 e0       	ldi	r24, 0x01	; 1
    25be:	64 e0       	ldi	r22, 0x04	; 4
    25c0:	40 e0       	ldi	r20, 0x00	; 0
    25c2:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
    25c6:	e6 c3       	rjmp	.+1996   	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
			break;						  
			case 7:						  
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN0, DIO_u8_HIGH);
    25c8:	81 e0       	ldi	r24, 0x01	; 1
    25ca:	60 e0       	ldi	r22, 0x00	; 0
    25cc:	41 e0       	ldi	r20, 0x01	; 1
    25ce:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN1, DIO_u8_HIGH);
    25d2:	81 e0       	ldi	r24, 0x01	; 1
    25d4:	61 e0       	ldi	r22, 0x01	; 1
    25d6:	41 e0       	ldi	r20, 0x01	; 1
    25d8:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN2, DIO_u8_HIGH);
    25dc:	81 e0       	ldi	r24, 0x01	; 1
    25de:	62 e0       	ldi	r22, 0x02	; 2
    25e0:	41 e0       	ldi	r20, 0x01	; 1
    25e2:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN4, DIO_u8_LOW);
    25e6:	81 e0       	ldi	r24, 0x01	; 1
    25e8:	64 e0       	ldi	r22, 0x04	; 4
    25ea:	40 e0       	ldi	r20, 0x00	; 0
    25ec:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
    25f0:	d1 c3       	rjmp	.+1954   	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
			break;						  
			case 8:						  
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN0, DIO_u8_LOW);
    25f2:	81 e0       	ldi	r24, 0x01	; 1
    25f4:	60 e0       	ldi	r22, 0x00	; 0
    25f6:	40 e0       	ldi	r20, 0x00	; 0
    25f8:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN1, DIO_u8_LOW);
    25fc:	81 e0       	ldi	r24, 0x01	; 1
    25fe:	61 e0       	ldi	r22, 0x01	; 1
    2600:	40 e0       	ldi	r20, 0x00	; 0
    2602:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN2, DIO_u8_LOW);
    2606:	81 e0       	ldi	r24, 0x01	; 1
    2608:	62 e0       	ldi	r22, 0x02	; 2
    260a:	40 e0       	ldi	r20, 0x00	; 0
    260c:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN4, DIO_u8_HIGH);
    2610:	81 e0       	ldi	r24, 0x01	; 1
    2612:	64 e0       	ldi	r22, 0x04	; 4
    2614:	41 e0       	ldi	r20, 0x01	; 1
    2616:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
    261a:	bc c3       	rjmp	.+1912   	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
			break;						  
			case 9:						  
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN0, DIO_u8_HIGH);
    261c:	81 e0       	ldi	r24, 0x01	; 1
    261e:	60 e0       	ldi	r22, 0x00	; 0
    2620:	41 e0       	ldi	r20, 0x01	; 1
    2622:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN1, DIO_u8_LOW);
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	61 e0       	ldi	r22, 0x01	; 1
    262a:	40 e0       	ldi	r20, 0x00	; 0
    262c:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN2, DIO_u8_LOW);
    2630:	81 e0       	ldi	r24, 0x01	; 1
    2632:	62 e0       	ldi	r22, 0x02	; 2
    2634:	40 e0       	ldi	r20, 0x00	; 0
    2636:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN4, DIO_u8_HIGH);
    263a:	81 e0       	ldi	r24, 0x01	; 1
    263c:	64 e0       	ldi	r22, 0x04	; 4
    263e:	41 e0       	ldi	r20, 0x01	; 1
    2640:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
    2644:	a7 c3       	rjmp	.+1870   	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
			default:
			break;
		}
		break;
		case TENS_T:
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN6, DIO_u8_LOW);
    2646:	81 e0       	ldi	r24, 0x01	; 1
    2648:	66 e0       	ldi	r22, 0x06	; 6
    264a:	40 e0       	ldi	r20, 0x00	; 0
    264c:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN5, DIO_u8_LOW);
    2650:	81 e0       	ldi	r24, 0x01	; 1
    2652:	65 e0       	ldi	r22, 0x05	; 5
    2654:	40 e0       	ldi	r20, 0x00	; 0
    2656:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTA ,DIO_u8_PIN2, DIO_u8_HIGH);
    265a:	80 e0       	ldi	r24, 0x00	; 0
    265c:	62 e0       	ldi	r22, 0x02	; 2
    265e:	41 e0       	ldi	r20, 0x01	; 1
    2660:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTA ,DIO_u8_PIN3, DIO_u8_LOW);
    2664:	80 e0       	ldi	r24, 0x00	; 0
    2666:	63 e0       	ldi	r22, 0x03	; 3
    2668:	40 e0       	ldi	r20, 0x00	; 0
    266a:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
		switch(Copy_u8Number)
    266e:	89 81       	ldd	r24, Y+1	; 0x01
    2670:	28 2f       	mov	r18, r24
    2672:	30 e0       	ldi	r19, 0x00	; 0
    2674:	38 87       	std	Y+8, r19	; 0x08
    2676:	2f 83       	std	Y+7, r18	; 0x07
    2678:	8f 81       	ldd	r24, Y+7	; 0x07
    267a:	98 85       	ldd	r25, Y+8	; 0x08
    267c:	84 30       	cpi	r24, 0x04	; 4
    267e:	91 05       	cpc	r25, r1
    2680:	09 f4       	brne	.+2      	; 0x2684 <HSSD_voidDisplayDigitSSD+0x30c>
    2682:	9b c0       	rjmp	.+310    	; 0x27ba <HSSD_voidDisplayDigitSSD+0x442>
    2684:	2f 81       	ldd	r18, Y+7	; 0x07
    2686:	38 85       	ldd	r19, Y+8	; 0x08
    2688:	25 30       	cpi	r18, 0x05	; 5
    268a:	31 05       	cpc	r19, r1
    268c:	ec f4       	brge	.+58     	; 0x26c8 <HSSD_voidDisplayDigitSSD+0x350>
    268e:	8f 81       	ldd	r24, Y+7	; 0x07
    2690:	98 85       	ldd	r25, Y+8	; 0x08
    2692:	81 30       	cpi	r24, 0x01	; 1
    2694:	91 05       	cpc	r25, r1
    2696:	09 f4       	brne	.+2      	; 0x269a <HSSD_voidDisplayDigitSSD+0x322>
    2698:	51 c0       	rjmp	.+162    	; 0x273c <HSSD_voidDisplayDigitSSD+0x3c4>
    269a:	2f 81       	ldd	r18, Y+7	; 0x07
    269c:	38 85       	ldd	r19, Y+8	; 0x08
    269e:	22 30       	cpi	r18, 0x02	; 2
    26a0:	31 05       	cpc	r19, r1
    26a2:	2c f4       	brge	.+10     	; 0x26ae <HSSD_voidDisplayDigitSSD+0x336>
    26a4:	8f 81       	ldd	r24, Y+7	; 0x07
    26a6:	98 85       	ldd	r25, Y+8	; 0x08
    26a8:	00 97       	sbiw	r24, 0x00	; 0
    26aa:	99 f1       	breq	.+102    	; 0x2712 <HSSD_voidDisplayDigitSSD+0x39a>
    26ac:	73 c3       	rjmp	.+1766   	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
    26ae:	2f 81       	ldd	r18, Y+7	; 0x07
    26b0:	38 85       	ldd	r19, Y+8	; 0x08
    26b2:	22 30       	cpi	r18, 0x02	; 2
    26b4:	31 05       	cpc	r19, r1
    26b6:	09 f4       	brne	.+2      	; 0x26ba <HSSD_voidDisplayDigitSSD+0x342>
    26b8:	56 c0       	rjmp	.+172    	; 0x2766 <HSSD_voidDisplayDigitSSD+0x3ee>
    26ba:	8f 81       	ldd	r24, Y+7	; 0x07
    26bc:	98 85       	ldd	r25, Y+8	; 0x08
    26be:	83 30       	cpi	r24, 0x03	; 3
    26c0:	91 05       	cpc	r25, r1
    26c2:	09 f4       	brne	.+2      	; 0x26c6 <HSSD_voidDisplayDigitSSD+0x34e>
    26c4:	65 c0       	rjmp	.+202    	; 0x2790 <HSSD_voidDisplayDigitSSD+0x418>
    26c6:	66 c3       	rjmp	.+1740   	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
    26c8:	2f 81       	ldd	r18, Y+7	; 0x07
    26ca:	38 85       	ldd	r19, Y+8	; 0x08
    26cc:	27 30       	cpi	r18, 0x07	; 7
    26ce:	31 05       	cpc	r19, r1
    26d0:	09 f4       	brne	.+2      	; 0x26d4 <HSSD_voidDisplayDigitSSD+0x35c>
    26d2:	b2 c0       	rjmp	.+356    	; 0x2838 <HSSD_voidDisplayDigitSSD+0x4c0>
    26d4:	8f 81       	ldd	r24, Y+7	; 0x07
    26d6:	98 85       	ldd	r25, Y+8	; 0x08
    26d8:	88 30       	cpi	r24, 0x08	; 8
    26da:	91 05       	cpc	r25, r1
    26dc:	6c f4       	brge	.+26     	; 0x26f8 <HSSD_voidDisplayDigitSSD+0x380>
    26de:	2f 81       	ldd	r18, Y+7	; 0x07
    26e0:	38 85       	ldd	r19, Y+8	; 0x08
    26e2:	25 30       	cpi	r18, 0x05	; 5
    26e4:	31 05       	cpc	r19, r1
    26e6:	09 f4       	brne	.+2      	; 0x26ea <HSSD_voidDisplayDigitSSD+0x372>
    26e8:	7d c0       	rjmp	.+250    	; 0x27e4 <HSSD_voidDisplayDigitSSD+0x46c>
    26ea:	8f 81       	ldd	r24, Y+7	; 0x07
    26ec:	98 85       	ldd	r25, Y+8	; 0x08
    26ee:	86 30       	cpi	r24, 0x06	; 6
    26f0:	91 05       	cpc	r25, r1
    26f2:	09 f4       	brne	.+2      	; 0x26f6 <HSSD_voidDisplayDigitSSD+0x37e>
    26f4:	8c c0       	rjmp	.+280    	; 0x280e <HSSD_voidDisplayDigitSSD+0x496>
    26f6:	4e c3       	rjmp	.+1692   	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
    26f8:	2f 81       	ldd	r18, Y+7	; 0x07
    26fa:	38 85       	ldd	r19, Y+8	; 0x08
    26fc:	28 30       	cpi	r18, 0x08	; 8
    26fe:	31 05       	cpc	r19, r1
    2700:	09 f4       	brne	.+2      	; 0x2704 <HSSD_voidDisplayDigitSSD+0x38c>
    2702:	af c0       	rjmp	.+350    	; 0x2862 <HSSD_voidDisplayDigitSSD+0x4ea>
    2704:	8f 81       	ldd	r24, Y+7	; 0x07
    2706:	98 85       	ldd	r25, Y+8	; 0x08
    2708:	89 30       	cpi	r24, 0x09	; 9
    270a:	91 05       	cpc	r25, r1
    270c:	09 f4       	brne	.+2      	; 0x2710 <HSSD_voidDisplayDigitSSD+0x398>
    270e:	be c0       	rjmp	.+380    	; 0x288c <HSSD_voidDisplayDigitSSD+0x514>
    2710:	41 c3       	rjmp	.+1666   	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
		{
			case 0:
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN0, DIO_u8_LOW);
    2712:	81 e0       	ldi	r24, 0x01	; 1
    2714:	60 e0       	ldi	r22, 0x00	; 0
    2716:	40 e0       	ldi	r20, 0x00	; 0
    2718:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN1, DIO_u8_LOW);
    271c:	81 e0       	ldi	r24, 0x01	; 1
    271e:	61 e0       	ldi	r22, 0x01	; 1
    2720:	40 e0       	ldi	r20, 0x00	; 0
    2722:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN2, DIO_u8_LOW);
    2726:	81 e0       	ldi	r24, 0x01	; 1
    2728:	62 e0       	ldi	r22, 0x02	; 2
    272a:	40 e0       	ldi	r20, 0x00	; 0
    272c:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN4, DIO_u8_LOW);
    2730:	81 e0       	ldi	r24, 0x01	; 1
    2732:	64 e0       	ldi	r22, 0x04	; 4
    2734:	40 e0       	ldi	r20, 0x00	; 0
    2736:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
    273a:	2c c3       	rjmp	.+1624   	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
			break;						 
			case 1:						 
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN0, DIO_u8_HIGH);
    273c:	81 e0       	ldi	r24, 0x01	; 1
    273e:	60 e0       	ldi	r22, 0x00	; 0
    2740:	41 e0       	ldi	r20, 0x01	; 1
    2742:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN1, DIO_u8_LOW);
    2746:	81 e0       	ldi	r24, 0x01	; 1
    2748:	61 e0       	ldi	r22, 0x01	; 1
    274a:	40 e0       	ldi	r20, 0x00	; 0
    274c:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN2, DIO_u8_LOW);
    2750:	81 e0       	ldi	r24, 0x01	; 1
    2752:	62 e0       	ldi	r22, 0x02	; 2
    2754:	40 e0       	ldi	r20, 0x00	; 0
    2756:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN4, DIO_u8_LOW);
    275a:	81 e0       	ldi	r24, 0x01	; 1
    275c:	64 e0       	ldi	r22, 0x04	; 4
    275e:	40 e0       	ldi	r20, 0x00	; 0
    2760:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
    2764:	17 c3       	rjmp	.+1582   	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
			break;						  
			case 2:						  
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN0, DIO_u8_LOW);
    2766:	81 e0       	ldi	r24, 0x01	; 1
    2768:	60 e0       	ldi	r22, 0x00	; 0
    276a:	40 e0       	ldi	r20, 0x00	; 0
    276c:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN1, DIO_u8_HIGH);
    2770:	81 e0       	ldi	r24, 0x01	; 1
    2772:	61 e0       	ldi	r22, 0x01	; 1
    2774:	41 e0       	ldi	r20, 0x01	; 1
    2776:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN2, DIO_u8_LOW);
    277a:	81 e0       	ldi	r24, 0x01	; 1
    277c:	62 e0       	ldi	r22, 0x02	; 2
    277e:	40 e0       	ldi	r20, 0x00	; 0
    2780:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN4, DIO_u8_LOW);
    2784:	81 e0       	ldi	r24, 0x01	; 1
    2786:	64 e0       	ldi	r22, 0x04	; 4
    2788:	40 e0       	ldi	r20, 0x00	; 0
    278a:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
    278e:	02 c3       	rjmp	.+1540   	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
			break;						 
			case 3:						 
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN0, DIO_u8_HIGH);
    2790:	81 e0       	ldi	r24, 0x01	; 1
    2792:	60 e0       	ldi	r22, 0x00	; 0
    2794:	41 e0       	ldi	r20, 0x01	; 1
    2796:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN1, DIO_u8_HIGH);
    279a:	81 e0       	ldi	r24, 0x01	; 1
    279c:	61 e0       	ldi	r22, 0x01	; 1
    279e:	41 e0       	ldi	r20, 0x01	; 1
    27a0:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN2, DIO_u8_LOW);
    27a4:	81 e0       	ldi	r24, 0x01	; 1
    27a6:	62 e0       	ldi	r22, 0x02	; 2
    27a8:	40 e0       	ldi	r20, 0x00	; 0
    27aa:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN4, DIO_u8_LOW);
    27ae:	81 e0       	ldi	r24, 0x01	; 1
    27b0:	64 e0       	ldi	r22, 0x04	; 4
    27b2:	40 e0       	ldi	r20, 0x00	; 0
    27b4:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
    27b8:	ed c2       	rjmp	.+1498   	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
			break;						  
			case 4:						  
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN0, DIO_u8_LOW);
    27ba:	81 e0       	ldi	r24, 0x01	; 1
    27bc:	60 e0       	ldi	r22, 0x00	; 0
    27be:	40 e0       	ldi	r20, 0x00	; 0
    27c0:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN1, DIO_u8_LOW);
    27c4:	81 e0       	ldi	r24, 0x01	; 1
    27c6:	61 e0       	ldi	r22, 0x01	; 1
    27c8:	40 e0       	ldi	r20, 0x00	; 0
    27ca:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN2, DIO_u8_HIGH);
    27ce:	81 e0       	ldi	r24, 0x01	; 1
    27d0:	62 e0       	ldi	r22, 0x02	; 2
    27d2:	41 e0       	ldi	r20, 0x01	; 1
    27d4:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN4, DIO_u8_LOW);
    27d8:	81 e0       	ldi	r24, 0x01	; 1
    27da:	64 e0       	ldi	r22, 0x04	; 4
    27dc:	40 e0       	ldi	r20, 0x00	; 0
    27de:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
    27e2:	d8 c2       	rjmp	.+1456   	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
			break;						 
			case 5:						 
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN0, DIO_u8_HIGH);
    27e4:	81 e0       	ldi	r24, 0x01	; 1
    27e6:	60 e0       	ldi	r22, 0x00	; 0
    27e8:	41 e0       	ldi	r20, 0x01	; 1
    27ea:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN1, DIO_u8_LOW);
    27ee:	81 e0       	ldi	r24, 0x01	; 1
    27f0:	61 e0       	ldi	r22, 0x01	; 1
    27f2:	40 e0       	ldi	r20, 0x00	; 0
    27f4:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN2, DIO_u8_HIGH);
    27f8:	81 e0       	ldi	r24, 0x01	; 1
    27fa:	62 e0       	ldi	r22, 0x02	; 2
    27fc:	41 e0       	ldi	r20, 0x01	; 1
    27fe:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN4, DIO_u8_LOW);
    2802:	81 e0       	ldi	r24, 0x01	; 1
    2804:	64 e0       	ldi	r22, 0x04	; 4
    2806:	40 e0       	ldi	r20, 0x00	; 0
    2808:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
    280c:	c3 c2       	rjmp	.+1414   	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
			break;						  
			case 6:						  
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN0, DIO_u8_LOW);
    280e:	81 e0       	ldi	r24, 0x01	; 1
    2810:	60 e0       	ldi	r22, 0x00	; 0
    2812:	40 e0       	ldi	r20, 0x00	; 0
    2814:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN1, DIO_u8_HIGH);
    2818:	81 e0       	ldi	r24, 0x01	; 1
    281a:	61 e0       	ldi	r22, 0x01	; 1
    281c:	41 e0       	ldi	r20, 0x01	; 1
    281e:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN2, DIO_u8_HIGH);
    2822:	81 e0       	ldi	r24, 0x01	; 1
    2824:	62 e0       	ldi	r22, 0x02	; 2
    2826:	41 e0       	ldi	r20, 0x01	; 1
    2828:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN4, DIO_u8_LOW);
    282c:	81 e0       	ldi	r24, 0x01	; 1
    282e:	64 e0       	ldi	r22, 0x04	; 4
    2830:	40 e0       	ldi	r20, 0x00	; 0
    2832:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
    2836:	ae c2       	rjmp	.+1372   	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
			break;						  
			case 7:						  
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN0, DIO_u8_HIGH);
    2838:	81 e0       	ldi	r24, 0x01	; 1
    283a:	60 e0       	ldi	r22, 0x00	; 0
    283c:	41 e0       	ldi	r20, 0x01	; 1
    283e:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN1, DIO_u8_HIGH);
    2842:	81 e0       	ldi	r24, 0x01	; 1
    2844:	61 e0       	ldi	r22, 0x01	; 1
    2846:	41 e0       	ldi	r20, 0x01	; 1
    2848:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN2, DIO_u8_HIGH);
    284c:	81 e0       	ldi	r24, 0x01	; 1
    284e:	62 e0       	ldi	r22, 0x02	; 2
    2850:	41 e0       	ldi	r20, 0x01	; 1
    2852:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN4, DIO_u8_LOW);
    2856:	81 e0       	ldi	r24, 0x01	; 1
    2858:	64 e0       	ldi	r22, 0x04	; 4
    285a:	40 e0       	ldi	r20, 0x00	; 0
    285c:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
    2860:	99 c2       	rjmp	.+1330   	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
			break;						  
			case 8:						  
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN0, DIO_u8_LOW);
    2862:	81 e0       	ldi	r24, 0x01	; 1
    2864:	60 e0       	ldi	r22, 0x00	; 0
    2866:	40 e0       	ldi	r20, 0x00	; 0
    2868:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN1, DIO_u8_LOW);
    286c:	81 e0       	ldi	r24, 0x01	; 1
    286e:	61 e0       	ldi	r22, 0x01	; 1
    2870:	40 e0       	ldi	r20, 0x00	; 0
    2872:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN2, DIO_u8_LOW);
    2876:	81 e0       	ldi	r24, 0x01	; 1
    2878:	62 e0       	ldi	r22, 0x02	; 2
    287a:	40 e0       	ldi	r20, 0x00	; 0
    287c:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN4, DIO_u8_HIGH);
    2880:	81 e0       	ldi	r24, 0x01	; 1
    2882:	64 e0       	ldi	r22, 0x04	; 4
    2884:	41 e0       	ldi	r20, 0x01	; 1
    2886:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
    288a:	84 c2       	rjmp	.+1288   	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
			break;						  
			case 9:						  
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN0, DIO_u8_HIGH);
    288c:	81 e0       	ldi	r24, 0x01	; 1
    288e:	60 e0       	ldi	r22, 0x00	; 0
    2890:	41 e0       	ldi	r20, 0x01	; 1
    2892:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN1, DIO_u8_LOW);
    2896:	81 e0       	ldi	r24, 0x01	; 1
    2898:	61 e0       	ldi	r22, 0x01	; 1
    289a:	40 e0       	ldi	r20, 0x00	; 0
    289c:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN2, DIO_u8_LOW);
    28a0:	81 e0       	ldi	r24, 0x01	; 1
    28a2:	62 e0       	ldi	r22, 0x02	; 2
    28a4:	40 e0       	ldi	r20, 0x00	; 0
    28a6:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN4, DIO_u8_HIGH);
    28aa:	81 e0       	ldi	r24, 0x01	; 1
    28ac:	64 e0       	ldi	r22, 0x04	; 4
    28ae:	41 e0       	ldi	r20, 0x01	; 1
    28b0:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
    28b4:	6f c2       	rjmp	.+1246   	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
			default:
			break;
		}
		break;
		case HUNDREDS_T:
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN6, DIO_u8_LOW);
    28b6:	81 e0       	ldi	r24, 0x01	; 1
    28b8:	66 e0       	ldi	r22, 0x06	; 6
    28ba:	40 e0       	ldi	r20, 0x00	; 0
    28bc:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN5, DIO_u8_HIGH);
    28c0:	81 e0       	ldi	r24, 0x01	; 1
    28c2:	65 e0       	ldi	r22, 0x05	; 5
    28c4:	41 e0       	ldi	r20, 0x01	; 1
    28c6:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTA ,DIO_u8_PIN2, DIO_u8_LOW);
    28ca:	80 e0       	ldi	r24, 0x00	; 0
    28cc:	62 e0       	ldi	r22, 0x02	; 2
    28ce:	40 e0       	ldi	r20, 0x00	; 0
    28d0:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTA ,DIO_u8_PIN3, DIO_u8_LOW);
    28d4:	80 e0       	ldi	r24, 0x00	; 0
    28d6:	63 e0       	ldi	r22, 0x03	; 3
    28d8:	40 e0       	ldi	r20, 0x00	; 0
    28da:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
		switch(Copy_u8Number)
    28de:	89 81       	ldd	r24, Y+1	; 0x01
    28e0:	28 2f       	mov	r18, r24
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	3e 83       	std	Y+6, r19	; 0x06
    28e6:	2d 83       	std	Y+5, r18	; 0x05
    28e8:	8d 81       	ldd	r24, Y+5	; 0x05
    28ea:	9e 81       	ldd	r25, Y+6	; 0x06
    28ec:	84 30       	cpi	r24, 0x04	; 4
    28ee:	91 05       	cpc	r25, r1
    28f0:	09 f4       	brne	.+2      	; 0x28f4 <HSSD_voidDisplayDigitSSD+0x57c>
    28f2:	9b c0       	rjmp	.+310    	; 0x2a2a <HSSD_voidDisplayDigitSSD+0x6b2>
    28f4:	2d 81       	ldd	r18, Y+5	; 0x05
    28f6:	3e 81       	ldd	r19, Y+6	; 0x06
    28f8:	25 30       	cpi	r18, 0x05	; 5
    28fa:	31 05       	cpc	r19, r1
    28fc:	ec f4       	brge	.+58     	; 0x2938 <HSSD_voidDisplayDigitSSD+0x5c0>
    28fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2900:	9e 81       	ldd	r25, Y+6	; 0x06
    2902:	81 30       	cpi	r24, 0x01	; 1
    2904:	91 05       	cpc	r25, r1
    2906:	09 f4       	brne	.+2      	; 0x290a <HSSD_voidDisplayDigitSSD+0x592>
    2908:	51 c0       	rjmp	.+162    	; 0x29ac <HSSD_voidDisplayDigitSSD+0x634>
    290a:	2d 81       	ldd	r18, Y+5	; 0x05
    290c:	3e 81       	ldd	r19, Y+6	; 0x06
    290e:	22 30       	cpi	r18, 0x02	; 2
    2910:	31 05       	cpc	r19, r1
    2912:	2c f4       	brge	.+10     	; 0x291e <HSSD_voidDisplayDigitSSD+0x5a6>
    2914:	8d 81       	ldd	r24, Y+5	; 0x05
    2916:	9e 81       	ldd	r25, Y+6	; 0x06
    2918:	00 97       	sbiw	r24, 0x00	; 0
    291a:	99 f1       	breq	.+102    	; 0x2982 <HSSD_voidDisplayDigitSSD+0x60a>
    291c:	3b c2       	rjmp	.+1142   	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
    291e:	2d 81       	ldd	r18, Y+5	; 0x05
    2920:	3e 81       	ldd	r19, Y+6	; 0x06
    2922:	22 30       	cpi	r18, 0x02	; 2
    2924:	31 05       	cpc	r19, r1
    2926:	09 f4       	brne	.+2      	; 0x292a <HSSD_voidDisplayDigitSSD+0x5b2>
    2928:	56 c0       	rjmp	.+172    	; 0x29d6 <HSSD_voidDisplayDigitSSD+0x65e>
    292a:	8d 81       	ldd	r24, Y+5	; 0x05
    292c:	9e 81       	ldd	r25, Y+6	; 0x06
    292e:	83 30       	cpi	r24, 0x03	; 3
    2930:	91 05       	cpc	r25, r1
    2932:	09 f4       	brne	.+2      	; 0x2936 <HSSD_voidDisplayDigitSSD+0x5be>
    2934:	65 c0       	rjmp	.+202    	; 0x2a00 <HSSD_voidDisplayDigitSSD+0x688>
    2936:	2e c2       	rjmp	.+1116   	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
    2938:	2d 81       	ldd	r18, Y+5	; 0x05
    293a:	3e 81       	ldd	r19, Y+6	; 0x06
    293c:	27 30       	cpi	r18, 0x07	; 7
    293e:	31 05       	cpc	r19, r1
    2940:	09 f4       	brne	.+2      	; 0x2944 <HSSD_voidDisplayDigitSSD+0x5cc>
    2942:	b2 c0       	rjmp	.+356    	; 0x2aa8 <HSSD_voidDisplayDigitSSD+0x730>
    2944:	8d 81       	ldd	r24, Y+5	; 0x05
    2946:	9e 81       	ldd	r25, Y+6	; 0x06
    2948:	88 30       	cpi	r24, 0x08	; 8
    294a:	91 05       	cpc	r25, r1
    294c:	6c f4       	brge	.+26     	; 0x2968 <HSSD_voidDisplayDigitSSD+0x5f0>
    294e:	2d 81       	ldd	r18, Y+5	; 0x05
    2950:	3e 81       	ldd	r19, Y+6	; 0x06
    2952:	25 30       	cpi	r18, 0x05	; 5
    2954:	31 05       	cpc	r19, r1
    2956:	09 f4       	brne	.+2      	; 0x295a <HSSD_voidDisplayDigitSSD+0x5e2>
    2958:	7d c0       	rjmp	.+250    	; 0x2a54 <HSSD_voidDisplayDigitSSD+0x6dc>
    295a:	8d 81       	ldd	r24, Y+5	; 0x05
    295c:	9e 81       	ldd	r25, Y+6	; 0x06
    295e:	86 30       	cpi	r24, 0x06	; 6
    2960:	91 05       	cpc	r25, r1
    2962:	09 f4       	brne	.+2      	; 0x2966 <HSSD_voidDisplayDigitSSD+0x5ee>
    2964:	8c c0       	rjmp	.+280    	; 0x2a7e <HSSD_voidDisplayDigitSSD+0x706>
    2966:	16 c2       	rjmp	.+1068   	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
    2968:	2d 81       	ldd	r18, Y+5	; 0x05
    296a:	3e 81       	ldd	r19, Y+6	; 0x06
    296c:	28 30       	cpi	r18, 0x08	; 8
    296e:	31 05       	cpc	r19, r1
    2970:	09 f4       	brne	.+2      	; 0x2974 <HSSD_voidDisplayDigitSSD+0x5fc>
    2972:	af c0       	rjmp	.+350    	; 0x2ad2 <HSSD_voidDisplayDigitSSD+0x75a>
    2974:	8d 81       	ldd	r24, Y+5	; 0x05
    2976:	9e 81       	ldd	r25, Y+6	; 0x06
    2978:	89 30       	cpi	r24, 0x09	; 9
    297a:	91 05       	cpc	r25, r1
    297c:	09 f4       	brne	.+2      	; 0x2980 <HSSD_voidDisplayDigitSSD+0x608>
    297e:	be c0       	rjmp	.+380    	; 0x2afc <HSSD_voidDisplayDigitSSD+0x784>
    2980:	09 c2       	rjmp	.+1042   	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
		{
			case 0:
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN0, DIO_u8_LOW);
    2982:	81 e0       	ldi	r24, 0x01	; 1
    2984:	60 e0       	ldi	r22, 0x00	; 0
    2986:	40 e0       	ldi	r20, 0x00	; 0
    2988:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN1, DIO_u8_LOW);
    298c:	81 e0       	ldi	r24, 0x01	; 1
    298e:	61 e0       	ldi	r22, 0x01	; 1
    2990:	40 e0       	ldi	r20, 0x00	; 0
    2992:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN2, DIO_u8_LOW);
    2996:	81 e0       	ldi	r24, 0x01	; 1
    2998:	62 e0       	ldi	r22, 0x02	; 2
    299a:	40 e0       	ldi	r20, 0x00	; 0
    299c:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN4, DIO_u8_LOW);
    29a0:	81 e0       	ldi	r24, 0x01	; 1
    29a2:	64 e0       	ldi	r22, 0x04	; 4
    29a4:	40 e0       	ldi	r20, 0x00	; 0
    29a6:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
    29aa:	f4 c1       	rjmp	.+1000   	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
			break;						 
			case 1:						 
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN0, DIO_u8_HIGH);
    29ac:	81 e0       	ldi	r24, 0x01	; 1
    29ae:	60 e0       	ldi	r22, 0x00	; 0
    29b0:	41 e0       	ldi	r20, 0x01	; 1
    29b2:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN1, DIO_u8_LOW);
    29b6:	81 e0       	ldi	r24, 0x01	; 1
    29b8:	61 e0       	ldi	r22, 0x01	; 1
    29ba:	40 e0       	ldi	r20, 0x00	; 0
    29bc:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN2, DIO_u8_LOW);
    29c0:	81 e0       	ldi	r24, 0x01	; 1
    29c2:	62 e0       	ldi	r22, 0x02	; 2
    29c4:	40 e0       	ldi	r20, 0x00	; 0
    29c6:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN4, DIO_u8_LOW);
    29ca:	81 e0       	ldi	r24, 0x01	; 1
    29cc:	64 e0       	ldi	r22, 0x04	; 4
    29ce:	40 e0       	ldi	r20, 0x00	; 0
    29d0:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
    29d4:	df c1       	rjmp	.+958    	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
			break;						  
			case 2:						  
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN0, DIO_u8_LOW);
    29d6:	81 e0       	ldi	r24, 0x01	; 1
    29d8:	60 e0       	ldi	r22, 0x00	; 0
    29da:	40 e0       	ldi	r20, 0x00	; 0
    29dc:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN1, DIO_u8_HIGH);
    29e0:	81 e0       	ldi	r24, 0x01	; 1
    29e2:	61 e0       	ldi	r22, 0x01	; 1
    29e4:	41 e0       	ldi	r20, 0x01	; 1
    29e6:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN2, DIO_u8_LOW);
    29ea:	81 e0       	ldi	r24, 0x01	; 1
    29ec:	62 e0       	ldi	r22, 0x02	; 2
    29ee:	40 e0       	ldi	r20, 0x00	; 0
    29f0:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN4, DIO_u8_LOW);
    29f4:	81 e0       	ldi	r24, 0x01	; 1
    29f6:	64 e0       	ldi	r22, 0x04	; 4
    29f8:	40 e0       	ldi	r20, 0x00	; 0
    29fa:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
    29fe:	ca c1       	rjmp	.+916    	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
			break;						 
			case 3:						 
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN0, DIO_u8_HIGH);
    2a00:	81 e0       	ldi	r24, 0x01	; 1
    2a02:	60 e0       	ldi	r22, 0x00	; 0
    2a04:	41 e0       	ldi	r20, 0x01	; 1
    2a06:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN1, DIO_u8_HIGH);
    2a0a:	81 e0       	ldi	r24, 0x01	; 1
    2a0c:	61 e0       	ldi	r22, 0x01	; 1
    2a0e:	41 e0       	ldi	r20, 0x01	; 1
    2a10:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN2, DIO_u8_LOW);
    2a14:	81 e0       	ldi	r24, 0x01	; 1
    2a16:	62 e0       	ldi	r22, 0x02	; 2
    2a18:	40 e0       	ldi	r20, 0x00	; 0
    2a1a:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN4, DIO_u8_LOW);
    2a1e:	81 e0       	ldi	r24, 0x01	; 1
    2a20:	64 e0       	ldi	r22, 0x04	; 4
    2a22:	40 e0       	ldi	r20, 0x00	; 0
    2a24:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
    2a28:	b5 c1       	rjmp	.+874    	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
			break;						  
			case 4:						  
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN0, DIO_u8_LOW);
    2a2a:	81 e0       	ldi	r24, 0x01	; 1
    2a2c:	60 e0       	ldi	r22, 0x00	; 0
    2a2e:	40 e0       	ldi	r20, 0x00	; 0
    2a30:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN1, DIO_u8_LOW);
    2a34:	81 e0       	ldi	r24, 0x01	; 1
    2a36:	61 e0       	ldi	r22, 0x01	; 1
    2a38:	40 e0       	ldi	r20, 0x00	; 0
    2a3a:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN2, DIO_u8_HIGH);
    2a3e:	81 e0       	ldi	r24, 0x01	; 1
    2a40:	62 e0       	ldi	r22, 0x02	; 2
    2a42:	41 e0       	ldi	r20, 0x01	; 1
    2a44:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN4, DIO_u8_LOW);
    2a48:	81 e0       	ldi	r24, 0x01	; 1
    2a4a:	64 e0       	ldi	r22, 0x04	; 4
    2a4c:	40 e0       	ldi	r20, 0x00	; 0
    2a4e:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
    2a52:	a0 c1       	rjmp	.+832    	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
			break;						 
			case 5:						 
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN0, DIO_u8_HIGH);
    2a54:	81 e0       	ldi	r24, 0x01	; 1
    2a56:	60 e0       	ldi	r22, 0x00	; 0
    2a58:	41 e0       	ldi	r20, 0x01	; 1
    2a5a:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN1, DIO_u8_LOW);
    2a5e:	81 e0       	ldi	r24, 0x01	; 1
    2a60:	61 e0       	ldi	r22, 0x01	; 1
    2a62:	40 e0       	ldi	r20, 0x00	; 0
    2a64:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN2, DIO_u8_HIGH);
    2a68:	81 e0       	ldi	r24, 0x01	; 1
    2a6a:	62 e0       	ldi	r22, 0x02	; 2
    2a6c:	41 e0       	ldi	r20, 0x01	; 1
    2a6e:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN4, DIO_u8_LOW);
    2a72:	81 e0       	ldi	r24, 0x01	; 1
    2a74:	64 e0       	ldi	r22, 0x04	; 4
    2a76:	40 e0       	ldi	r20, 0x00	; 0
    2a78:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
    2a7c:	8b c1       	rjmp	.+790    	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
			break;						  
			case 6:						  
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN0, DIO_u8_LOW);
    2a7e:	81 e0       	ldi	r24, 0x01	; 1
    2a80:	60 e0       	ldi	r22, 0x00	; 0
    2a82:	40 e0       	ldi	r20, 0x00	; 0
    2a84:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN1, DIO_u8_HIGH);
    2a88:	81 e0       	ldi	r24, 0x01	; 1
    2a8a:	61 e0       	ldi	r22, 0x01	; 1
    2a8c:	41 e0       	ldi	r20, 0x01	; 1
    2a8e:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN2, DIO_u8_HIGH);
    2a92:	81 e0       	ldi	r24, 0x01	; 1
    2a94:	62 e0       	ldi	r22, 0x02	; 2
    2a96:	41 e0       	ldi	r20, 0x01	; 1
    2a98:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN4, DIO_u8_LOW);
    2a9c:	81 e0       	ldi	r24, 0x01	; 1
    2a9e:	64 e0       	ldi	r22, 0x04	; 4
    2aa0:	40 e0       	ldi	r20, 0x00	; 0
    2aa2:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
    2aa6:	76 c1       	rjmp	.+748    	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
			break;						  
			case 7:						  
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN0, DIO_u8_HIGH);
    2aa8:	81 e0       	ldi	r24, 0x01	; 1
    2aaa:	60 e0       	ldi	r22, 0x00	; 0
    2aac:	41 e0       	ldi	r20, 0x01	; 1
    2aae:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN1, DIO_u8_HIGH);
    2ab2:	81 e0       	ldi	r24, 0x01	; 1
    2ab4:	61 e0       	ldi	r22, 0x01	; 1
    2ab6:	41 e0       	ldi	r20, 0x01	; 1
    2ab8:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN2, DIO_u8_HIGH);
    2abc:	81 e0       	ldi	r24, 0x01	; 1
    2abe:	62 e0       	ldi	r22, 0x02	; 2
    2ac0:	41 e0       	ldi	r20, 0x01	; 1
    2ac2:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN4, DIO_u8_LOW);
    2ac6:	81 e0       	ldi	r24, 0x01	; 1
    2ac8:	64 e0       	ldi	r22, 0x04	; 4
    2aca:	40 e0       	ldi	r20, 0x00	; 0
    2acc:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
    2ad0:	61 c1       	rjmp	.+706    	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
			break;						  
			case 8:						  
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN0, DIO_u8_LOW);
    2ad2:	81 e0       	ldi	r24, 0x01	; 1
    2ad4:	60 e0       	ldi	r22, 0x00	; 0
    2ad6:	40 e0       	ldi	r20, 0x00	; 0
    2ad8:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN1, DIO_u8_LOW);
    2adc:	81 e0       	ldi	r24, 0x01	; 1
    2ade:	61 e0       	ldi	r22, 0x01	; 1
    2ae0:	40 e0       	ldi	r20, 0x00	; 0
    2ae2:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN2, DIO_u8_LOW);
    2ae6:	81 e0       	ldi	r24, 0x01	; 1
    2ae8:	62 e0       	ldi	r22, 0x02	; 2
    2aea:	40 e0       	ldi	r20, 0x00	; 0
    2aec:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN4, DIO_u8_HIGH);
    2af0:	81 e0       	ldi	r24, 0x01	; 1
    2af2:	64 e0       	ldi	r22, 0x04	; 4
    2af4:	41 e0       	ldi	r20, 0x01	; 1
    2af6:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
    2afa:	4c c1       	rjmp	.+664    	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
			break;						  
			case 9:						  
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN0, DIO_u8_HIGH);
    2afc:	81 e0       	ldi	r24, 0x01	; 1
    2afe:	60 e0       	ldi	r22, 0x00	; 0
    2b00:	41 e0       	ldi	r20, 0x01	; 1
    2b02:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN1, DIO_u8_LOW);
    2b06:	81 e0       	ldi	r24, 0x01	; 1
    2b08:	61 e0       	ldi	r22, 0x01	; 1
    2b0a:	40 e0       	ldi	r20, 0x00	; 0
    2b0c:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN2, DIO_u8_LOW);
    2b10:	81 e0       	ldi	r24, 0x01	; 1
    2b12:	62 e0       	ldi	r22, 0x02	; 2
    2b14:	40 e0       	ldi	r20, 0x00	; 0
    2b16:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN4, DIO_u8_HIGH);
    2b1a:	81 e0       	ldi	r24, 0x01	; 1
    2b1c:	64 e0       	ldi	r22, 0x04	; 4
    2b1e:	41 e0       	ldi	r20, 0x01	; 1
    2b20:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
    2b24:	37 c1       	rjmp	.+622    	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
			default:
			break;
		}
		break;
		case THOUSANDS_T:
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN6, DIO_u8_HIGH);
    2b26:	81 e0       	ldi	r24, 0x01	; 1
    2b28:	66 e0       	ldi	r22, 0x06	; 6
    2b2a:	41 e0       	ldi	r20, 0x01	; 1
    2b2c:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN5, DIO_u8_LOW);
    2b30:	81 e0       	ldi	r24, 0x01	; 1
    2b32:	65 e0       	ldi	r22, 0x05	; 5
    2b34:	40 e0       	ldi	r20, 0x00	; 0
    2b36:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTA ,DIO_u8_PIN2, DIO_u8_LOW);
    2b3a:	80 e0       	ldi	r24, 0x00	; 0
    2b3c:	62 e0       	ldi	r22, 0x02	; 2
    2b3e:	40 e0       	ldi	r20, 0x00	; 0
    2b40:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTA ,DIO_u8_PIN3, DIO_u8_LOW);
    2b44:	80 e0       	ldi	r24, 0x00	; 0
    2b46:	63 e0       	ldi	r22, 0x03	; 3
    2b48:	40 e0       	ldi	r20, 0x00	; 0
    2b4a:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
		switch(Copy_u8Number)
    2b4e:	89 81       	ldd	r24, Y+1	; 0x01
    2b50:	28 2f       	mov	r18, r24
    2b52:	30 e0       	ldi	r19, 0x00	; 0
    2b54:	3c 83       	std	Y+4, r19	; 0x04
    2b56:	2b 83       	std	Y+3, r18	; 0x03
    2b58:	8b 81       	ldd	r24, Y+3	; 0x03
    2b5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b5c:	84 30       	cpi	r24, 0x04	; 4
    2b5e:	91 05       	cpc	r25, r1
    2b60:	09 f4       	brne	.+2      	; 0x2b64 <HSSD_voidDisplayDigitSSD+0x7ec>
    2b62:	9b c0       	rjmp	.+310    	; 0x2c9a <HSSD_voidDisplayDigitSSD+0x922>
    2b64:	2b 81       	ldd	r18, Y+3	; 0x03
    2b66:	3c 81       	ldd	r19, Y+4	; 0x04
    2b68:	25 30       	cpi	r18, 0x05	; 5
    2b6a:	31 05       	cpc	r19, r1
    2b6c:	ec f4       	brge	.+58     	; 0x2ba8 <HSSD_voidDisplayDigitSSD+0x830>
    2b6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b70:	9c 81       	ldd	r25, Y+4	; 0x04
    2b72:	81 30       	cpi	r24, 0x01	; 1
    2b74:	91 05       	cpc	r25, r1
    2b76:	09 f4       	brne	.+2      	; 0x2b7a <HSSD_voidDisplayDigitSSD+0x802>
    2b78:	51 c0       	rjmp	.+162    	; 0x2c1c <HSSD_voidDisplayDigitSSD+0x8a4>
    2b7a:	2b 81       	ldd	r18, Y+3	; 0x03
    2b7c:	3c 81       	ldd	r19, Y+4	; 0x04
    2b7e:	22 30       	cpi	r18, 0x02	; 2
    2b80:	31 05       	cpc	r19, r1
    2b82:	2c f4       	brge	.+10     	; 0x2b8e <HSSD_voidDisplayDigitSSD+0x816>
    2b84:	8b 81       	ldd	r24, Y+3	; 0x03
    2b86:	9c 81       	ldd	r25, Y+4	; 0x04
    2b88:	00 97       	sbiw	r24, 0x00	; 0
    2b8a:	99 f1       	breq	.+102    	; 0x2bf2 <HSSD_voidDisplayDigitSSD+0x87a>
    2b8c:	03 c1       	rjmp	.+518    	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
    2b8e:	2b 81       	ldd	r18, Y+3	; 0x03
    2b90:	3c 81       	ldd	r19, Y+4	; 0x04
    2b92:	22 30       	cpi	r18, 0x02	; 2
    2b94:	31 05       	cpc	r19, r1
    2b96:	09 f4       	brne	.+2      	; 0x2b9a <HSSD_voidDisplayDigitSSD+0x822>
    2b98:	56 c0       	rjmp	.+172    	; 0x2c46 <HSSD_voidDisplayDigitSSD+0x8ce>
    2b9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b9c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b9e:	83 30       	cpi	r24, 0x03	; 3
    2ba0:	91 05       	cpc	r25, r1
    2ba2:	09 f4       	brne	.+2      	; 0x2ba6 <HSSD_voidDisplayDigitSSD+0x82e>
    2ba4:	65 c0       	rjmp	.+202    	; 0x2c70 <HSSD_voidDisplayDigitSSD+0x8f8>
    2ba6:	f6 c0       	rjmp	.+492    	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
    2ba8:	2b 81       	ldd	r18, Y+3	; 0x03
    2baa:	3c 81       	ldd	r19, Y+4	; 0x04
    2bac:	27 30       	cpi	r18, 0x07	; 7
    2bae:	31 05       	cpc	r19, r1
    2bb0:	09 f4       	brne	.+2      	; 0x2bb4 <HSSD_voidDisplayDigitSSD+0x83c>
    2bb2:	b2 c0       	rjmp	.+356    	; 0x2d18 <HSSD_voidDisplayDigitSSD+0x9a0>
    2bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb6:	9c 81       	ldd	r25, Y+4	; 0x04
    2bb8:	88 30       	cpi	r24, 0x08	; 8
    2bba:	91 05       	cpc	r25, r1
    2bbc:	6c f4       	brge	.+26     	; 0x2bd8 <HSSD_voidDisplayDigitSSD+0x860>
    2bbe:	2b 81       	ldd	r18, Y+3	; 0x03
    2bc0:	3c 81       	ldd	r19, Y+4	; 0x04
    2bc2:	25 30       	cpi	r18, 0x05	; 5
    2bc4:	31 05       	cpc	r19, r1
    2bc6:	09 f4       	brne	.+2      	; 0x2bca <HSSD_voidDisplayDigitSSD+0x852>
    2bc8:	7d c0       	rjmp	.+250    	; 0x2cc4 <HSSD_voidDisplayDigitSSD+0x94c>
    2bca:	8b 81       	ldd	r24, Y+3	; 0x03
    2bcc:	9c 81       	ldd	r25, Y+4	; 0x04
    2bce:	86 30       	cpi	r24, 0x06	; 6
    2bd0:	91 05       	cpc	r25, r1
    2bd2:	09 f4       	brne	.+2      	; 0x2bd6 <HSSD_voidDisplayDigitSSD+0x85e>
    2bd4:	8c c0       	rjmp	.+280    	; 0x2cee <HSSD_voidDisplayDigitSSD+0x976>
    2bd6:	de c0       	rjmp	.+444    	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
    2bd8:	2b 81       	ldd	r18, Y+3	; 0x03
    2bda:	3c 81       	ldd	r19, Y+4	; 0x04
    2bdc:	28 30       	cpi	r18, 0x08	; 8
    2bde:	31 05       	cpc	r19, r1
    2be0:	09 f4       	brne	.+2      	; 0x2be4 <HSSD_voidDisplayDigitSSD+0x86c>
    2be2:	af c0       	rjmp	.+350    	; 0x2d42 <HSSD_voidDisplayDigitSSD+0x9ca>
    2be4:	8b 81       	ldd	r24, Y+3	; 0x03
    2be6:	9c 81       	ldd	r25, Y+4	; 0x04
    2be8:	89 30       	cpi	r24, 0x09	; 9
    2bea:	91 05       	cpc	r25, r1
    2bec:	09 f4       	brne	.+2      	; 0x2bf0 <HSSD_voidDisplayDigitSSD+0x878>
    2bee:	be c0       	rjmp	.+380    	; 0x2d6c <HSSD_voidDisplayDigitSSD+0x9f4>
    2bf0:	d1 c0       	rjmp	.+418    	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
		{
			case 0:
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN0, DIO_u8_LOW);
    2bf2:	81 e0       	ldi	r24, 0x01	; 1
    2bf4:	60 e0       	ldi	r22, 0x00	; 0
    2bf6:	40 e0       	ldi	r20, 0x00	; 0
    2bf8:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN1, DIO_u8_LOW);
    2bfc:	81 e0       	ldi	r24, 0x01	; 1
    2bfe:	61 e0       	ldi	r22, 0x01	; 1
    2c00:	40 e0       	ldi	r20, 0x00	; 0
    2c02:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN2, DIO_u8_LOW);
    2c06:	81 e0       	ldi	r24, 0x01	; 1
    2c08:	62 e0       	ldi	r22, 0x02	; 2
    2c0a:	40 e0       	ldi	r20, 0x00	; 0
    2c0c:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN4, DIO_u8_LOW);
    2c10:	81 e0       	ldi	r24, 0x01	; 1
    2c12:	64 e0       	ldi	r22, 0x04	; 4
    2c14:	40 e0       	ldi	r20, 0x00	; 0
    2c16:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
    2c1a:	bc c0       	rjmp	.+376    	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
			break;						 
			case 1:						 
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN0, DIO_u8_HIGH);
    2c1c:	81 e0       	ldi	r24, 0x01	; 1
    2c1e:	60 e0       	ldi	r22, 0x00	; 0
    2c20:	41 e0       	ldi	r20, 0x01	; 1
    2c22:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN1, DIO_u8_LOW);
    2c26:	81 e0       	ldi	r24, 0x01	; 1
    2c28:	61 e0       	ldi	r22, 0x01	; 1
    2c2a:	40 e0       	ldi	r20, 0x00	; 0
    2c2c:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN2, DIO_u8_LOW);
    2c30:	81 e0       	ldi	r24, 0x01	; 1
    2c32:	62 e0       	ldi	r22, 0x02	; 2
    2c34:	40 e0       	ldi	r20, 0x00	; 0
    2c36:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN4, DIO_u8_LOW);
    2c3a:	81 e0       	ldi	r24, 0x01	; 1
    2c3c:	64 e0       	ldi	r22, 0x04	; 4
    2c3e:	40 e0       	ldi	r20, 0x00	; 0
    2c40:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
    2c44:	a7 c0       	rjmp	.+334    	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
			break;						  
			case 2:						  
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN0, DIO_u8_LOW);
    2c46:	81 e0       	ldi	r24, 0x01	; 1
    2c48:	60 e0       	ldi	r22, 0x00	; 0
    2c4a:	40 e0       	ldi	r20, 0x00	; 0
    2c4c:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN1, DIO_u8_HIGH);
    2c50:	81 e0       	ldi	r24, 0x01	; 1
    2c52:	61 e0       	ldi	r22, 0x01	; 1
    2c54:	41 e0       	ldi	r20, 0x01	; 1
    2c56:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN2, DIO_u8_LOW);
    2c5a:	81 e0       	ldi	r24, 0x01	; 1
    2c5c:	62 e0       	ldi	r22, 0x02	; 2
    2c5e:	40 e0       	ldi	r20, 0x00	; 0
    2c60:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN4, DIO_u8_LOW);
    2c64:	81 e0       	ldi	r24, 0x01	; 1
    2c66:	64 e0       	ldi	r22, 0x04	; 4
    2c68:	40 e0       	ldi	r20, 0x00	; 0
    2c6a:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
    2c6e:	92 c0       	rjmp	.+292    	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
			break;						 
			case 3:						 
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN0, DIO_u8_HIGH);
    2c70:	81 e0       	ldi	r24, 0x01	; 1
    2c72:	60 e0       	ldi	r22, 0x00	; 0
    2c74:	41 e0       	ldi	r20, 0x01	; 1
    2c76:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN1, DIO_u8_HIGH);
    2c7a:	81 e0       	ldi	r24, 0x01	; 1
    2c7c:	61 e0       	ldi	r22, 0x01	; 1
    2c7e:	41 e0       	ldi	r20, 0x01	; 1
    2c80:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN2, DIO_u8_LOW);
    2c84:	81 e0       	ldi	r24, 0x01	; 1
    2c86:	62 e0       	ldi	r22, 0x02	; 2
    2c88:	40 e0       	ldi	r20, 0x00	; 0
    2c8a:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN4, DIO_u8_LOW);
    2c8e:	81 e0       	ldi	r24, 0x01	; 1
    2c90:	64 e0       	ldi	r22, 0x04	; 4
    2c92:	40 e0       	ldi	r20, 0x00	; 0
    2c94:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
    2c98:	7d c0       	rjmp	.+250    	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
			break;						  
			case 4:						  
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN0, DIO_u8_LOW);
    2c9a:	81 e0       	ldi	r24, 0x01	; 1
    2c9c:	60 e0       	ldi	r22, 0x00	; 0
    2c9e:	40 e0       	ldi	r20, 0x00	; 0
    2ca0:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN1, DIO_u8_LOW);
    2ca4:	81 e0       	ldi	r24, 0x01	; 1
    2ca6:	61 e0       	ldi	r22, 0x01	; 1
    2ca8:	40 e0       	ldi	r20, 0x00	; 0
    2caa:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN2, DIO_u8_HIGH);
    2cae:	81 e0       	ldi	r24, 0x01	; 1
    2cb0:	62 e0       	ldi	r22, 0x02	; 2
    2cb2:	41 e0       	ldi	r20, 0x01	; 1
    2cb4:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN4, DIO_u8_LOW);
    2cb8:	81 e0       	ldi	r24, 0x01	; 1
    2cba:	64 e0       	ldi	r22, 0x04	; 4
    2cbc:	40 e0       	ldi	r20, 0x00	; 0
    2cbe:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
    2cc2:	68 c0       	rjmp	.+208    	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
			break;						 
			case 5:						 
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN0, DIO_u8_HIGH);
    2cc4:	81 e0       	ldi	r24, 0x01	; 1
    2cc6:	60 e0       	ldi	r22, 0x00	; 0
    2cc8:	41 e0       	ldi	r20, 0x01	; 1
    2cca:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN1, DIO_u8_LOW);
    2cce:	81 e0       	ldi	r24, 0x01	; 1
    2cd0:	61 e0       	ldi	r22, 0x01	; 1
    2cd2:	40 e0       	ldi	r20, 0x00	; 0
    2cd4:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN2, DIO_u8_HIGH);
    2cd8:	81 e0       	ldi	r24, 0x01	; 1
    2cda:	62 e0       	ldi	r22, 0x02	; 2
    2cdc:	41 e0       	ldi	r20, 0x01	; 1
    2cde:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN4, DIO_u8_LOW);
    2ce2:	81 e0       	ldi	r24, 0x01	; 1
    2ce4:	64 e0       	ldi	r22, 0x04	; 4
    2ce6:	40 e0       	ldi	r20, 0x00	; 0
    2ce8:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
    2cec:	53 c0       	rjmp	.+166    	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
			break;						  
			case 6:						  
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN0, DIO_u8_LOW);
    2cee:	81 e0       	ldi	r24, 0x01	; 1
    2cf0:	60 e0       	ldi	r22, 0x00	; 0
    2cf2:	40 e0       	ldi	r20, 0x00	; 0
    2cf4:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN1, DIO_u8_HIGH);
    2cf8:	81 e0       	ldi	r24, 0x01	; 1
    2cfa:	61 e0       	ldi	r22, 0x01	; 1
    2cfc:	41 e0       	ldi	r20, 0x01	; 1
    2cfe:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN2, DIO_u8_HIGH);
    2d02:	81 e0       	ldi	r24, 0x01	; 1
    2d04:	62 e0       	ldi	r22, 0x02	; 2
    2d06:	41 e0       	ldi	r20, 0x01	; 1
    2d08:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN4, DIO_u8_LOW);
    2d0c:	81 e0       	ldi	r24, 0x01	; 1
    2d0e:	64 e0       	ldi	r22, 0x04	; 4
    2d10:	40 e0       	ldi	r20, 0x00	; 0
    2d12:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
    2d16:	3e c0       	rjmp	.+124    	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
			break;						  
			case 7:						  
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN0, DIO_u8_HIGH);
    2d18:	81 e0       	ldi	r24, 0x01	; 1
    2d1a:	60 e0       	ldi	r22, 0x00	; 0
    2d1c:	41 e0       	ldi	r20, 0x01	; 1
    2d1e:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN1, DIO_u8_HIGH);
    2d22:	81 e0       	ldi	r24, 0x01	; 1
    2d24:	61 e0       	ldi	r22, 0x01	; 1
    2d26:	41 e0       	ldi	r20, 0x01	; 1
    2d28:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN2, DIO_u8_HIGH);
    2d2c:	81 e0       	ldi	r24, 0x01	; 1
    2d2e:	62 e0       	ldi	r22, 0x02	; 2
    2d30:	41 e0       	ldi	r20, 0x01	; 1
    2d32:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN4, DIO_u8_LOW);
    2d36:	81 e0       	ldi	r24, 0x01	; 1
    2d38:	64 e0       	ldi	r22, 0x04	; 4
    2d3a:	40 e0       	ldi	r20, 0x00	; 0
    2d3c:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
    2d40:	29 c0       	rjmp	.+82     	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
			break;						  
			case 8:						  
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN0, DIO_u8_LOW);
    2d42:	81 e0       	ldi	r24, 0x01	; 1
    2d44:	60 e0       	ldi	r22, 0x00	; 0
    2d46:	40 e0       	ldi	r20, 0x00	; 0
    2d48:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN1, DIO_u8_LOW);
    2d4c:	81 e0       	ldi	r24, 0x01	; 1
    2d4e:	61 e0       	ldi	r22, 0x01	; 1
    2d50:	40 e0       	ldi	r20, 0x00	; 0
    2d52:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN2, DIO_u8_LOW);
    2d56:	81 e0       	ldi	r24, 0x01	; 1
    2d58:	62 e0       	ldi	r22, 0x02	; 2
    2d5a:	40 e0       	ldi	r20, 0x00	; 0
    2d5c:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN4, DIO_u8_HIGH);
    2d60:	81 e0       	ldi	r24, 0x01	; 1
    2d62:	64 e0       	ldi	r22, 0x04	; 4
    2d64:	41 e0       	ldi	r20, 0x01	; 1
    2d66:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
    2d6a:	14 c0       	rjmp	.+40     	; 0x2d94 <HSSD_voidDisplayDigitSSD+0xa1c>
			break;						  
			case 9:						  
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN0, DIO_u8_HIGH);
    2d6c:	81 e0       	ldi	r24, 0x01	; 1
    2d6e:	60 e0       	ldi	r22, 0x00	; 0
    2d70:	41 e0       	ldi	r20, 0x01	; 1
    2d72:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN1, DIO_u8_LOW);
    2d76:	81 e0       	ldi	r24, 0x01	; 1
    2d78:	61 e0       	ldi	r22, 0x01	; 1
    2d7a:	40 e0       	ldi	r20, 0x00	; 0
    2d7c:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN2, DIO_u8_LOW);
    2d80:	81 e0       	ldi	r24, 0x01	; 1
    2d82:	62 e0       	ldi	r22, 0x02	; 2
    2d84:	40 e0       	ldi	r20, 0x00	; 0
    2d86:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN4, DIO_u8_HIGH);
    2d8a:	81 e0       	ldi	r24, 0x01	; 1
    2d8c:	64 e0       	ldi	r22, 0x04	; 4
    2d8e:	41 e0       	ldi	r20, 0x01	; 1
    2d90:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
		}
		break;
		default:
		break;
	}
}
    2d94:	2c 96       	adiw	r28, 0x0c	; 12
    2d96:	0f b6       	in	r0, 0x3f	; 63
    2d98:	f8 94       	cli
    2d9a:	de bf       	out	0x3e, r29	; 62
    2d9c:	0f be       	out	0x3f, r0	; 63
    2d9e:	cd bf       	out	0x3d, r28	; 61
    2da0:	cf 91       	pop	r28
    2da2:	df 91       	pop	r29
    2da4:	08 95       	ret

00002da6 <HSSD_voidDisplaySSD>:

void HSSD_voidDisplaySSD(u16 Copy_u16FullNumber)
{
    2da6:	df 93       	push	r29
    2da8:	cf 93       	push	r28
    2daa:	cd b7       	in	r28, 0x3d	; 61
    2dac:	de b7       	in	r29, 0x3e	; 62
    2dae:	ef 97       	sbiw	r28, 0x3f	; 63
    2db0:	0f b6       	in	r0, 0x3f	; 63
    2db2:	f8 94       	cli
    2db4:	de bf       	out	0x3e, r29	; 62
    2db6:	0f be       	out	0x3f, r0	; 63
    2db8:	cd bf       	out	0x3d, r28	; 61
    2dba:	9f af       	std	Y+63, r25	; 0x3f
    2dbc:	8e af       	std	Y+62, r24	; 0x3e
	for(u8 Local_u8Counter = 0 ; Local_u8Counter < 5 ; Local_u8Counter++)
    2dbe:	1d ae       	std	Y+61, r1	; 0x3d
    2dc0:	08 c2       	rjmp	.+1040   	; 0x31d2 <HSSD_voidDisplaySSD+0x42c>
	{
		u8 Local_u8NumberThousands= Copy_u16FullNumber / 1000;
    2dc2:	8e ad       	ldd	r24, Y+62	; 0x3e
    2dc4:	9f ad       	ldd	r25, Y+63	; 0x3f
    2dc6:	28 ee       	ldi	r18, 0xE8	; 232
    2dc8:	33 e0       	ldi	r19, 0x03	; 3
    2dca:	b9 01       	movw	r22, r18
    2dcc:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <__udivmodhi4>
    2dd0:	cb 01       	movw	r24, r22
    2dd2:	8c af       	std	Y+60, r24	; 0x3c
		u8 Local_u8NumberHundreds= (Copy_u16FullNumber / 100) % 10;
    2dd4:	8e ad       	ldd	r24, Y+62	; 0x3e
    2dd6:	9f ad       	ldd	r25, Y+63	; 0x3f
    2dd8:	24 e6       	ldi	r18, 0x64	; 100
    2dda:	30 e0       	ldi	r19, 0x00	; 0
    2ddc:	b9 01       	movw	r22, r18
    2dde:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <__udivmodhi4>
    2de2:	cb 01       	movw	r24, r22
    2de4:	2a e0       	ldi	r18, 0x0A	; 10
    2de6:	30 e0       	ldi	r19, 0x00	; 0
    2de8:	b9 01       	movw	r22, r18
    2dea:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <__udivmodhi4>
    2dee:	8b af       	std	Y+59, r24	; 0x3b
		u8 Local_u8NumberTens= (Copy_u16FullNumber / 10) % 10;
    2df0:	8e ad       	ldd	r24, Y+62	; 0x3e
    2df2:	9f ad       	ldd	r25, Y+63	; 0x3f
    2df4:	2a e0       	ldi	r18, 0x0A	; 10
    2df6:	30 e0       	ldi	r19, 0x00	; 0
    2df8:	b9 01       	movw	r22, r18
    2dfa:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <__udivmodhi4>
    2dfe:	cb 01       	movw	r24, r22
    2e00:	2a e0       	ldi	r18, 0x0A	; 10
    2e02:	30 e0       	ldi	r19, 0x00	; 0
    2e04:	b9 01       	movw	r22, r18
    2e06:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <__udivmodhi4>
    2e0a:	8a af       	std	Y+58, r24	; 0x3a
		u8 Local_u8NumberOnes= Copy_u16FullNumber % 10;
    2e0c:	8e ad       	ldd	r24, Y+62	; 0x3e
    2e0e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e10:	2a e0       	ldi	r18, 0x0A	; 10
    2e12:	30 e0       	ldi	r19, 0x00	; 0
    2e14:	b9 01       	movw	r22, r18
    2e16:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <__udivmodhi4>
    2e1a:	89 af       	std	Y+57, r24	; 0x39

		HSSD_voidDisplayDigitSSD(Local_u8NumberThousands,THOUSANDS_T);
    2e1c:	8c ad       	ldd	r24, Y+60	; 0x3c
    2e1e:	64 e0       	ldi	r22, 0x04	; 4
    2e20:	0e 94 bc 11 	call	0x2378	; 0x2378 <HSSD_voidDisplayDigitSSD>
    2e24:	80 e0       	ldi	r24, 0x00	; 0
    2e26:	90 e0       	ldi	r25, 0x00	; 0
    2e28:	a0 e8       	ldi	r26, 0x80	; 128
    2e2a:	bf e3       	ldi	r27, 0x3F	; 63
    2e2c:	8d ab       	std	Y+53, r24	; 0x35
    2e2e:	9e ab       	std	Y+54, r25	; 0x36
    2e30:	af ab       	std	Y+55, r26	; 0x37
    2e32:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e34:	6d a9       	ldd	r22, Y+53	; 0x35
    2e36:	7e a9       	ldd	r23, Y+54	; 0x36
    2e38:	8f a9       	ldd	r24, Y+55	; 0x37
    2e3a:	98 ad       	ldd	r25, Y+56	; 0x38
    2e3c:	20 e0       	ldi	r18, 0x00	; 0
    2e3e:	30 e0       	ldi	r19, 0x00	; 0
    2e40:	4a ef       	ldi	r20, 0xFA	; 250
    2e42:	54 e4       	ldi	r21, 0x44	; 68
    2e44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e48:	dc 01       	movw	r26, r24
    2e4a:	cb 01       	movw	r24, r22
    2e4c:	89 ab       	std	Y+49, r24	; 0x31
    2e4e:	9a ab       	std	Y+50, r25	; 0x32
    2e50:	ab ab       	std	Y+51, r26	; 0x33
    2e52:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2e54:	69 a9       	ldd	r22, Y+49	; 0x31
    2e56:	7a a9       	ldd	r23, Y+50	; 0x32
    2e58:	8b a9       	ldd	r24, Y+51	; 0x33
    2e5a:	9c a9       	ldd	r25, Y+52	; 0x34
    2e5c:	20 e0       	ldi	r18, 0x00	; 0
    2e5e:	30 e0       	ldi	r19, 0x00	; 0
    2e60:	40 e8       	ldi	r20, 0x80	; 128
    2e62:	5f e3       	ldi	r21, 0x3F	; 63
    2e64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e68:	88 23       	and	r24, r24
    2e6a:	2c f4       	brge	.+10     	; 0x2e76 <HSSD_voidDisplaySSD+0xd0>
		__ticks = 1;
    2e6c:	81 e0       	ldi	r24, 0x01	; 1
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	98 ab       	std	Y+48, r25	; 0x30
    2e72:	8f a7       	std	Y+47, r24	; 0x2f
    2e74:	3f c0       	rjmp	.+126    	; 0x2ef4 <HSSD_voidDisplaySSD+0x14e>
	else if (__tmp > 65535)
    2e76:	69 a9       	ldd	r22, Y+49	; 0x31
    2e78:	7a a9       	ldd	r23, Y+50	; 0x32
    2e7a:	8b a9       	ldd	r24, Y+51	; 0x33
    2e7c:	9c a9       	ldd	r25, Y+52	; 0x34
    2e7e:	20 e0       	ldi	r18, 0x00	; 0
    2e80:	3f ef       	ldi	r19, 0xFF	; 255
    2e82:	4f e7       	ldi	r20, 0x7F	; 127
    2e84:	57 e4       	ldi	r21, 0x47	; 71
    2e86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e8a:	18 16       	cp	r1, r24
    2e8c:	4c f5       	brge	.+82     	; 0x2ee0 <HSSD_voidDisplaySSD+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e8e:	6d a9       	ldd	r22, Y+53	; 0x35
    2e90:	7e a9       	ldd	r23, Y+54	; 0x36
    2e92:	8f a9       	ldd	r24, Y+55	; 0x37
    2e94:	98 ad       	ldd	r25, Y+56	; 0x38
    2e96:	20 e0       	ldi	r18, 0x00	; 0
    2e98:	30 e0       	ldi	r19, 0x00	; 0
    2e9a:	40 e2       	ldi	r20, 0x20	; 32
    2e9c:	51 e4       	ldi	r21, 0x41	; 65
    2e9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ea2:	dc 01       	movw	r26, r24
    2ea4:	cb 01       	movw	r24, r22
    2ea6:	bc 01       	movw	r22, r24
    2ea8:	cd 01       	movw	r24, r26
    2eaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eae:	dc 01       	movw	r26, r24
    2eb0:	cb 01       	movw	r24, r22
    2eb2:	98 ab       	std	Y+48, r25	; 0x30
    2eb4:	8f a7       	std	Y+47, r24	; 0x2f
    2eb6:	0f c0       	rjmp	.+30     	; 0x2ed6 <HSSD_voidDisplaySSD+0x130>
    2eb8:	88 ec       	ldi	r24, 0xC8	; 200
    2eba:	90 e0       	ldi	r25, 0x00	; 0
    2ebc:	9e a7       	std	Y+46, r25	; 0x2e
    2ebe:	8d a7       	std	Y+45, r24	; 0x2d
    2ec0:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ec2:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ec4:	01 97       	sbiw	r24, 0x01	; 1
    2ec6:	f1 f7       	brne	.-4      	; 0x2ec4 <HSSD_voidDisplaySSD+0x11e>
    2ec8:	9e a7       	std	Y+46, r25	; 0x2e
    2eca:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ecc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ece:	98 a9       	ldd	r25, Y+48	; 0x30
    2ed0:	01 97       	sbiw	r24, 0x01	; 1
    2ed2:	98 ab       	std	Y+48, r25	; 0x30
    2ed4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ed6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ed8:	98 a9       	ldd	r25, Y+48	; 0x30
    2eda:	00 97       	sbiw	r24, 0x00	; 0
    2edc:	69 f7       	brne	.-38     	; 0x2eb8 <HSSD_voidDisplaySSD+0x112>
    2ede:	14 c0       	rjmp	.+40     	; 0x2f08 <HSSD_voidDisplaySSD+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ee0:	69 a9       	ldd	r22, Y+49	; 0x31
    2ee2:	7a a9       	ldd	r23, Y+50	; 0x32
    2ee4:	8b a9       	ldd	r24, Y+51	; 0x33
    2ee6:	9c a9       	ldd	r25, Y+52	; 0x34
    2ee8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eec:	dc 01       	movw	r26, r24
    2eee:	cb 01       	movw	r24, r22
    2ef0:	98 ab       	std	Y+48, r25	; 0x30
    2ef2:	8f a7       	std	Y+47, r24	; 0x2f
    2ef4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ef6:	98 a9       	ldd	r25, Y+48	; 0x30
    2ef8:	9c a7       	std	Y+44, r25	; 0x2c
    2efa:	8b a7       	std	Y+43, r24	; 0x2b
    2efc:	8b a5       	ldd	r24, Y+43	; 0x2b
    2efe:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f00:	01 97       	sbiw	r24, 0x01	; 1
    2f02:	f1 f7       	brne	.-4      	; 0x2f00 <HSSD_voidDisplaySSD+0x15a>
    2f04:	9c a7       	std	Y+44, r25	; 0x2c
    2f06:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);
		HSSD_voidDisplayDigitSSD(Local_u8NumberHundreds,HUNDREDS_T);
    2f08:	8b ad       	ldd	r24, Y+59	; 0x3b
    2f0a:	63 e0       	ldi	r22, 0x03	; 3
    2f0c:	0e 94 bc 11 	call	0x2378	; 0x2378 <HSSD_voidDisplayDigitSSD>
    2f10:	80 e0       	ldi	r24, 0x00	; 0
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	a0 e8       	ldi	r26, 0x80	; 128
    2f16:	bf e3       	ldi	r27, 0x3F	; 63
    2f18:	8f a3       	std	Y+39, r24	; 0x27
    2f1a:	98 a7       	std	Y+40, r25	; 0x28
    2f1c:	a9 a7       	std	Y+41, r26	; 0x29
    2f1e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f20:	6f a1       	ldd	r22, Y+39	; 0x27
    2f22:	78 a5       	ldd	r23, Y+40	; 0x28
    2f24:	89 a5       	ldd	r24, Y+41	; 0x29
    2f26:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f28:	20 e0       	ldi	r18, 0x00	; 0
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	4a ef       	ldi	r20, 0xFA	; 250
    2f2e:	54 e4       	ldi	r21, 0x44	; 68
    2f30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f34:	dc 01       	movw	r26, r24
    2f36:	cb 01       	movw	r24, r22
    2f38:	8b a3       	std	Y+35, r24	; 0x23
    2f3a:	9c a3       	std	Y+36, r25	; 0x24
    2f3c:	ad a3       	std	Y+37, r26	; 0x25
    2f3e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2f40:	6b a1       	ldd	r22, Y+35	; 0x23
    2f42:	7c a1       	ldd	r23, Y+36	; 0x24
    2f44:	8d a1       	ldd	r24, Y+37	; 0x25
    2f46:	9e a1       	ldd	r25, Y+38	; 0x26
    2f48:	20 e0       	ldi	r18, 0x00	; 0
    2f4a:	30 e0       	ldi	r19, 0x00	; 0
    2f4c:	40 e8       	ldi	r20, 0x80	; 128
    2f4e:	5f e3       	ldi	r21, 0x3F	; 63
    2f50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f54:	88 23       	and	r24, r24
    2f56:	2c f4       	brge	.+10     	; 0x2f62 <HSSD_voidDisplaySSD+0x1bc>
		__ticks = 1;
    2f58:	81 e0       	ldi	r24, 0x01	; 1
    2f5a:	90 e0       	ldi	r25, 0x00	; 0
    2f5c:	9a a3       	std	Y+34, r25	; 0x22
    2f5e:	89 a3       	std	Y+33, r24	; 0x21
    2f60:	3f c0       	rjmp	.+126    	; 0x2fe0 <HSSD_voidDisplaySSD+0x23a>
	else if (__tmp > 65535)
    2f62:	6b a1       	ldd	r22, Y+35	; 0x23
    2f64:	7c a1       	ldd	r23, Y+36	; 0x24
    2f66:	8d a1       	ldd	r24, Y+37	; 0x25
    2f68:	9e a1       	ldd	r25, Y+38	; 0x26
    2f6a:	20 e0       	ldi	r18, 0x00	; 0
    2f6c:	3f ef       	ldi	r19, 0xFF	; 255
    2f6e:	4f e7       	ldi	r20, 0x7F	; 127
    2f70:	57 e4       	ldi	r21, 0x47	; 71
    2f72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f76:	18 16       	cp	r1, r24
    2f78:	4c f5       	brge	.+82     	; 0x2fcc <HSSD_voidDisplaySSD+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f7a:	6f a1       	ldd	r22, Y+39	; 0x27
    2f7c:	78 a5       	ldd	r23, Y+40	; 0x28
    2f7e:	89 a5       	ldd	r24, Y+41	; 0x29
    2f80:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f82:	20 e0       	ldi	r18, 0x00	; 0
    2f84:	30 e0       	ldi	r19, 0x00	; 0
    2f86:	40 e2       	ldi	r20, 0x20	; 32
    2f88:	51 e4       	ldi	r21, 0x41	; 65
    2f8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f8e:	dc 01       	movw	r26, r24
    2f90:	cb 01       	movw	r24, r22
    2f92:	bc 01       	movw	r22, r24
    2f94:	cd 01       	movw	r24, r26
    2f96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f9a:	dc 01       	movw	r26, r24
    2f9c:	cb 01       	movw	r24, r22
    2f9e:	9a a3       	std	Y+34, r25	; 0x22
    2fa0:	89 a3       	std	Y+33, r24	; 0x21
    2fa2:	0f c0       	rjmp	.+30     	; 0x2fc2 <HSSD_voidDisplaySSD+0x21c>
    2fa4:	88 ec       	ldi	r24, 0xC8	; 200
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	98 a3       	std	Y+32, r25	; 0x20
    2faa:	8f 8f       	std	Y+31, r24	; 0x1f
    2fac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2fae:	98 a1       	ldd	r25, Y+32	; 0x20
    2fb0:	01 97       	sbiw	r24, 0x01	; 1
    2fb2:	f1 f7       	brne	.-4      	; 0x2fb0 <HSSD_voidDisplaySSD+0x20a>
    2fb4:	98 a3       	std	Y+32, r25	; 0x20
    2fb6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fb8:	89 a1       	ldd	r24, Y+33	; 0x21
    2fba:	9a a1       	ldd	r25, Y+34	; 0x22
    2fbc:	01 97       	sbiw	r24, 0x01	; 1
    2fbe:	9a a3       	std	Y+34, r25	; 0x22
    2fc0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fc2:	89 a1       	ldd	r24, Y+33	; 0x21
    2fc4:	9a a1       	ldd	r25, Y+34	; 0x22
    2fc6:	00 97       	sbiw	r24, 0x00	; 0
    2fc8:	69 f7       	brne	.-38     	; 0x2fa4 <HSSD_voidDisplaySSD+0x1fe>
    2fca:	14 c0       	rjmp	.+40     	; 0x2ff4 <HSSD_voidDisplaySSD+0x24e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fcc:	6b a1       	ldd	r22, Y+35	; 0x23
    2fce:	7c a1       	ldd	r23, Y+36	; 0x24
    2fd0:	8d a1       	ldd	r24, Y+37	; 0x25
    2fd2:	9e a1       	ldd	r25, Y+38	; 0x26
    2fd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd8:	dc 01       	movw	r26, r24
    2fda:	cb 01       	movw	r24, r22
    2fdc:	9a a3       	std	Y+34, r25	; 0x22
    2fde:	89 a3       	std	Y+33, r24	; 0x21
    2fe0:	89 a1       	ldd	r24, Y+33	; 0x21
    2fe2:	9a a1       	ldd	r25, Y+34	; 0x22
    2fe4:	9e 8f       	std	Y+30, r25	; 0x1e
    2fe6:	8d 8f       	std	Y+29, r24	; 0x1d
    2fe8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2fec:	01 97       	sbiw	r24, 0x01	; 1
    2fee:	f1 f7       	brne	.-4      	; 0x2fec <HSSD_voidDisplaySSD+0x246>
    2ff0:	9e 8f       	std	Y+30, r25	; 0x1e
    2ff2:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		HSSD_voidDisplayDigitSSD(Local_u8NumberTens,TENS_T);
    2ff4:	8a ad       	ldd	r24, Y+58	; 0x3a
    2ff6:	62 e0       	ldi	r22, 0x02	; 2
    2ff8:	0e 94 bc 11 	call	0x2378	; 0x2378 <HSSD_voidDisplayDigitSSD>
    2ffc:	80 e0       	ldi	r24, 0x00	; 0
    2ffe:	90 e0       	ldi	r25, 0x00	; 0
    3000:	a0 e8       	ldi	r26, 0x80	; 128
    3002:	bf e3       	ldi	r27, 0x3F	; 63
    3004:	89 8f       	std	Y+25, r24	; 0x19
    3006:	9a 8f       	std	Y+26, r25	; 0x1a
    3008:	ab 8f       	std	Y+27, r26	; 0x1b
    300a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    300c:	69 8d       	ldd	r22, Y+25	; 0x19
    300e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3010:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3012:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3014:	20 e0       	ldi	r18, 0x00	; 0
    3016:	30 e0       	ldi	r19, 0x00	; 0
    3018:	4a ef       	ldi	r20, 0xFA	; 250
    301a:	54 e4       	ldi	r21, 0x44	; 68
    301c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3020:	dc 01       	movw	r26, r24
    3022:	cb 01       	movw	r24, r22
    3024:	8d 8b       	std	Y+21, r24	; 0x15
    3026:	9e 8b       	std	Y+22, r25	; 0x16
    3028:	af 8b       	std	Y+23, r26	; 0x17
    302a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    302c:	6d 89       	ldd	r22, Y+21	; 0x15
    302e:	7e 89       	ldd	r23, Y+22	; 0x16
    3030:	8f 89       	ldd	r24, Y+23	; 0x17
    3032:	98 8d       	ldd	r25, Y+24	; 0x18
    3034:	20 e0       	ldi	r18, 0x00	; 0
    3036:	30 e0       	ldi	r19, 0x00	; 0
    3038:	40 e8       	ldi	r20, 0x80	; 128
    303a:	5f e3       	ldi	r21, 0x3F	; 63
    303c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3040:	88 23       	and	r24, r24
    3042:	2c f4       	brge	.+10     	; 0x304e <HSSD_voidDisplaySSD+0x2a8>
		__ticks = 1;
    3044:	81 e0       	ldi	r24, 0x01	; 1
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	9c 8b       	std	Y+20, r25	; 0x14
    304a:	8b 8b       	std	Y+19, r24	; 0x13
    304c:	3f c0       	rjmp	.+126    	; 0x30cc <HSSD_voidDisplaySSD+0x326>
	else if (__tmp > 65535)
    304e:	6d 89       	ldd	r22, Y+21	; 0x15
    3050:	7e 89       	ldd	r23, Y+22	; 0x16
    3052:	8f 89       	ldd	r24, Y+23	; 0x17
    3054:	98 8d       	ldd	r25, Y+24	; 0x18
    3056:	20 e0       	ldi	r18, 0x00	; 0
    3058:	3f ef       	ldi	r19, 0xFF	; 255
    305a:	4f e7       	ldi	r20, 0x7F	; 127
    305c:	57 e4       	ldi	r21, 0x47	; 71
    305e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3062:	18 16       	cp	r1, r24
    3064:	4c f5       	brge	.+82     	; 0x30b8 <HSSD_voidDisplaySSD+0x312>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3066:	69 8d       	ldd	r22, Y+25	; 0x19
    3068:	7a 8d       	ldd	r23, Y+26	; 0x1a
    306a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    306c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    306e:	20 e0       	ldi	r18, 0x00	; 0
    3070:	30 e0       	ldi	r19, 0x00	; 0
    3072:	40 e2       	ldi	r20, 0x20	; 32
    3074:	51 e4       	ldi	r21, 0x41	; 65
    3076:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    307a:	dc 01       	movw	r26, r24
    307c:	cb 01       	movw	r24, r22
    307e:	bc 01       	movw	r22, r24
    3080:	cd 01       	movw	r24, r26
    3082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3086:	dc 01       	movw	r26, r24
    3088:	cb 01       	movw	r24, r22
    308a:	9c 8b       	std	Y+20, r25	; 0x14
    308c:	8b 8b       	std	Y+19, r24	; 0x13
    308e:	0f c0       	rjmp	.+30     	; 0x30ae <HSSD_voidDisplaySSD+0x308>
    3090:	88 ec       	ldi	r24, 0xC8	; 200
    3092:	90 e0       	ldi	r25, 0x00	; 0
    3094:	9a 8b       	std	Y+18, r25	; 0x12
    3096:	89 8b       	std	Y+17, r24	; 0x11
    3098:	89 89       	ldd	r24, Y+17	; 0x11
    309a:	9a 89       	ldd	r25, Y+18	; 0x12
    309c:	01 97       	sbiw	r24, 0x01	; 1
    309e:	f1 f7       	brne	.-4      	; 0x309c <HSSD_voidDisplaySSD+0x2f6>
    30a0:	9a 8b       	std	Y+18, r25	; 0x12
    30a2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30a4:	8b 89       	ldd	r24, Y+19	; 0x13
    30a6:	9c 89       	ldd	r25, Y+20	; 0x14
    30a8:	01 97       	sbiw	r24, 0x01	; 1
    30aa:	9c 8b       	std	Y+20, r25	; 0x14
    30ac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30ae:	8b 89       	ldd	r24, Y+19	; 0x13
    30b0:	9c 89       	ldd	r25, Y+20	; 0x14
    30b2:	00 97       	sbiw	r24, 0x00	; 0
    30b4:	69 f7       	brne	.-38     	; 0x3090 <HSSD_voidDisplaySSD+0x2ea>
    30b6:	14 c0       	rjmp	.+40     	; 0x30e0 <HSSD_voidDisplaySSD+0x33a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30b8:	6d 89       	ldd	r22, Y+21	; 0x15
    30ba:	7e 89       	ldd	r23, Y+22	; 0x16
    30bc:	8f 89       	ldd	r24, Y+23	; 0x17
    30be:	98 8d       	ldd	r25, Y+24	; 0x18
    30c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30c4:	dc 01       	movw	r26, r24
    30c6:	cb 01       	movw	r24, r22
    30c8:	9c 8b       	std	Y+20, r25	; 0x14
    30ca:	8b 8b       	std	Y+19, r24	; 0x13
    30cc:	8b 89       	ldd	r24, Y+19	; 0x13
    30ce:	9c 89       	ldd	r25, Y+20	; 0x14
    30d0:	98 8b       	std	Y+16, r25	; 0x10
    30d2:	8f 87       	std	Y+15, r24	; 0x0f
    30d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    30d6:	98 89       	ldd	r25, Y+16	; 0x10
    30d8:	01 97       	sbiw	r24, 0x01	; 1
    30da:	f1 f7       	brne	.-4      	; 0x30d8 <HSSD_voidDisplaySSD+0x332>
    30dc:	98 8b       	std	Y+16, r25	; 0x10
    30de:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		HSSD_voidDisplayDigitSSD(Local_u8NumberOnes,ONES_T);
    30e0:	89 ad       	ldd	r24, Y+57	; 0x39
    30e2:	61 e0       	ldi	r22, 0x01	; 1
    30e4:	0e 94 bc 11 	call	0x2378	; 0x2378 <HSSD_voidDisplayDigitSSD>
    30e8:	80 e0       	ldi	r24, 0x00	; 0
    30ea:	90 e0       	ldi	r25, 0x00	; 0
    30ec:	a0 e8       	ldi	r26, 0x80	; 128
    30ee:	bf e3       	ldi	r27, 0x3F	; 63
    30f0:	8b 87       	std	Y+11, r24	; 0x0b
    30f2:	9c 87       	std	Y+12, r25	; 0x0c
    30f4:	ad 87       	std	Y+13, r26	; 0x0d
    30f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    30fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    30fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    30fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    3100:	20 e0       	ldi	r18, 0x00	; 0
    3102:	30 e0       	ldi	r19, 0x00	; 0
    3104:	4a ef       	ldi	r20, 0xFA	; 250
    3106:	54 e4       	ldi	r21, 0x44	; 68
    3108:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    310c:	dc 01       	movw	r26, r24
    310e:	cb 01       	movw	r24, r22
    3110:	8f 83       	std	Y+7, r24	; 0x07
    3112:	98 87       	std	Y+8, r25	; 0x08
    3114:	a9 87       	std	Y+9, r26	; 0x09
    3116:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3118:	6f 81       	ldd	r22, Y+7	; 0x07
    311a:	78 85       	ldd	r23, Y+8	; 0x08
    311c:	89 85       	ldd	r24, Y+9	; 0x09
    311e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3120:	20 e0       	ldi	r18, 0x00	; 0
    3122:	30 e0       	ldi	r19, 0x00	; 0
    3124:	40 e8       	ldi	r20, 0x80	; 128
    3126:	5f e3       	ldi	r21, 0x3F	; 63
    3128:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    312c:	88 23       	and	r24, r24
    312e:	2c f4       	brge	.+10     	; 0x313a <HSSD_voidDisplaySSD+0x394>
		__ticks = 1;
    3130:	81 e0       	ldi	r24, 0x01	; 1
    3132:	90 e0       	ldi	r25, 0x00	; 0
    3134:	9e 83       	std	Y+6, r25	; 0x06
    3136:	8d 83       	std	Y+5, r24	; 0x05
    3138:	3f c0       	rjmp	.+126    	; 0x31b8 <HSSD_voidDisplaySSD+0x412>
	else if (__tmp > 65535)
    313a:	6f 81       	ldd	r22, Y+7	; 0x07
    313c:	78 85       	ldd	r23, Y+8	; 0x08
    313e:	89 85       	ldd	r24, Y+9	; 0x09
    3140:	9a 85       	ldd	r25, Y+10	; 0x0a
    3142:	20 e0       	ldi	r18, 0x00	; 0
    3144:	3f ef       	ldi	r19, 0xFF	; 255
    3146:	4f e7       	ldi	r20, 0x7F	; 127
    3148:	57 e4       	ldi	r21, 0x47	; 71
    314a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    314e:	18 16       	cp	r1, r24
    3150:	4c f5       	brge	.+82     	; 0x31a4 <HSSD_voidDisplaySSD+0x3fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3152:	6b 85       	ldd	r22, Y+11	; 0x0b
    3154:	7c 85       	ldd	r23, Y+12	; 0x0c
    3156:	8d 85       	ldd	r24, Y+13	; 0x0d
    3158:	9e 85       	ldd	r25, Y+14	; 0x0e
    315a:	20 e0       	ldi	r18, 0x00	; 0
    315c:	30 e0       	ldi	r19, 0x00	; 0
    315e:	40 e2       	ldi	r20, 0x20	; 32
    3160:	51 e4       	ldi	r21, 0x41	; 65
    3162:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3166:	dc 01       	movw	r26, r24
    3168:	cb 01       	movw	r24, r22
    316a:	bc 01       	movw	r22, r24
    316c:	cd 01       	movw	r24, r26
    316e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3172:	dc 01       	movw	r26, r24
    3174:	cb 01       	movw	r24, r22
    3176:	9e 83       	std	Y+6, r25	; 0x06
    3178:	8d 83       	std	Y+5, r24	; 0x05
    317a:	0f c0       	rjmp	.+30     	; 0x319a <HSSD_voidDisplaySSD+0x3f4>
    317c:	88 ec       	ldi	r24, 0xC8	; 200
    317e:	90 e0       	ldi	r25, 0x00	; 0
    3180:	9c 83       	std	Y+4, r25	; 0x04
    3182:	8b 83       	std	Y+3, r24	; 0x03
    3184:	8b 81       	ldd	r24, Y+3	; 0x03
    3186:	9c 81       	ldd	r25, Y+4	; 0x04
    3188:	01 97       	sbiw	r24, 0x01	; 1
    318a:	f1 f7       	brne	.-4      	; 0x3188 <HSSD_voidDisplaySSD+0x3e2>
    318c:	9c 83       	std	Y+4, r25	; 0x04
    318e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3190:	8d 81       	ldd	r24, Y+5	; 0x05
    3192:	9e 81       	ldd	r25, Y+6	; 0x06
    3194:	01 97       	sbiw	r24, 0x01	; 1
    3196:	9e 83       	std	Y+6, r25	; 0x06
    3198:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    319a:	8d 81       	ldd	r24, Y+5	; 0x05
    319c:	9e 81       	ldd	r25, Y+6	; 0x06
    319e:	00 97       	sbiw	r24, 0x00	; 0
    31a0:	69 f7       	brne	.-38     	; 0x317c <HSSD_voidDisplaySSD+0x3d6>
    31a2:	14 c0       	rjmp	.+40     	; 0x31cc <HSSD_voidDisplaySSD+0x426>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31a4:	6f 81       	ldd	r22, Y+7	; 0x07
    31a6:	78 85       	ldd	r23, Y+8	; 0x08
    31a8:	89 85       	ldd	r24, Y+9	; 0x09
    31aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    31ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31b0:	dc 01       	movw	r26, r24
    31b2:	cb 01       	movw	r24, r22
    31b4:	9e 83       	std	Y+6, r25	; 0x06
    31b6:	8d 83       	std	Y+5, r24	; 0x05
    31b8:	8d 81       	ldd	r24, Y+5	; 0x05
    31ba:	9e 81       	ldd	r25, Y+6	; 0x06
    31bc:	9a 83       	std	Y+2, r25	; 0x02
    31be:	89 83       	std	Y+1, r24	; 0x01
    31c0:	89 81       	ldd	r24, Y+1	; 0x01
    31c2:	9a 81       	ldd	r25, Y+2	; 0x02
    31c4:	01 97       	sbiw	r24, 0x01	; 1
    31c6:	f1 f7       	brne	.-4      	; 0x31c4 <HSSD_voidDisplaySSD+0x41e>
    31c8:	9a 83       	std	Y+2, r25	; 0x02
    31ca:	89 83       	std	Y+1, r24	; 0x01
	}
}

void HSSD_voidDisplaySSD(u16 Copy_u16FullNumber)
{
	for(u8 Local_u8Counter = 0 ; Local_u8Counter < 5 ; Local_u8Counter++)
    31cc:	8d ad       	ldd	r24, Y+61	; 0x3d
    31ce:	8f 5f       	subi	r24, 0xFF	; 255
    31d0:	8d af       	std	Y+61, r24	; 0x3d
    31d2:	8d ad       	ldd	r24, Y+61	; 0x3d
    31d4:	85 30       	cpi	r24, 0x05	; 5
    31d6:	08 f4       	brcc	.+2      	; 0x31da <HSSD_voidDisplaySSD+0x434>
    31d8:	f4 cd       	rjmp	.-1048   	; 0x2dc2 <HSSD_voidDisplaySSD+0x1c>
		HSSD_voidDisplayDigitSSD(Local_u8NumberTens,TENS_T);
		_delay_ms(1);
		HSSD_voidDisplayDigitSSD(Local_u8NumberOnes,ONES_T);
		_delay_ms(1);
	}
	MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN6, DIO_u8_LOW);
    31da:	81 e0       	ldi	r24, 0x01	; 1
    31dc:	66 e0       	ldi	r22, 0x06	; 6
    31de:	40 e0       	ldi	r20, 0x00	; 0
    31e0:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(DIO_u8_PORTB ,DIO_u8_PIN5, DIO_u8_LOW);
    31e4:	81 e0       	ldi	r24, 0x01	; 1
    31e6:	65 e0       	ldi	r22, 0x05	; 5
    31e8:	40 e0       	ldi	r20, 0x00	; 0
    31ea:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(DIO_u8_PORTA ,DIO_u8_PIN2, DIO_u8_LOW);
    31ee:	80 e0       	ldi	r24, 0x00	; 0
    31f0:	62 e0       	ldi	r22, 0x02	; 2
    31f2:	40 e0       	ldi	r20, 0x00	; 0
    31f4:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(DIO_u8_PORTA ,DIO_u8_PIN3, DIO_u8_LOW);
    31f8:	80 e0       	ldi	r24, 0x00	; 0
    31fa:	63 e0       	ldi	r22, 0x03	; 3
    31fc:	40 e0       	ldi	r20, 0x00	; 0
    31fe:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
}
    3202:	ef 96       	adiw	r28, 0x3f	; 63
    3204:	0f b6       	in	r0, 0x3f	; 63
    3206:	f8 94       	cli
    3208:	de bf       	out	0x3e, r29	; 62
    320a:	0f be       	out	0x3f, r0	; 63
    320c:	cd bf       	out	0x3d, r28	; 61
    320e:	cf 91       	pop	r28
    3210:	df 91       	pop	r29
    3212:	08 95       	ret

00003214 <HSSD_voidCountDownSSD>:

void HSSD_voidCountDownSSD(u16 Copy_u16FullNumber)
{
    3214:	df 93       	push	r29
    3216:	cf 93       	push	r28
    3218:	00 d0       	rcall	.+0      	; 0x321a <HSSD_voidCountDownSSD+0x6>
    321a:	00 d0       	rcall	.+0      	; 0x321c <HSSD_voidCountDownSSD+0x8>
    321c:	cd b7       	in	r28, 0x3d	; 61
    321e:	de b7       	in	r29, 0x3e	; 62
    3220:	9c 83       	std	Y+4, r25	; 0x04
    3222:	8b 83       	std	Y+3, r24	; 0x03
	for(u16 Local_u16Counter = Copy_u16FullNumber ; Local_u16Counter >= 0 ; Local_u16Counter--)
    3224:	8b 81       	ldd	r24, Y+3	; 0x03
    3226:	9c 81       	ldd	r25, Y+4	; 0x04
    3228:	9a 83       	std	Y+2, r25	; 0x02
    322a:	89 83       	std	Y+1, r24	; 0x01
	{
		HSSD_voidDisplaySSD(Local_u16Counter);
    322c:	89 81       	ldd	r24, Y+1	; 0x01
    322e:	9a 81       	ldd	r25, Y+2	; 0x02
    3230:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <HSSD_voidDisplaySSD>
		if(Local_u16Counter == 0)
    3234:	89 81       	ldd	r24, Y+1	; 0x01
    3236:	9a 81       	ldd	r25, Y+2	; 0x02
    3238:	00 97       	sbiw	r24, 0x00	; 0
    323a:	31 f0       	breq	.+12     	; 0x3248 <HSSD_voidCountDownSSD+0x34>
	MDIO_voidSetPinValue(DIO_u8_PORTA ,DIO_u8_PIN3, DIO_u8_LOW);
}

void HSSD_voidCountDownSSD(u16 Copy_u16FullNumber)
{
	for(u16 Local_u16Counter = Copy_u16FullNumber ; Local_u16Counter >= 0 ; Local_u16Counter--)
    323c:	89 81       	ldd	r24, Y+1	; 0x01
    323e:	9a 81       	ldd	r25, Y+2	; 0x02
    3240:	01 97       	sbiw	r24, 0x01	; 1
    3242:	9a 83       	std	Y+2, r25	; 0x02
    3244:	89 83       	std	Y+1, r24	; 0x01
    3246:	f2 cf       	rjmp	.-28     	; 0x322c <HSSD_voidCountDownSSD+0x18>
	{
		HSSD_voidDisplaySSD(Local_u16Counter);
		if(Local_u16Counter == 0)
			break;
	}
}
    3248:	0f 90       	pop	r0
    324a:	0f 90       	pop	r0
    324c:	0f 90       	pop	r0
    324e:	0f 90       	pop	r0
    3250:	cf 91       	pop	r28
    3252:	df 91       	pop	r29
    3254:	08 95       	ret

00003256 <HSSD_voidCountUpSSD>:
void HSSD_voidCountUpSSD(u16 Copy_u16FullNumber)
{
    3256:	df 93       	push	r29
    3258:	cf 93       	push	r28
    325a:	00 d0       	rcall	.+0      	; 0x325c <HSSD_voidCountUpSSD+0x6>
    325c:	00 d0       	rcall	.+0      	; 0x325e <HSSD_voidCountUpSSD+0x8>
    325e:	cd b7       	in	r28, 0x3d	; 61
    3260:	de b7       	in	r29, 0x3e	; 62
    3262:	9c 83       	std	Y+4, r25	; 0x04
    3264:	8b 83       	std	Y+3, r24	; 0x03
	for(u16 Local_u16Counter = Copy_u16FullNumber ; Local_u16Counter <= 9999 ; Local_u16Counter++)
    3266:	8b 81       	ldd	r24, Y+3	; 0x03
    3268:	9c 81       	ldd	r25, Y+4	; 0x04
    326a:	9a 83       	std	Y+2, r25	; 0x02
    326c:	89 83       	std	Y+1, r24	; 0x01
    326e:	0f c0       	rjmp	.+30     	; 0x328e <HSSD_voidCountUpSSD+0x38>
	{
		HSSD_voidDisplaySSD(Local_u16Counter);
    3270:	89 81       	ldd	r24, Y+1	; 0x01
    3272:	9a 81       	ldd	r25, Y+2	; 0x02
    3274:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <HSSD_voidDisplaySSD>
		if(Local_u16Counter == 9999)
    3278:	89 81       	ldd	r24, Y+1	; 0x01
    327a:	9a 81       	ldd	r25, Y+2	; 0x02
    327c:	27 e2       	ldi	r18, 0x27	; 39
    327e:	8f 30       	cpi	r24, 0x0F	; 15
    3280:	92 07       	cpc	r25, r18
    3282:	59 f0       	breq	.+22     	; 0x329a <HSSD_voidCountUpSSD+0x44>
			break;
	}
}
void HSSD_voidCountUpSSD(u16 Copy_u16FullNumber)
{
	for(u16 Local_u16Counter = Copy_u16FullNumber ; Local_u16Counter <= 9999 ; Local_u16Counter++)
    3284:	89 81       	ldd	r24, Y+1	; 0x01
    3286:	9a 81       	ldd	r25, Y+2	; 0x02
    3288:	01 96       	adiw	r24, 0x01	; 1
    328a:	9a 83       	std	Y+2, r25	; 0x02
    328c:	89 83       	std	Y+1, r24	; 0x01
    328e:	89 81       	ldd	r24, Y+1	; 0x01
    3290:	9a 81       	ldd	r25, Y+2	; 0x02
    3292:	27 e2       	ldi	r18, 0x27	; 39
    3294:	80 31       	cpi	r24, 0x10	; 16
    3296:	92 07       	cpc	r25, r18
    3298:	58 f3       	brcs	.-42     	; 0x3270 <HSSD_voidCountUpSSD+0x1a>
	{
		HSSD_voidDisplaySSD(Local_u16Counter);
		if(Local_u16Counter == 9999)
			break;
	}
}
    329a:	0f 90       	pop	r0
    329c:	0f 90       	pop	r0
    329e:	0f 90       	pop	r0
    32a0:	0f 90       	pop	r0
    32a2:	cf 91       	pop	r28
    32a4:	df 91       	pop	r29
    32a6:	08 95       	ret

000032a8 <HSWITCH_voidInit>:
#include "DIP_CONFIG.h"
#include "DIP_PRIVATE.h"
#include "DIP_INTERFACE.h"

void HSWITCH_voidInit  (void)
{
    32a8:	df 93       	push	r29
    32aa:	cf 93       	push	r28
    32ac:	cd b7       	in	r28, 0x3d	; 61
    32ae:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidSetPinDirection (DIO_u8_PORTD , SWITCH_1 ,DIO_u8_INPUT);
    32b0:	83 e0       	ldi	r24, 0x03	; 3
    32b2:	67 e0       	ldi	r22, 0x07	; 7
    32b4:	40 e0       	ldi	r20, 0x00	; 0
    32b6:	0e 94 69 08 	call	0x10d2	; 0x10d2 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection (DIO_u8_PORTD , SWITCH_2 ,DIO_u8_INPUT);
    32ba:	83 e0       	ldi	r24, 0x03	; 3
    32bc:	66 e0       	ldi	r22, 0x06	; 6
    32be:	40 e0       	ldi	r20, 0x00	; 0
    32c0:	0e 94 69 08 	call	0x10d2	; 0x10d2 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection (DIO_u8_PORTD , SWITCH_3 ,DIO_u8_INPUT);
    32c4:	83 e0       	ldi	r24, 0x03	; 3
    32c6:	65 e0       	ldi	r22, 0x05	; 5
    32c8:	40 e0       	ldi	r20, 0x00	; 0
    32ca:	0e 94 69 08 	call	0x10d2	; 0x10d2 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection (DIO_u8_PORTD , SWITCH_4 ,DIO_u8_INPUT);
    32ce:	83 e0       	ldi	r24, 0x03	; 3
    32d0:	63 e0       	ldi	r22, 0x03	; 3
    32d2:	40 e0       	ldi	r20, 0x00	; 0
    32d4:	0e 94 69 08 	call	0x10d2	; 0x10d2 <MDIO_voidSetPinDirection>
}
    32d8:	cf 91       	pop	r28
    32da:	df 91       	pop	r29
    32dc:	08 95       	ret

000032de <HDIP_u8GetPressedKey>:

u8 HDIP_u8GetPressedKey  (u8 Copy_u8SwitchPinId)
{
    32de:	df 93       	push	r29
    32e0:	cf 93       	push	r28
    32e2:	00 d0       	rcall	.+0      	; 0x32e4 <HDIP_u8GetPressedKey+0x6>
    32e4:	00 d0       	rcall	.+0      	; 0x32e6 <HDIP_u8GetPressedKey+0x8>
    32e6:	cd b7       	in	r28, 0x3d	; 61
    32e8:	de b7       	in	r29, 0x3e	; 62
    32ea:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8VALUE  = 0;
    32ec:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8SwitchPinId)
    32ee:	8a 81       	ldd	r24, Y+2	; 0x02
    32f0:	28 2f       	mov	r18, r24
    32f2:	30 e0       	ldi	r19, 0x00	; 0
    32f4:	3c 83       	std	Y+4, r19	; 0x04
    32f6:	2b 83       	std	Y+3, r18	; 0x03
    32f8:	8b 81       	ldd	r24, Y+3	; 0x03
    32fa:	9c 81       	ldd	r25, Y+4	; 0x04
    32fc:	82 30       	cpi	r24, 0x02	; 2
    32fe:	91 05       	cpc	r25, r1
    3300:	e1 f0       	breq	.+56     	; 0x333a <HDIP_u8GetPressedKey+0x5c>
    3302:	2b 81       	ldd	r18, Y+3	; 0x03
    3304:	3c 81       	ldd	r19, Y+4	; 0x04
    3306:	23 30       	cpi	r18, 0x03	; 3
    3308:	31 05       	cpc	r19, r1
    330a:	34 f4       	brge	.+12     	; 0x3318 <HDIP_u8GetPressedKey+0x3a>
    330c:	8b 81       	ldd	r24, Y+3	; 0x03
    330e:	9c 81       	ldd	r25, Y+4	; 0x04
    3310:	81 30       	cpi	r24, 0x01	; 1
    3312:	91 05       	cpc	r25, r1
    3314:	61 f0       	breq	.+24     	; 0x332e <HDIP_u8GetPressedKey+0x50>
    3316:	22 c0       	rjmp	.+68     	; 0x335c <HDIP_u8GetPressedKey+0x7e>
    3318:	2b 81       	ldd	r18, Y+3	; 0x03
    331a:	3c 81       	ldd	r19, Y+4	; 0x04
    331c:	23 30       	cpi	r18, 0x03	; 3
    331e:	31 05       	cpc	r19, r1
    3320:	91 f0       	breq	.+36     	; 0x3346 <HDIP_u8GetPressedKey+0x68>
    3322:	8b 81       	ldd	r24, Y+3	; 0x03
    3324:	9c 81       	ldd	r25, Y+4	; 0x04
    3326:	84 30       	cpi	r24, 0x04	; 4
    3328:	91 05       	cpc	r25, r1
    332a:	99 f0       	breq	.+38     	; 0x3352 <HDIP_u8GetPressedKey+0x74>
    332c:	17 c0       	rjmp	.+46     	; 0x335c <HDIP_u8GetPressedKey+0x7e>
	{
		case SWITCH_1_t:
			Local_u8VALUE = MDIO_u8GetPinValue(DIO_u8_PORTD , SWITCH_1);
    332e:	83 e0       	ldi	r24, 0x03	; 3
    3330:	67 e0       	ldi	r22, 0x07	; 7
    3332:	0e 94 cf 0a 	call	0x159e	; 0x159e <MDIO_u8GetPinValue>
    3336:	89 83       	std	Y+1, r24	; 0x01
    3338:	11 c0       	rjmp	.+34     	; 0x335c <HDIP_u8GetPressedKey+0x7e>
			break;
		case SWITCH_2_t:
			Local_u8VALUE = MDIO_u8GetPinValue(DIO_u8_PORTD , SWITCH_2);			
    333a:	83 e0       	ldi	r24, 0x03	; 3
    333c:	66 e0       	ldi	r22, 0x06	; 6
    333e:	0e 94 cf 0a 	call	0x159e	; 0x159e <MDIO_u8GetPinValue>
    3342:	89 83       	std	Y+1, r24	; 0x01
    3344:	0b c0       	rjmp	.+22     	; 0x335c <HDIP_u8GetPressedKey+0x7e>
			break;
		case SWITCH_3_t:
			Local_u8VALUE = MDIO_u8GetPinValue(DIO_u8_PORTD , SWITCH_3);			
    3346:	83 e0       	ldi	r24, 0x03	; 3
    3348:	65 e0       	ldi	r22, 0x05	; 5
    334a:	0e 94 cf 0a 	call	0x159e	; 0x159e <MDIO_u8GetPinValue>
    334e:	89 83       	std	Y+1, r24	; 0x01
    3350:	05 c0       	rjmp	.+10     	; 0x335c <HDIP_u8GetPressedKey+0x7e>
			break;
		case SWITCH_4_t:
			Local_u8VALUE = MDIO_u8GetPinValue(DIO_u8_PORTD , SWITCH_4);			
    3352:	83 e0       	ldi	r24, 0x03	; 3
    3354:	63 e0       	ldi	r22, 0x03	; 3
    3356:	0e 94 cf 0a 	call	0x159e	; 0x159e <MDIO_u8GetPinValue>
    335a:	89 83       	std	Y+1, r24	; 0x01
			break;
		default :
			break;
	}
	return Local_u8VALUE;
    335c:	89 81       	ldd	r24, Y+1	; 0x01
}
    335e:	0f 90       	pop	r0
    3360:	0f 90       	pop	r0
    3362:	0f 90       	pop	r0
    3364:	0f 90       	pop	r0
    3366:	cf 91       	pop	r28
    3368:	df 91       	pop	r29
    336a:	08 95       	ret

0000336c <HLED_voidInit>:
#include "LED_CONFIG.h"
#include "LED_PRIVATE.h"
#include "LED_INTERFACE.h"

void HLED_voidInit  (void)
{
    336c:	df 93       	push	r29
    336e:	cf 93       	push	r28
    3370:	cd b7       	in	r28, 0x3d	; 61
    3372:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidSetPinDirection (DIO_u8_PORTA , LED_GREEN ,DIO_u8_OUTPUT);
    3374:	80 e0       	ldi	r24, 0x00	; 0
    3376:	64 e0       	ldi	r22, 0x04	; 4
    3378:	41 e0       	ldi	r20, 0x01	; 1
    337a:	0e 94 69 08 	call	0x10d2	; 0x10d2 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection (DIO_u8_PORTA , LED_BLUE ,DIO_u8_OUTPUT);
    337e:	80 e0       	ldi	r24, 0x00	; 0
    3380:	65 e0       	ldi	r22, 0x05	; 5
    3382:	41 e0       	ldi	r20, 0x01	; 1
    3384:	0e 94 69 08 	call	0x10d2	; 0x10d2 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection (DIO_u8_PORTA , LED_YELLOW ,DIO_u8_OUTPUT);
    3388:	80 e0       	ldi	r24, 0x00	; 0
    338a:	66 e0       	ldi	r22, 0x06	; 6
    338c:	41 e0       	ldi	r20, 0x01	; 1
    338e:	0e 94 69 08 	call	0x10d2	; 0x10d2 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection (DIO_u8_PORTB , LED_RED ,DIO_u8_OUTPUT);
    3392:	81 e0       	ldi	r24, 0x01	; 1
    3394:	67 e0       	ldi	r22, 0x07	; 7
    3396:	41 e0       	ldi	r20, 0x01	; 1
    3398:	0e 94 69 08 	call	0x10d2	; 0x10d2 <MDIO_voidSetPinDirection>
}
    339c:	cf 91       	pop	r28
    339e:	df 91       	pop	r29
    33a0:	08 95       	ret

000033a2 <HLED_voidTurnOn>:

void HLED_voidTurnOn ( u8 Copy_u8LedPinId)
{
    33a2:	df 93       	push	r29
    33a4:	cf 93       	push	r28
    33a6:	00 d0       	rcall	.+0      	; 0x33a8 <HLED_voidTurnOn+0x6>
    33a8:	0f 92       	push	r0
    33aa:	cd b7       	in	r28, 0x3d	; 61
    33ac:	de b7       	in	r29, 0x3e	; 62
    33ae:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8LedPinId)
    33b0:	89 81       	ldd	r24, Y+1	; 0x01
    33b2:	28 2f       	mov	r18, r24
    33b4:	30 e0       	ldi	r19, 0x00	; 0
    33b6:	3b 83       	std	Y+3, r19	; 0x03
    33b8:	2a 83       	std	Y+2, r18	; 0x02
    33ba:	8a 81       	ldd	r24, Y+2	; 0x02
    33bc:	9b 81       	ldd	r25, Y+3	; 0x03
    33be:	82 30       	cpi	r24, 0x02	; 2
    33c0:	91 05       	cpc	r25, r1
    33c2:	e1 f0       	breq	.+56     	; 0x33fc <HLED_voidTurnOn+0x5a>
    33c4:	2a 81       	ldd	r18, Y+2	; 0x02
    33c6:	3b 81       	ldd	r19, Y+3	; 0x03
    33c8:	23 30       	cpi	r18, 0x03	; 3
    33ca:	31 05       	cpc	r19, r1
    33cc:	34 f4       	brge	.+12     	; 0x33da <HLED_voidTurnOn+0x38>
    33ce:	8a 81       	ldd	r24, Y+2	; 0x02
    33d0:	9b 81       	ldd	r25, Y+3	; 0x03
    33d2:	81 30       	cpi	r24, 0x01	; 1
    33d4:	91 05       	cpc	r25, r1
    33d6:	61 f0       	breq	.+24     	; 0x33f0 <HLED_voidTurnOn+0x4e>
    33d8:	22 c0       	rjmp	.+68     	; 0x341e <HLED_voidTurnOn+0x7c>
    33da:	2a 81       	ldd	r18, Y+2	; 0x02
    33dc:	3b 81       	ldd	r19, Y+3	; 0x03
    33de:	23 30       	cpi	r18, 0x03	; 3
    33e0:	31 05       	cpc	r19, r1
    33e2:	91 f0       	breq	.+36     	; 0x3408 <HLED_voidTurnOn+0x66>
    33e4:	8a 81       	ldd	r24, Y+2	; 0x02
    33e6:	9b 81       	ldd	r25, Y+3	; 0x03
    33e8:	84 30       	cpi	r24, 0x04	; 4
    33ea:	91 05       	cpc	r25, r1
    33ec:	99 f0       	breq	.+38     	; 0x3414 <HLED_voidTurnOn+0x72>
    33ee:	17 c0       	rjmp	.+46     	; 0x341e <HLED_voidTurnOn+0x7c>
	{
		case LED_GREEN_t:
			MDIO_voidSetPinValue(DIO_u8_PORTA , LED_GREEN ,DIO_u8_HIGH);
    33f0:	80 e0       	ldi	r24, 0x00	; 0
    33f2:	64 e0       	ldi	r22, 0x04	; 4
    33f4:	41 e0       	ldi	r20, 0x01	; 1
    33f6:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
    33fa:	11 c0       	rjmp	.+34     	; 0x341e <HLED_voidTurnOn+0x7c>
			break;
		case LED_BLUE_t:
			MDIO_voidSetPinValue(DIO_u8_PORTA , LED_BLUE ,DIO_u8_HIGH);
    33fc:	80 e0       	ldi	r24, 0x00	; 0
    33fe:	65 e0       	ldi	r22, 0x05	; 5
    3400:	41 e0       	ldi	r20, 0x01	; 1
    3402:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
    3406:	0b c0       	rjmp	.+22     	; 0x341e <HLED_voidTurnOn+0x7c>
			break;
		case LED_YELLOW_t:
			MDIO_voidSetPinValue(DIO_u8_PORTA , LED_YELLOW ,DIO_u8_HIGH);
    3408:	80 e0       	ldi	r24, 0x00	; 0
    340a:	66 e0       	ldi	r22, 0x06	; 6
    340c:	41 e0       	ldi	r20, 0x01	; 1
    340e:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
    3412:	05 c0       	rjmp	.+10     	; 0x341e <HLED_voidTurnOn+0x7c>
			break;
		case LED_RED_t:
			MDIO_voidSetPinValue(DIO_u8_PORTB , LED_RED ,DIO_u8_HIGH);
    3414:	81 e0       	ldi	r24, 0x01	; 1
    3416:	67 e0       	ldi	r22, 0x07	; 7
    3418:	41 e0       	ldi	r20, 0x01	; 1
    341a:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
			break;
		default :
			break;
	}
}
    341e:	0f 90       	pop	r0
    3420:	0f 90       	pop	r0
    3422:	0f 90       	pop	r0
    3424:	cf 91       	pop	r28
    3426:	df 91       	pop	r29
    3428:	08 95       	ret

0000342a <HLED_voidTurnOff>:

void HLED_voidTurnOff ( u8 Copy_u8LedPinId)
{
    342a:	df 93       	push	r29
    342c:	cf 93       	push	r28
    342e:	00 d0       	rcall	.+0      	; 0x3430 <HLED_voidTurnOff+0x6>
    3430:	0f 92       	push	r0
    3432:	cd b7       	in	r28, 0x3d	; 61
    3434:	de b7       	in	r29, 0x3e	; 62
    3436:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8LedPinId)
    3438:	89 81       	ldd	r24, Y+1	; 0x01
    343a:	28 2f       	mov	r18, r24
    343c:	30 e0       	ldi	r19, 0x00	; 0
    343e:	3b 83       	std	Y+3, r19	; 0x03
    3440:	2a 83       	std	Y+2, r18	; 0x02
    3442:	8a 81       	ldd	r24, Y+2	; 0x02
    3444:	9b 81       	ldd	r25, Y+3	; 0x03
    3446:	82 30       	cpi	r24, 0x02	; 2
    3448:	91 05       	cpc	r25, r1
    344a:	e1 f0       	breq	.+56     	; 0x3484 <HLED_voidTurnOff+0x5a>
    344c:	2a 81       	ldd	r18, Y+2	; 0x02
    344e:	3b 81       	ldd	r19, Y+3	; 0x03
    3450:	23 30       	cpi	r18, 0x03	; 3
    3452:	31 05       	cpc	r19, r1
    3454:	34 f4       	brge	.+12     	; 0x3462 <HLED_voidTurnOff+0x38>
    3456:	8a 81       	ldd	r24, Y+2	; 0x02
    3458:	9b 81       	ldd	r25, Y+3	; 0x03
    345a:	81 30       	cpi	r24, 0x01	; 1
    345c:	91 05       	cpc	r25, r1
    345e:	61 f0       	breq	.+24     	; 0x3478 <HLED_voidTurnOff+0x4e>
    3460:	22 c0       	rjmp	.+68     	; 0x34a6 <HLED_voidTurnOff+0x7c>
    3462:	2a 81       	ldd	r18, Y+2	; 0x02
    3464:	3b 81       	ldd	r19, Y+3	; 0x03
    3466:	23 30       	cpi	r18, 0x03	; 3
    3468:	31 05       	cpc	r19, r1
    346a:	91 f0       	breq	.+36     	; 0x3490 <HLED_voidTurnOff+0x66>
    346c:	8a 81       	ldd	r24, Y+2	; 0x02
    346e:	9b 81       	ldd	r25, Y+3	; 0x03
    3470:	84 30       	cpi	r24, 0x04	; 4
    3472:	91 05       	cpc	r25, r1
    3474:	99 f0       	breq	.+38     	; 0x349c <HLED_voidTurnOff+0x72>
    3476:	17 c0       	rjmp	.+46     	; 0x34a6 <HLED_voidTurnOff+0x7c>
		{
			case LED_GREEN_t:
				MDIO_voidSetPinValue(DIO_u8_PORTA , LED_GREEN ,DIO_u8_LOW);
    3478:	80 e0       	ldi	r24, 0x00	; 0
    347a:	64 e0       	ldi	r22, 0x04	; 4
    347c:	40 e0       	ldi	r20, 0x00	; 0
    347e:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
    3482:	11 c0       	rjmp	.+34     	; 0x34a6 <HLED_voidTurnOff+0x7c>
				break;
			case LED_BLUE_t:
				MDIO_voidSetPinValue(DIO_u8_PORTA , LED_BLUE ,DIO_u8_LOW);
    3484:	80 e0       	ldi	r24, 0x00	; 0
    3486:	65 e0       	ldi	r22, 0x05	; 5
    3488:	40 e0       	ldi	r20, 0x00	; 0
    348a:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
    348e:	0b c0       	rjmp	.+22     	; 0x34a6 <HLED_voidTurnOff+0x7c>
				break;
			case LED_YELLOW_t:
				MDIO_voidSetPinValue(DIO_u8_PORTA , LED_YELLOW ,DIO_u8_LOW);
    3490:	80 e0       	ldi	r24, 0x00	; 0
    3492:	66 e0       	ldi	r22, 0x06	; 6
    3494:	40 e0       	ldi	r20, 0x00	; 0
    3496:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
    349a:	05 c0       	rjmp	.+10     	; 0x34a6 <HLED_voidTurnOff+0x7c>
				break;
			case LED_RED_t:
				MDIO_voidSetPinValue(DIO_u8_PORTB , LED_RED ,DIO_u8_LOW);
    349c:	81 e0       	ldi	r24, 0x01	; 1
    349e:	67 e0       	ldi	r22, 0x07	; 7
    34a0:	40 e0       	ldi	r20, 0x00	; 0
    34a2:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPinValue>
				break;
			default :
				break;
		}
}
    34a6:	0f 90       	pop	r0
    34a8:	0f 90       	pop	r0
    34aa:	0f 90       	pop	r0
    34ac:	cf 91       	pop	r28
    34ae:	df 91       	pop	r29
    34b0:	08 95       	ret

000034b2 <main>:
#if   APP_TIMER   ==		1



int main (void)
{
    34b2:	df 93       	push	r29
    34b4:	cf 93       	push	r28
    34b6:	cd b7       	in	r28, 0x3d	; 61
    34b8:	de b7       	in	r29, 0x3e	; 62
    34ba:	ff cf       	rjmp	.-2      	; 0x34ba <main+0x8>

000034bc <__udivmodhi4>:
    34bc:	aa 1b       	sub	r26, r26
    34be:	bb 1b       	sub	r27, r27
    34c0:	51 e1       	ldi	r21, 0x11	; 17
    34c2:	07 c0       	rjmp	.+14     	; 0x34d2 <__udivmodhi4_ep>

000034c4 <__udivmodhi4_loop>:
    34c4:	aa 1f       	adc	r26, r26
    34c6:	bb 1f       	adc	r27, r27
    34c8:	a6 17       	cp	r26, r22
    34ca:	b7 07       	cpc	r27, r23
    34cc:	10 f0       	brcs	.+4      	; 0x34d2 <__udivmodhi4_ep>
    34ce:	a6 1b       	sub	r26, r22
    34d0:	b7 0b       	sbc	r27, r23

000034d2 <__udivmodhi4_ep>:
    34d2:	88 1f       	adc	r24, r24
    34d4:	99 1f       	adc	r25, r25
    34d6:	5a 95       	dec	r21
    34d8:	a9 f7       	brne	.-22     	; 0x34c4 <__udivmodhi4_loop>
    34da:	80 95       	com	r24
    34dc:	90 95       	com	r25
    34de:	bc 01       	movw	r22, r24
    34e0:	cd 01       	movw	r24, r26
    34e2:	08 95       	ret

000034e4 <__divmodsi4>:
    34e4:	97 fb       	bst	r25, 7
    34e6:	09 2e       	mov	r0, r25
    34e8:	05 26       	eor	r0, r21
    34ea:	0e d0       	rcall	.+28     	; 0x3508 <__divmodsi4_neg1>
    34ec:	57 fd       	sbrc	r21, 7
    34ee:	04 d0       	rcall	.+8      	; 0x34f8 <__divmodsi4_neg2>
    34f0:	14 d0       	rcall	.+40     	; 0x351a <__udivmodsi4>
    34f2:	0a d0       	rcall	.+20     	; 0x3508 <__divmodsi4_neg1>
    34f4:	00 1c       	adc	r0, r0
    34f6:	38 f4       	brcc	.+14     	; 0x3506 <__divmodsi4_exit>

000034f8 <__divmodsi4_neg2>:
    34f8:	50 95       	com	r21
    34fa:	40 95       	com	r20
    34fc:	30 95       	com	r19
    34fe:	21 95       	neg	r18
    3500:	3f 4f       	sbci	r19, 0xFF	; 255
    3502:	4f 4f       	sbci	r20, 0xFF	; 255
    3504:	5f 4f       	sbci	r21, 0xFF	; 255

00003506 <__divmodsi4_exit>:
    3506:	08 95       	ret

00003508 <__divmodsi4_neg1>:
    3508:	f6 f7       	brtc	.-4      	; 0x3506 <__divmodsi4_exit>
    350a:	90 95       	com	r25
    350c:	80 95       	com	r24
    350e:	70 95       	com	r23
    3510:	61 95       	neg	r22
    3512:	7f 4f       	sbci	r23, 0xFF	; 255
    3514:	8f 4f       	sbci	r24, 0xFF	; 255
    3516:	9f 4f       	sbci	r25, 0xFF	; 255
    3518:	08 95       	ret

0000351a <__udivmodsi4>:
    351a:	a1 e2       	ldi	r26, 0x21	; 33
    351c:	1a 2e       	mov	r1, r26
    351e:	aa 1b       	sub	r26, r26
    3520:	bb 1b       	sub	r27, r27
    3522:	fd 01       	movw	r30, r26
    3524:	0d c0       	rjmp	.+26     	; 0x3540 <__udivmodsi4_ep>

00003526 <__udivmodsi4_loop>:
    3526:	aa 1f       	adc	r26, r26
    3528:	bb 1f       	adc	r27, r27
    352a:	ee 1f       	adc	r30, r30
    352c:	ff 1f       	adc	r31, r31
    352e:	a2 17       	cp	r26, r18
    3530:	b3 07       	cpc	r27, r19
    3532:	e4 07       	cpc	r30, r20
    3534:	f5 07       	cpc	r31, r21
    3536:	20 f0       	brcs	.+8      	; 0x3540 <__udivmodsi4_ep>
    3538:	a2 1b       	sub	r26, r18
    353a:	b3 0b       	sbc	r27, r19
    353c:	e4 0b       	sbc	r30, r20
    353e:	f5 0b       	sbc	r31, r21

00003540 <__udivmodsi4_ep>:
    3540:	66 1f       	adc	r22, r22
    3542:	77 1f       	adc	r23, r23
    3544:	88 1f       	adc	r24, r24
    3546:	99 1f       	adc	r25, r25
    3548:	1a 94       	dec	r1
    354a:	69 f7       	brne	.-38     	; 0x3526 <__udivmodsi4_loop>
    354c:	60 95       	com	r22
    354e:	70 95       	com	r23
    3550:	80 95       	com	r24
    3552:	90 95       	com	r25
    3554:	9b 01       	movw	r18, r22
    3556:	ac 01       	movw	r20, r24
    3558:	bd 01       	movw	r22, r26
    355a:	cf 01       	movw	r24, r30
    355c:	08 95       	ret

0000355e <__prologue_saves__>:
    355e:	2f 92       	push	r2
    3560:	3f 92       	push	r3
    3562:	4f 92       	push	r4
    3564:	5f 92       	push	r5
    3566:	6f 92       	push	r6
    3568:	7f 92       	push	r7
    356a:	8f 92       	push	r8
    356c:	9f 92       	push	r9
    356e:	af 92       	push	r10
    3570:	bf 92       	push	r11
    3572:	cf 92       	push	r12
    3574:	df 92       	push	r13
    3576:	ef 92       	push	r14
    3578:	ff 92       	push	r15
    357a:	0f 93       	push	r16
    357c:	1f 93       	push	r17
    357e:	cf 93       	push	r28
    3580:	df 93       	push	r29
    3582:	cd b7       	in	r28, 0x3d	; 61
    3584:	de b7       	in	r29, 0x3e	; 62
    3586:	ca 1b       	sub	r28, r26
    3588:	db 0b       	sbc	r29, r27
    358a:	0f b6       	in	r0, 0x3f	; 63
    358c:	f8 94       	cli
    358e:	de bf       	out	0x3e, r29	; 62
    3590:	0f be       	out	0x3f, r0	; 63
    3592:	cd bf       	out	0x3d, r28	; 61
    3594:	09 94       	ijmp

00003596 <__epilogue_restores__>:
    3596:	2a 88       	ldd	r2, Y+18	; 0x12
    3598:	39 88       	ldd	r3, Y+17	; 0x11
    359a:	48 88       	ldd	r4, Y+16	; 0x10
    359c:	5f 84       	ldd	r5, Y+15	; 0x0f
    359e:	6e 84       	ldd	r6, Y+14	; 0x0e
    35a0:	7d 84       	ldd	r7, Y+13	; 0x0d
    35a2:	8c 84       	ldd	r8, Y+12	; 0x0c
    35a4:	9b 84       	ldd	r9, Y+11	; 0x0b
    35a6:	aa 84       	ldd	r10, Y+10	; 0x0a
    35a8:	b9 84       	ldd	r11, Y+9	; 0x09
    35aa:	c8 84       	ldd	r12, Y+8	; 0x08
    35ac:	df 80       	ldd	r13, Y+7	; 0x07
    35ae:	ee 80       	ldd	r14, Y+6	; 0x06
    35b0:	fd 80       	ldd	r15, Y+5	; 0x05
    35b2:	0c 81       	ldd	r16, Y+4	; 0x04
    35b4:	1b 81       	ldd	r17, Y+3	; 0x03
    35b6:	aa 81       	ldd	r26, Y+2	; 0x02
    35b8:	b9 81       	ldd	r27, Y+1	; 0x01
    35ba:	ce 0f       	add	r28, r30
    35bc:	d1 1d       	adc	r29, r1
    35be:	0f b6       	in	r0, 0x3f	; 63
    35c0:	f8 94       	cli
    35c2:	de bf       	out	0x3e, r29	; 62
    35c4:	0f be       	out	0x3f, r0	; 63
    35c6:	cd bf       	out	0x3d, r28	; 61
    35c8:	ed 01       	movw	r28, r26
    35ca:	08 95       	ret

000035cc <_exit>:
    35cc:	f8 94       	cli

000035ce <__stop_program>:
    35ce:	ff cf       	rjmp	.-2      	; 0x35ce <__stop_program>
