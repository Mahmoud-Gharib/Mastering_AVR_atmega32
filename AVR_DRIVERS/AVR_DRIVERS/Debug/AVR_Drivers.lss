
AVR_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004354  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00004354  000043e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800078  00800078  00004400  2**0
                  ALLOC
  3 .stab         00004b00  00000000  00000000  00004400  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001962  00000000  00000000  00008f00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000a862  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000a9a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000ab12  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000c75b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000d646  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000e3f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000e554  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000e7e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000efaf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 6a 0c 	jmp	0x18d4	; 0x18d4 <__vector_1>
       8:	0c 94 a9 0c 	jmp	0x1952	; 0x1952 <__vector_2>
       c:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 57 09 	jmp	0x12ae	; 0x12ae <__vector_6>
      1c:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__vector_7>
      20:	0c 94 b1 09 	jmp	0x1362	; 0x1362 <__vector_8>
      24:	0c 94 de 09 	jmp	0x13bc	; 0x13bc <__vector_9>
      28:	0c 94 0b 0a 	jmp	0x1416	; 0x1416 <__vector_10>
      2c:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 cd 11 	jmp	0x239a	; 0x239a <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e5       	ldi	r30, 0x54	; 84
      68:	f3 e4       	ldi	r31, 0x43	; 67
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 38       	cpi	r26, 0x8C	; 140
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 10 21 	call	0x4220	; 0x4220 <main>
      8a:	0c 94 a8 21 	jmp	0x4350	; 0x4350 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 71 21 	jmp	0x42e2	; 0x42e2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 8d 21 	jmp	0x431a	; 0x431a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 7d 21 	jmp	0x42fa	; 0x42fa <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 99 21 	jmp	0x4332	; 0x4332 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 7d 21 	jmp	0x42fa	; 0x42fa <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 99 21 	jmp	0x4332	; 0x4332 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 71 21 	jmp	0x42e2	; 0x42e2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 8d 21 	jmp	0x431a	; 0x431a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7d 21 	jmp	0x42fa	; 0x42fa <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 99 21 	jmp	0x4332	; 0x4332 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 7d 21 	jmp	0x42fa	; 0x42fa <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 99 21 	jmp	0x4332	; 0x4332 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 7d 21 	jmp	0x42fa	; 0x42fa <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 99 21 	jmp	0x4332	; 0x4332 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 81 21 	jmp	0x4302	; 0x4302 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 9d 21 	jmp	0x433a	; 0x433a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MUART_voidInit>:
 * Description : Set initialization of UART										*
 * Arguments   : void			 												*
 * return      : void															*
 *==============================================================================*/
void MUART_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8UCSRC = 0b10000000;            
     b50:	80 e8       	ldi	r24, 0x80	; 128
     b52:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(DIO_u8_DDRD_REG,1);    			// to make PD1 (Tx) -> output
     b54:	a1 e3       	ldi	r26, 0x31	; 49
     b56:	b0 e0       	ldi	r27, 0x00	; 0
     b58:	e1 e3       	ldi	r30, 0x31	; 49
     b5a:	f0 e0       	ldi	r31, 0x00	; 0
     b5c:	80 81       	ld	r24, Z
     b5e:	82 60       	ori	r24, 0x02	; 2
     b60:	8c 93       	st	X, r24
	CLR_BIT(DIO_u8_DDRD_REG,0);    			// to make PD0 (Rx) -> intput
     b62:	a1 e3       	ldi	r26, 0x31	; 49
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e1 e3       	ldi	r30, 0x31	; 49
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	80 81       	ld	r24, Z
     b6c:	8e 7f       	andi	r24, 0xFE	; 254
     b6e:	8c 93       	st	X, r24
	#elif CHARACTER_SIZE  ==  7
	CLR_BIT(Local_u8UCSRC,1); 
	SET_BIT(Local_u8UCSRC,2);
	CLR_BIT(UCSRB,2);
	#elif CHARACTER_SIZE == 8 
	SET_BIT(Local_u8UCSRC,1); 
     b70:	89 81       	ldd	r24, Y+1	; 0x01
     b72:	82 60       	ori	r24, 0x02	; 2
     b74:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8UCSRC,2); 
     b76:	89 81       	ldd	r24, Y+1	; 0x01
     b78:	84 60       	ori	r24, 0x04	; 4
     b7a:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRB,2);         
     b7c:	aa e2       	ldi	r26, 0x2A	; 42
     b7e:	b0 e0       	ldi	r27, 0x00	; 0
     b80:	ea e2       	ldi	r30, 0x2A	; 42
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	80 81       	ld	r24, Z
     b86:	8b 7f       	andi	r24, 0xFB	; 251
     b88:	8c 93       	st	X, r24
	#endif                    
 
	#if PARITY_CHECK  == NON  
	CLR_BIT(Local_u8UCSRC,4); 
     b8a:	89 81       	ldd	r24, Y+1	; 0x01
     b8c:	8f 7e       	andi	r24, 0xEF	; 239
     b8e:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_u8UCSRC,5); 
     b90:	89 81       	ldd	r24, Y+1	; 0x01
     b92:	8f 7d       	andi	r24, 0xDF	; 223
     b94:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_u8UCSRC,4); 
	SET_BIT(Local_u8UCSRC,5);
	#endif                    
 
	#if STOP_BITS == 1        
	CLR_BIT(Local_u8UCSRC,3); 
     b96:	89 81       	ldd	r24, Y+1	; 0x01
     b98:	87 7f       	andi	r24, 0xF7	; 247
     b9a:	89 83       	std	Y+1, r24	; 0x01
	#elif STOP_BITS == 2      
	SET_BIT(Local_u8UCSRC,3); 
	#endif                    
  
	UCSRC = Local_u8UCSRC;    
     b9c:	e0 e4       	ldi	r30, 0x40	; 64
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	89 81       	ldd	r24, Y+1	; 0x01
     ba2:	80 83       	st	Z, r24
 
	#if   BUAD_RATE   == 9600 
	UBRRL = 103;	          
     ba4:	e9 e2       	ldi	r30, 0x29	; 41
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	87 e6       	ldi	r24, 0x67	; 103
     baa:	80 83       	st	Z, r24
	UBRRL = 8;
	#elif BUAD_RATE   == 38400
	UBRRL = 25;
	#endif                    
	
	SET_BIT(UCSRB,3);  				//to enable uart rx
     bac:	aa e2       	ldi	r26, 0x2A	; 42
     bae:	b0 e0       	ldi	r27, 0x00	; 0
     bb0:	ea e2       	ldi	r30, 0x2A	; 42
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	80 81       	ld	r24, Z
     bb6:	88 60       	ori	r24, 0x08	; 8
     bb8:	8c 93       	st	X, r24
	SET_BIT(UCSRB,4);  				//to enable uart tx
     bba:	aa e2       	ldi	r26, 0x2A	; 42
     bbc:	b0 e0       	ldi	r27, 0x00	; 0
     bbe:	ea e2       	ldi	r30, 0x2A	; 42
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	80 61       	ori	r24, 0x10	; 16
     bc6:	8c 93       	st	X, r24
}
     bc8:	0f 90       	pop	r0
     bca:	cf 91       	pop	r28
     bcc:	df 91       	pop	r29
     bce:	08 95       	ret

00000bd0 <MUART_voidSendData>:
 * Description : Send Data														*
 * Arguments   : Copy_u8Data			 										*
 * return      : void														    *
 *==============================================================================*/
void MUART_voidSendData(u8 Copy_u8Data)
{
     bd0:	df 93       	push	r29
     bd2:	cf 93       	push	r28
     bd4:	0f 92       	push	r0
     bd6:	cd b7       	in	r28, 0x3d	; 61
     bd8:	de b7       	in	r29, 0x3e	; 62
     bda:	89 83       	std	Y+1, r24	; 0x01
	UDR = Copy_u8Data;
     bdc:	ec e2       	ldi	r30, 0x2C	; 44
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	89 81       	ldd	r24, Y+1	; 0x01
     be2:	80 83       	st	Z, r24
	while(GET_BIT(UCSRA,6) == 0);
     be4:	eb e2       	ldi	r30, 0x2B	; 43
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	80 81       	ld	r24, Z
     bea:	82 95       	swap	r24
     bec:	86 95       	lsr	r24
     bee:	86 95       	lsr	r24
     bf0:	83 70       	andi	r24, 0x03	; 3
     bf2:	88 2f       	mov	r24, r24
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	81 70       	andi	r24, 0x01	; 1
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	00 97       	sbiw	r24, 0x00	; 0
     bfc:	99 f3       	breq	.-26     	; 0xbe4 <MUART_voidSendData+0x14>
}
     bfe:	0f 90       	pop	r0
     c00:	cf 91       	pop	r28
     c02:	df 91       	pop	r29
     c04:	08 95       	ret

00000c06 <MUART_u8RcvData>:
 * Description : Receive Data													*
 * Arguments   : void															*
 * return      : Value of UDR													*
 *==============================================================================*/
u8	 MUART_u8RcvData(void)
{
     c06:	df 93       	push	r29
     c08:	cf 93       	push	r28
     c0a:	cd b7       	in	r28, 0x3d	; 61
     c0c:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(UCSRA,7) == 0);
     c0e:	eb e2       	ldi	r30, 0x2B	; 43
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	80 81       	ld	r24, Z
     c14:	88 23       	and	r24, r24
     c16:	dc f7       	brge	.-10     	; 0xc0e <MUART_u8RcvData+0x8>
	return UDR;
     c18:	ec e2       	ldi	r30, 0x2C	; 44
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	80 81       	ld	r24, Z
}
     c1e:	cf 91       	pop	r28
     c20:	df 91       	pop	r29
     c22:	08 95       	ret

00000c24 <TIMER0_voidInit>:


void	(*TIMER_pvCallBackFunc[6])(void);

void TIMER0_voidInit(u8 Copy_u8CompareMode, u8 Copy_u8TimerMode , u8 Copy_u8Prescaler)
{
     c24:	df 93       	push	r29
     c26:	cf 93       	push	r28
     c28:	00 d0       	rcall	.+0      	; 0xc2a <TIMER0_voidInit+0x6>
     c2a:	00 d0       	rcall	.+0      	; 0xc2c <TIMER0_voidInit+0x8>
     c2c:	0f 92       	push	r0
     c2e:	cd b7       	in	r28, 0x3d	; 61
     c30:	de b7       	in	r29, 0x3e	; 62
     c32:	89 83       	std	Y+1, r24	; 0x01
     c34:	6a 83       	std	Y+2, r22	; 0x02
     c36:	4b 83       	std	Y+3, r20	; 0x03
	TCCR0 &= 0b11001111;
     c38:	a3 e5       	ldi	r26, 0x53	; 83
     c3a:	b0 e0       	ldi	r27, 0x00	; 0
     c3c:	e3 e5       	ldi	r30, 0x53	; 83
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	80 81       	ld	r24, Z
     c42:	8f 7c       	andi	r24, 0xCF	; 207
     c44:	8c 93       	st	X, r24
	TCCR0 |= Copy_u8CompareMode << 4;
     c46:	a3 e5       	ldi	r26, 0x53	; 83
     c48:	b0 e0       	ldi	r27, 0x00	; 0
     c4a:	e3 e5       	ldi	r30, 0x53	; 83
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	80 81       	ld	r24, Z
     c50:	28 2f       	mov	r18, r24
     c52:	89 81       	ldd	r24, Y+1	; 0x01
     c54:	88 2f       	mov	r24, r24
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	82 95       	swap	r24
     c5a:	92 95       	swap	r25
     c5c:	90 7f       	andi	r25, 0xF0	; 240
     c5e:	98 27       	eor	r25, r24
     c60:	80 7f       	andi	r24, 0xF0	; 240
     c62:	98 27       	eor	r25, r24
     c64:	82 2b       	or	r24, r18
     c66:	8c 93       	st	X, r24
	switch(Copy_u8TimerMode)
     c68:	8a 81       	ldd	r24, Y+2	; 0x02
     c6a:	28 2f       	mov	r18, r24
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	3d 83       	std	Y+5, r19	; 0x05
     c70:	2c 83       	std	Y+4, r18	; 0x04
     c72:	8c 81       	ldd	r24, Y+4	; 0x04
     c74:	9d 81       	ldd	r25, Y+5	; 0x05
     c76:	82 30       	cpi	r24, 0x02	; 2
     c78:	91 05       	cpc	r25, r1
     c7a:	61 f1       	breq	.+88     	; 0xcd4 <TIMER0_voidInit+0xb0>
     c7c:	2c 81       	ldd	r18, Y+4	; 0x04
     c7e:	3d 81       	ldd	r19, Y+5	; 0x05
     c80:	23 30       	cpi	r18, 0x03	; 3
     c82:	31 05       	cpc	r19, r1
     c84:	34 f4       	brge	.+12     	; 0xc92 <TIMER0_voidInit+0x6e>
     c86:	8c 81       	ldd	r24, Y+4	; 0x04
     c88:	9d 81       	ldd	r25, Y+5	; 0x05
     c8a:	81 30       	cpi	r24, 0x01	; 1
     c8c:	91 05       	cpc	r25, r1
     c8e:	61 f0       	breq	.+24     	; 0xca8 <TIMER0_voidInit+0x84>
     c90:	54 c0       	rjmp	.+168    	; 0xd3a <TIMER0_voidInit+0x116>
     c92:	2c 81       	ldd	r18, Y+4	; 0x04
     c94:	3d 81       	ldd	r19, Y+5	; 0x05
     c96:	23 30       	cpi	r18, 0x03	; 3
     c98:	31 05       	cpc	r19, r1
     c9a:	91 f1       	breq	.+100    	; 0xd00 <TIMER0_voidInit+0xdc>
     c9c:	8c 81       	ldd	r24, Y+4	; 0x04
     c9e:	9d 81       	ldd	r25, Y+5	; 0x05
     ca0:	84 30       	cpi	r24, 0x04	; 4
     ca2:	91 05       	cpc	r25, r1
     ca4:	e1 f1       	breq	.+120    	; 0xd1e <TIMER0_voidInit+0xfa>
     ca6:	49 c0       	rjmp	.+146    	; 0xd3a <TIMER0_voidInit+0x116>
	{
	case NORMAL_MODE:
		CLR_BIT(TCCR0,3);
     ca8:	a3 e5       	ldi	r26, 0x53	; 83
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	e3 e5       	ldi	r30, 0x53	; 83
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
     cb2:	87 7f       	andi	r24, 0xF7	; 247
     cb4:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,6);
     cb6:	a3 e5       	ldi	r26, 0x53	; 83
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	e3 e5       	ldi	r30, 0x53	; 83
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	8f 7b       	andi	r24, 0xBF	; 191
     cc2:	8c 93       	st	X, r24

		SET_BIT(TIMSK ,  0);
     cc4:	a9 e5       	ldi	r26, 0x59	; 89
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	e9 e5       	ldi	r30, 0x59	; 89
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	81 60       	ori	r24, 0x01	; 1
     cd0:	8c 93       	st	X, r24
     cd2:	33 c0       	rjmp	.+102    	; 0xd3a <TIMER0_voidInit+0x116>
		break;
	case CTC_MODE:
		SET_BIT(TCCR0,3);
     cd4:	a3 e5       	ldi	r26, 0x53	; 83
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	e3 e5       	ldi	r30, 0x53	; 83
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	88 60       	ori	r24, 0x08	; 8
     ce0:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,6);
     ce2:	a3 e5       	ldi	r26, 0x53	; 83
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e3 e5       	ldi	r30, 0x53	; 83
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	8f 7b       	andi	r24, 0xBF	; 191
     cee:	8c 93       	st	X, r24

		SET_BIT(TIMSK ,  1);
     cf0:	a9 e5       	ldi	r26, 0x59	; 89
     cf2:	b0 e0       	ldi	r27, 0x00	; 0
     cf4:	e9 e5       	ldi	r30, 0x59	; 89
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 81       	ld	r24, Z
     cfa:	82 60       	ori	r24, 0x02	; 2
     cfc:	8c 93       	st	X, r24
     cfe:	1d c0       	rjmp	.+58     	; 0xd3a <TIMER0_voidInit+0x116>
		break;
	case FASTPWM_MODE:
		SET_BIT(TCCR0,3);
     d00:	a3 e5       	ldi	r26, 0x53	; 83
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	e3 e5       	ldi	r30, 0x53	; 83
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	88 60       	ori	r24, 0x08	; 8
     d0c:	8c 93       	st	X, r24
		SET_BIT(TCCR0,6);
     d0e:	a3 e5       	ldi	r26, 0x53	; 83
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	e3 e5       	ldi	r30, 0x53	; 83
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	80 64       	ori	r24, 0x40	; 64
     d1a:	8c 93       	st	X, r24
     d1c:	0e c0       	rjmp	.+28     	; 0xd3a <TIMER0_voidInit+0x116>

		break;
	case PHASECHORECT_MODE:
		CLR_BIT(TCCR0,3);
     d1e:	a3 e5       	ldi	r26, 0x53	; 83
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	e3 e5       	ldi	r30, 0x53	; 83
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	87 7f       	andi	r24, 0xF7	; 247
     d2a:	8c 93       	st	X, r24
		SET_BIT(TCCR0,6);
     d2c:	a3 e5       	ldi	r26, 0x53	; 83
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	e3 e5       	ldi	r30, 0x53	; 83
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	80 64       	ori	r24, 0x40	; 64
     d38:	8c 93       	st	X, r24
	default :

		break;
	}

	TCCR0 &= 0B11111000;
     d3a:	a3 e5       	ldi	r26, 0x53	; 83
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	e3 e5       	ldi	r30, 0x53	; 83
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	88 7f       	andi	r24, 0xF8	; 248
     d46:	8c 93       	st	X, r24
	TCCR0 |= Copy_u8Prescaler;
     d48:	a3 e5       	ldi	r26, 0x53	; 83
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	e3 e5       	ldi	r30, 0x53	; 83
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	90 81       	ld	r25, Z
     d52:	8b 81       	ldd	r24, Y+3	; 0x03
     d54:	89 2b       	or	r24, r25
     d56:	8c 93       	st	X, r24
}
     d58:	0f 90       	pop	r0
     d5a:	0f 90       	pop	r0
     d5c:	0f 90       	pop	r0
     d5e:	0f 90       	pop	r0
     d60:	0f 90       	pop	r0
     d62:	cf 91       	pop	r28
     d64:	df 91       	pop	r29
     d66:	08 95       	ret

00000d68 <TIMER0_u8ReadTimerValue>:
u8  TIMER0_u8ReadTimerValue(void)
{
     d68:	df 93       	push	r29
     d6a:	cf 93       	push	r28
     d6c:	cd b7       	in	r28, 0x3d	; 61
     d6e:	de b7       	in	r29, 0x3e	; 62
	return TCNT0;
     d70:	e2 e5       	ldi	r30, 0x52	; 82
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
}
     d76:	cf 91       	pop	r28
     d78:	df 91       	pop	r29
     d7a:	08 95       	ret

00000d7c <TIMER0_voiduSetTimerValue>:
void TIMER0_voiduSetTimerValue(u8 Copy_u8Value)
{
     d7c:	df 93       	push	r29
     d7e:	cf 93       	push	r28
     d80:	0f 92       	push	r0
     d82:	cd b7       	in	r28, 0x3d	; 61
     d84:	de b7       	in	r29, 0x3e	; 62
     d86:	89 83       	std	Y+1, r24	; 0x01
	 TCNT0 = Copy_u8Value;
     d88:	e2 e5       	ldi	r30, 0x52	; 82
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	89 81       	ldd	r24, Y+1	; 0x01
     d8e:	80 83       	st	Z, r24
}
     d90:	0f 90       	pop	r0
     d92:	cf 91       	pop	r28
     d94:	df 91       	pop	r29
     d96:	08 95       	ret

00000d98 <TIMER0_voidSetCompareMatchValue>:

void TIMER0_voidSetCompareMatchValue(u8 Copy_u8Value)
{
     d98:	df 93       	push	r29
     d9a:	cf 93       	push	r28
     d9c:	0f 92       	push	r0
     d9e:	cd b7       	in	r28, 0x3d	; 61
     da0:	de b7       	in	r29, 0x3e	; 62
     da2:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8Value;
     da4:	ec e5       	ldi	r30, 0x5C	; 92
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	89 81       	ldd	r24, Y+1	; 0x01
     daa:	80 83       	st	Z, r24
}
     dac:	0f 90       	pop	r0
     dae:	cf 91       	pop	r28
     db0:	df 91       	pop	r29
     db2:	08 95       	ret

00000db4 <TIMER1_voidInit>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////////


void TIMER1_voidInit(u8 Copy_u8Channel ,u8 Copy_u8CompareMode, u8 Copy_u8TimerMode , u8 Copy_u8Prescaler)
{
     db4:	df 93       	push	r29
     db6:	cf 93       	push	r28
     db8:	cd b7       	in	r28, 0x3d	; 61
     dba:	de b7       	in	r29, 0x3e	; 62
     dbc:	28 97       	sbiw	r28, 0x08	; 8
     dbe:	0f b6       	in	r0, 0x3f	; 63
     dc0:	f8 94       	cli
     dc2:	de bf       	out	0x3e, r29	; 62
     dc4:	0f be       	out	0x3f, r0	; 63
     dc6:	cd bf       	out	0x3d, r28	; 61
     dc8:	89 83       	std	Y+1, r24	; 0x01
     dca:	6a 83       	std	Y+2, r22	; 0x02
     dcc:	4b 83       	std	Y+3, r20	; 0x03
     dce:	2c 83       	std	Y+4, r18	; 0x04
	if( Copy_u8Channel == TIMER1_CHANNEL_A)
     dd0:	89 81       	ldd	r24, Y+1	; 0x01
     dd2:	81 30       	cpi	r24, 0x01	; 1
     dd4:	09 f0       	breq	.+2      	; 0xdd8 <TIMER1_voidInit+0x24>
     dd6:	85 c0       	rjmp	.+266    	; 0xee2 <TIMER1_voidInit+0x12e>
	{
		TCCR1A &= 0b00111111;
     dd8:	af e4       	ldi	r26, 0x4F	; 79
     dda:	b0 e0       	ldi	r27, 0x00	; 0
     ddc:	ef e4       	ldi	r30, 0x4F	; 79
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	80 81       	ld	r24, Z
     de2:	8f 73       	andi	r24, 0x3F	; 63
     de4:	8c 93       	st	X, r24
		TCCR1A |= Copy_u8CompareMode << 6;
     de6:	af e4       	ldi	r26, 0x4F	; 79
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	ef e4       	ldi	r30, 0x4F	; 79
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	28 2f       	mov	r18, r24
     df2:	8a 81       	ldd	r24, Y+2	; 0x02
     df4:	88 2f       	mov	r24, r24
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	00 24       	eor	r0, r0
     dfa:	96 95       	lsr	r25
     dfc:	87 95       	ror	r24
     dfe:	07 94       	ror	r0
     e00:	96 95       	lsr	r25
     e02:	87 95       	ror	r24
     e04:	07 94       	ror	r0
     e06:	98 2f       	mov	r25, r24
     e08:	80 2d       	mov	r24, r0
     e0a:	82 2b       	or	r24, r18
     e0c:	8c 93       	st	X, r24
		switch(Copy_u8TimerMode)
     e0e:	8b 81       	ldd	r24, Y+3	; 0x03
     e10:	28 2f       	mov	r18, r24
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	38 87       	std	Y+8, r19	; 0x08
     e16:	2f 83       	std	Y+7, r18	; 0x07
     e18:	8f 81       	ldd	r24, Y+7	; 0x07
     e1a:	98 85       	ldd	r25, Y+8	; 0x08
     e1c:	82 30       	cpi	r24, 0x02	; 2
     e1e:	91 05       	cpc	r25, r1
     e20:	61 f1       	breq	.+88     	; 0xe7a <TIMER1_voidInit+0xc6>
     e22:	2f 81       	ldd	r18, Y+7	; 0x07
     e24:	38 85       	ldd	r19, Y+8	; 0x08
     e26:	23 30       	cpi	r18, 0x03	; 3
     e28:	31 05       	cpc	r19, r1
     e2a:	34 f4       	brge	.+12     	; 0xe38 <TIMER1_voidInit+0x84>
     e2c:	8f 81       	ldd	r24, Y+7	; 0x07
     e2e:	98 85       	ldd	r25, Y+8	; 0x08
     e30:	81 30       	cpi	r24, 0x01	; 1
     e32:	91 05       	cpc	r25, r1
     e34:	61 f0       	breq	.+24     	; 0xe4e <TIMER1_voidInit+0x9a>
     e36:	da c0       	rjmp	.+436    	; 0xfec <TIMER1_voidInit+0x238>
     e38:	2f 81       	ldd	r18, Y+7	; 0x07
     e3a:	38 85       	ldd	r19, Y+8	; 0x08
     e3c:	23 30       	cpi	r18, 0x03	; 3
     e3e:	31 05       	cpc	r19, r1
     e40:	91 f1       	breq	.+100    	; 0xea6 <TIMER1_voidInit+0xf2>
     e42:	8f 81       	ldd	r24, Y+7	; 0x07
     e44:	98 85       	ldd	r25, Y+8	; 0x08
     e46:	84 30       	cpi	r24, 0x04	; 4
     e48:	91 05       	cpc	r25, r1
     e4a:	e1 f1       	breq	.+120    	; 0xec4 <TIMER1_voidInit+0x110>
     e4c:	cf c0       	rjmp	.+414    	; 0xfec <TIMER1_voidInit+0x238>
		{
		case NORMAL_MODE:
			CLR_BIT(TCCR1A , 0);
     e4e:	af e4       	ldi	r26, 0x4F	; 79
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	ef e4       	ldi	r30, 0x4F	; 79
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	8e 7f       	andi	r24, 0xFE	; 254
     e5a:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A , 1);
     e5c:	af e4       	ldi	r26, 0x4F	; 79
     e5e:	b0 e0       	ldi	r27, 0x00	; 0
     e60:	ef e4       	ldi	r30, 0x4F	; 79
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	8d 7f       	andi	r24, 0xFD	; 253
     e68:	8c 93       	st	X, r24

			SET_BIT(TIMSK ,  2);
     e6a:	a9 e5       	ldi	r26, 0x59	; 89
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
     e6e:	e9 e5       	ldi	r30, 0x59	; 89
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	84 60       	ori	r24, 0x04	; 4
     e76:	8c 93       	st	X, r24
     e78:	b9 c0       	rjmp	.+370    	; 0xfec <TIMER1_voidInit+0x238>
			break;
		case CTC_MODE:
			CLR_BIT(TCCR1A , 0);
     e7a:	af e4       	ldi	r26, 0x4F	; 79
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	ef e4       	ldi	r30, 0x4F	; 79
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	8e 7f       	andi	r24, 0xFE	; 254
     e86:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A , 1);
     e88:	af e4       	ldi	r26, 0x4F	; 79
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	ef e4       	ldi	r30, 0x4F	; 79
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	8d 7f       	andi	r24, 0xFD	; 253
     e94:	8c 93       	st	X, r24

			SET_BIT(TIMSK ,  4);
     e96:	a9 e5       	ldi	r26, 0x59	; 89
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	e9 e5       	ldi	r30, 0x59	; 89
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	80 61       	ori	r24, 0x10	; 16
     ea2:	8c 93       	st	X, r24
     ea4:	a3 c0       	rjmp	.+326    	; 0xfec <TIMER1_voidInit+0x238>
			break;
		case FASTPWM_MODE:
			CLR_BIT(TCCR1A , 0);
     ea6:	af e4       	ldi	r26, 0x4F	; 79
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	ef e4       	ldi	r30, 0x4F	; 79
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	8e 7f       	andi	r24, 0xFE	; 254
     eb2:	8c 93       	st	X, r24
			SET_BIT(TCCR1A , 1);
     eb4:	af e4       	ldi	r26, 0x4F	; 79
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	ef e4       	ldi	r30, 0x4F	; 79
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	82 60       	ori	r24, 0x02	; 2
     ec0:	8c 93       	st	X, r24
     ec2:	94 c0       	rjmp	.+296    	; 0xfec <TIMER1_voidInit+0x238>
			break;
		case PHASECHORECT_MODE:
			CLR_BIT(TCCR1A , 0);
     ec4:	af e4       	ldi	r26, 0x4F	; 79
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	ef e4       	ldi	r30, 0x4F	; 79
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	8e 7f       	andi	r24, 0xFE	; 254
     ed0:	8c 93       	st	X, r24
			SET_BIT(TCCR1A , 1);
     ed2:	af e4       	ldi	r26, 0x4F	; 79
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	ef e4       	ldi	r30, 0x4F	; 79
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	82 60       	ori	r24, 0x02	; 2
     ede:	8c 93       	st	X, r24
     ee0:	85 c0       	rjmp	.+266    	; 0xfec <TIMER1_voidInit+0x238>
		default :

			break;
		}
	}
	else if( Copy_u8Channel == TIMER1_CHANNEL_B)
     ee2:	89 81       	ldd	r24, Y+1	; 0x01
     ee4:	82 30       	cpi	r24, 0x02	; 2
     ee6:	09 f0       	breq	.+2      	; 0xeea <TIMER1_voidInit+0x136>
     ee8:	81 c0       	rjmp	.+258    	; 0xfec <TIMER1_voidInit+0x238>
	{
		TCCR1B &= 0b11001111;
     eea:	ae e4       	ldi	r26, 0x4E	; 78
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	ee e4       	ldi	r30, 0x4E	; 78
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	8f 7c       	andi	r24, 0xCF	; 207
     ef6:	8c 93       	st	X, r24
		TCCR1B |= Copy_u8CompareMode << 4;
     ef8:	ae e4       	ldi	r26, 0x4E	; 78
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	ee e4       	ldi	r30, 0x4E	; 78
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	28 2f       	mov	r18, r24
     f04:	8a 81       	ldd	r24, Y+2	; 0x02
     f06:	88 2f       	mov	r24, r24
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	82 95       	swap	r24
     f0c:	92 95       	swap	r25
     f0e:	90 7f       	andi	r25, 0xF0	; 240
     f10:	98 27       	eor	r25, r24
     f12:	80 7f       	andi	r24, 0xF0	; 240
     f14:	98 27       	eor	r25, r24
     f16:	82 2b       	or	r24, r18
     f18:	8c 93       	st	X, r24
		switch(Copy_u8TimerMode)
     f1a:	8b 81       	ldd	r24, Y+3	; 0x03
     f1c:	28 2f       	mov	r18, r24
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	3e 83       	std	Y+6, r19	; 0x06
     f22:	2d 83       	std	Y+5, r18	; 0x05
     f24:	8d 81       	ldd	r24, Y+5	; 0x05
     f26:	9e 81       	ldd	r25, Y+6	; 0x06
     f28:	82 30       	cpi	r24, 0x02	; 2
     f2a:	91 05       	cpc	r25, r1
     f2c:	61 f1       	breq	.+88     	; 0xf86 <TIMER1_voidInit+0x1d2>
     f2e:	2d 81       	ldd	r18, Y+5	; 0x05
     f30:	3e 81       	ldd	r19, Y+6	; 0x06
     f32:	23 30       	cpi	r18, 0x03	; 3
     f34:	31 05       	cpc	r19, r1
     f36:	34 f4       	brge	.+12     	; 0xf44 <TIMER1_voidInit+0x190>
     f38:	8d 81       	ldd	r24, Y+5	; 0x05
     f3a:	9e 81       	ldd	r25, Y+6	; 0x06
     f3c:	81 30       	cpi	r24, 0x01	; 1
     f3e:	91 05       	cpc	r25, r1
     f40:	61 f0       	breq	.+24     	; 0xf5a <TIMER1_voidInit+0x1a6>
     f42:	54 c0       	rjmp	.+168    	; 0xfec <TIMER1_voidInit+0x238>
     f44:	2d 81       	ldd	r18, Y+5	; 0x05
     f46:	3e 81       	ldd	r19, Y+6	; 0x06
     f48:	23 30       	cpi	r18, 0x03	; 3
     f4a:	31 05       	cpc	r19, r1
     f4c:	91 f1       	breq	.+100    	; 0xfb2 <TIMER1_voidInit+0x1fe>
     f4e:	8d 81       	ldd	r24, Y+5	; 0x05
     f50:	9e 81       	ldd	r25, Y+6	; 0x06
     f52:	84 30       	cpi	r24, 0x04	; 4
     f54:	91 05       	cpc	r25, r1
     f56:	e1 f1       	breq	.+120    	; 0xfd0 <TIMER1_voidInit+0x21c>
     f58:	49 c0       	rjmp	.+146    	; 0xfec <TIMER1_voidInit+0x238>
		{
		case NORMAL_MODE:
			CLR_BIT(TCCR1B , 3);
     f5a:	ae e4       	ldi	r26, 0x4E	; 78
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	ee e4       	ldi	r30, 0x4E	; 78
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	87 7f       	andi	r24, 0xF7	; 247
     f66:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B , 4);
     f68:	ae e4       	ldi	r26, 0x4E	; 78
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	ee e4       	ldi	r30, 0x4E	; 78
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	8f 7e       	andi	r24, 0xEF	; 239
     f74:	8c 93       	st	X, r24

			SET_BIT(TIMSK ,  2);
     f76:	a9 e5       	ldi	r26, 0x59	; 89
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	e9 e5       	ldi	r30, 0x59	; 89
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	84 60       	ori	r24, 0x04	; 4
     f82:	8c 93       	st	X, r24
     f84:	33 c0       	rjmp	.+102    	; 0xfec <TIMER1_voidInit+0x238>
			break;
		case CTC_MODE:
			SET_BIT(TCCR1B , 3);
     f86:	ae e4       	ldi	r26, 0x4E	; 78
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	ee e4       	ldi	r30, 0x4E	; 78
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	88 60       	ori	r24, 0x08	; 8
     f92:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B , 4);
     f94:	ae e4       	ldi	r26, 0x4E	; 78
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	ee e4       	ldi	r30, 0x4E	; 78
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	8f 7e       	andi	r24, 0xEF	; 239
     fa0:	8c 93       	st	X, r24

			SET_BIT(TIMSK ,  3);
     fa2:	a9 e5       	ldi	r26, 0x59	; 89
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	e9 e5       	ldi	r30, 0x59	; 89
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	88 60       	ori	r24, 0x08	; 8
     fae:	8c 93       	st	X, r24
     fb0:	1d c0       	rjmp	.+58     	; 0xfec <TIMER1_voidInit+0x238>
			break;
		case FASTPWM_MODE:
			SET_BIT(TCCR1B , 3);
     fb2:	ae e4       	ldi	r26, 0x4E	; 78
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	ee e4       	ldi	r30, 0x4E	; 78
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	88 60       	ori	r24, 0x08	; 8
     fbe:	8c 93       	st	X, r24
			SET_BIT(TCCR1B , 4);
     fc0:	ae e4       	ldi	r26, 0x4E	; 78
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	ee e4       	ldi	r30, 0x4E	; 78
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	80 61       	ori	r24, 0x10	; 16
     fcc:	8c 93       	st	X, r24
     fce:	0e c0       	rjmp	.+28     	; 0xfec <TIMER1_voidInit+0x238>
			break;
		case PHASECHORECT_MODE:
			CLR_BIT(TCCR1B , 3);
     fd0:	ae e4       	ldi	r26, 0x4E	; 78
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	ee e4       	ldi	r30, 0x4E	; 78
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	87 7f       	andi	r24, 0xF7	; 247
     fdc:	8c 93       	st	X, r24
			SET_BIT(TCCR1B , 4);
     fde:	ae e4       	ldi	r26, 0x4E	; 78
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	ee e4       	ldi	r30, 0x4E	; 78
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	80 61       	ori	r24, 0x10	; 16
     fea:	8c 93       	st	X, r24
	}
	else
	{

	}
	TCCR1B &= 0b11111000;
     fec:	ae e4       	ldi	r26, 0x4E	; 78
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	ee e4       	ldi	r30, 0x4E	; 78
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	88 7f       	andi	r24, 0xF8	; 248
     ff8:	8c 93       	st	X, r24
	TCCR1B |= Copy_u8Prescaler;
     ffa:	ae e4       	ldi	r26, 0x4E	; 78
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	ee e4       	ldi	r30, 0x4E	; 78
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	90 81       	ld	r25, Z
    1004:	8c 81       	ldd	r24, Y+4	; 0x04
    1006:	89 2b       	or	r24, r25
    1008:	8c 93       	st	X, r24
}
    100a:	28 96       	adiw	r28, 0x08	; 8
    100c:	0f b6       	in	r0, 0x3f	; 63
    100e:	f8 94       	cli
    1010:	de bf       	out	0x3e, r29	; 62
    1012:	0f be       	out	0x3f, r0	; 63
    1014:	cd bf       	out	0x3d, r28	; 61
    1016:	cf 91       	pop	r28
    1018:	df 91       	pop	r29
    101a:	08 95       	ret

0000101c <TIMER1_voidSetCompareMatchValue>:

void TIMER1_voidSetCompareMatchValue(u8 Copy_u8Channel ,u16 Copy_u16Value)
{
    101c:	df 93       	push	r29
    101e:	cf 93       	push	r28
    1020:	00 d0       	rcall	.+0      	; 0x1022 <TIMER1_voidSetCompareMatchValue+0x6>
    1022:	00 d0       	rcall	.+0      	; 0x1024 <TIMER1_voidSetCompareMatchValue+0x8>
    1024:	0f 92       	push	r0
    1026:	cd b7       	in	r28, 0x3d	; 61
    1028:	de b7       	in	r29, 0x3e	; 62
    102a:	89 83       	std	Y+1, r24	; 0x01
    102c:	7b 83       	std	Y+3, r23	; 0x03
    102e:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Channel)
    1030:	89 81       	ldd	r24, Y+1	; 0x01
    1032:	28 2f       	mov	r18, r24
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	3d 83       	std	Y+5, r19	; 0x05
    1038:	2c 83       	std	Y+4, r18	; 0x04
    103a:	8c 81       	ldd	r24, Y+4	; 0x04
    103c:	9d 81       	ldd	r25, Y+5	; 0x05
    103e:	81 30       	cpi	r24, 0x01	; 1
    1040:	91 05       	cpc	r25, r1
    1042:	31 f0       	breq	.+12     	; 0x1050 <TIMER1_voidSetCompareMatchValue+0x34>
    1044:	2c 81       	ldd	r18, Y+4	; 0x04
    1046:	3d 81       	ldd	r19, Y+5	; 0x05
    1048:	22 30       	cpi	r18, 0x02	; 2
    104a:	31 05       	cpc	r19, r1
    104c:	41 f0       	breq	.+16     	; 0x105e <TIMER1_voidSetCompareMatchValue+0x42>
    104e:	0d c0       	rjmp	.+26     	; 0x106a <TIMER1_voidSetCompareMatchValue+0x4e>
	{
	case TIMER1_CHANNEL_A:
		OCR1A = Copy_u16Value;
    1050:	ea e4       	ldi	r30, 0x4A	; 74
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	8a 81       	ldd	r24, Y+2	; 0x02
    1056:	9b 81       	ldd	r25, Y+3	; 0x03
    1058:	91 83       	std	Z+1, r25	; 0x01
    105a:	80 83       	st	Z, r24
    105c:	06 c0       	rjmp	.+12     	; 0x106a <TIMER1_voidSetCompareMatchValue+0x4e>
		break;
	case TIMER1_CHANNEL_B:
		OCR1B = Copy_u16Value;
    105e:	e8 e4       	ldi	r30, 0x48	; 72
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	8a 81       	ldd	r24, Y+2	; 0x02
    1064:	9b 81       	ldd	r25, Y+3	; 0x03
    1066:	91 83       	std	Z+1, r25	; 0x01
    1068:	80 83       	st	Z, r24
		break;
	default:
		break;
	}
}
    106a:	0f 90       	pop	r0
    106c:	0f 90       	pop	r0
    106e:	0f 90       	pop	r0
    1070:	0f 90       	pop	r0
    1072:	0f 90       	pop	r0
    1074:	cf 91       	pop	r28
    1076:	df 91       	pop	r29
    1078:	08 95       	ret

0000107a <TIMER1_voiduSetTimerValue>:

void TIMER1_voiduSetTimerValue(u16 Copy_u16Value)
{
    107a:	df 93       	push	r29
    107c:	cf 93       	push	r28
    107e:	00 d0       	rcall	.+0      	; 0x1080 <TIMER1_voiduSetTimerValue+0x6>
    1080:	cd b7       	in	r28, 0x3d	; 61
    1082:	de b7       	in	r29, 0x3e	; 62
    1084:	9a 83       	std	Y+2, r25	; 0x02
    1086:	89 83       	std	Y+1, r24	; 0x01
	 TCNT1 = Copy_u16Value;
    1088:	ec e4       	ldi	r30, 0x4C	; 76
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	80 83       	st	Z, r24
}
    1090:	0f 90       	pop	r0
    1092:	0f 90       	pop	r0
    1094:	cf 91       	pop	r28
    1096:	df 91       	pop	r29
    1098:	08 95       	ret

0000109a <TIMER1_voidu16ReadTimerValue>:

u16 TIMER1_voidu16ReadTimerValue(void)
{
    109a:	df 93       	push	r29
    109c:	cf 93       	push	r28
    109e:	cd b7       	in	r28, 0x3d	; 61
    10a0:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
    10a2:	ec e4       	ldi	r30, 0x4C	; 76
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	88 2f       	mov	r24, r24
    10aa:	90 e0       	ldi	r25, 0x00	; 0
}
    10ac:	cf 91       	pop	r28
    10ae:	df 91       	pop	r29
    10b0:	08 95       	ret

000010b2 <TIMER1_voidSetMode_14>:


void TIMER1_voidSetMode_14(u8 Copy_u8Channel ,u8 Copy_u8CompareMode , u8 Copy_u8Prescaler)
{
    10b2:	df 93       	push	r29
    10b4:	cf 93       	push	r28
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <TIMER1_voidSetMode_14+0x6>
    10b8:	0f 92       	push	r0
    10ba:	cd b7       	in	r28, 0x3d	; 61
    10bc:	de b7       	in	r29, 0x3e	; 62
    10be:	89 83       	std	Y+1, r24	; 0x01
    10c0:	6a 83       	std	Y+2, r22	; 0x02
    10c2:	4b 83       	std	Y+3, r20	; 0x03
	CLR_BIT(TCCR1A , 0);
    10c4:	af e4       	ldi	r26, 0x4F	; 79
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	ef e4       	ldi	r30, 0x4F	; 79
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	8e 7f       	andi	r24, 0xFE	; 254
    10d0:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , 1);
    10d2:	af e4       	ldi	r26, 0x4F	; 79
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	ef e4       	ldi	r30, 0x4F	; 79
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	82 60       	ori	r24, 0x02	; 2
    10de:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , 3);
    10e0:	ae e4       	ldi	r26, 0x4E	; 78
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	ee e4       	ldi	r30, 0x4E	; 78
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	88 60       	ori	r24, 0x08	; 8
    10ec:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , 4);
    10ee:	ae e4       	ldi	r26, 0x4E	; 78
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	ee e4       	ldi	r30, 0x4E	; 78
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	80 61       	ori	r24, 0x10	; 16
    10fa:	8c 93       	st	X, r24

	if( Copy_u8Channel == TIMER1_CHANNEL_A)
    10fc:	89 81       	ldd	r24, Y+1	; 0x01
    10fe:	81 30       	cpi	r24, 0x01	; 1
    1100:	e1 f4       	brne	.+56     	; 0x113a <TIMER1_voidSetMode_14+0x88>
	{
		TCCR1A &= 0b00111111;
    1102:	af e4       	ldi	r26, 0x4F	; 79
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	ef e4       	ldi	r30, 0x4F	; 79
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	8f 73       	andi	r24, 0x3F	; 63
    110e:	8c 93       	st	X, r24
		TCCR1A |= Copy_u8CompareMode << 6;
    1110:	af e4       	ldi	r26, 0x4F	; 79
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	ef e4       	ldi	r30, 0x4F	; 79
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	28 2f       	mov	r18, r24
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	88 2f       	mov	r24, r24
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	00 24       	eor	r0, r0
    1124:	96 95       	lsr	r25
    1126:	87 95       	ror	r24
    1128:	07 94       	ror	r0
    112a:	96 95       	lsr	r25
    112c:	87 95       	ror	r24
    112e:	07 94       	ror	r0
    1130:	98 2f       	mov	r25, r24
    1132:	80 2d       	mov	r24, r0
    1134:	82 2b       	or	r24, r18
    1136:	8c 93       	st	X, r24
    1138:	1b c0       	rjmp	.+54     	; 0x1170 <TIMER1_voidSetMode_14+0xbe>
	}
	else if( Copy_u8Channel == TIMER1_CHANNEL_B)
    113a:	89 81       	ldd	r24, Y+1	; 0x01
    113c:	82 30       	cpi	r24, 0x02	; 2
    113e:	c1 f4       	brne	.+48     	; 0x1170 <TIMER1_voidSetMode_14+0xbe>
	{
		TCCR1B &= 0b11001111;
    1140:	ae e4       	ldi	r26, 0x4E	; 78
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	ee e4       	ldi	r30, 0x4E	; 78
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	8f 7c       	andi	r24, 0xCF	; 207
    114c:	8c 93       	st	X, r24
		TCCR1B |= Copy_u8CompareMode << 4;
    114e:	ae e4       	ldi	r26, 0x4E	; 78
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	ee e4       	ldi	r30, 0x4E	; 78
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	28 2f       	mov	r18, r24
    115a:	8a 81       	ldd	r24, Y+2	; 0x02
    115c:	88 2f       	mov	r24, r24
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	82 95       	swap	r24
    1162:	92 95       	swap	r25
    1164:	90 7f       	andi	r25, 0xF0	; 240
    1166:	98 27       	eor	r25, r24
    1168:	80 7f       	andi	r24, 0xF0	; 240
    116a:	98 27       	eor	r25, r24
    116c:	82 2b       	or	r24, r18
    116e:	8c 93       	st	X, r24
	}
	else
	{

	}
	TCCR1B &= 0b11111000;
    1170:	ae e4       	ldi	r26, 0x4E	; 78
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	ee e4       	ldi	r30, 0x4E	; 78
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	88 7f       	andi	r24, 0xF8	; 248
    117c:	8c 93       	st	X, r24
	TCCR1B |= Copy_u8Prescaler;
    117e:	ae e4       	ldi	r26, 0x4E	; 78
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	ee e4       	ldi	r30, 0x4E	; 78
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	90 81       	ld	r25, Z
    1188:	8b 81       	ldd	r24, Y+3	; 0x03
    118a:	89 2b       	or	r24, r25
    118c:	8c 93       	st	X, r24
}
    118e:	0f 90       	pop	r0
    1190:	0f 90       	pop	r0
    1192:	0f 90       	pop	r0
    1194:	cf 91       	pop	r28
    1196:	df 91       	pop	r29
    1198:	08 95       	ret

0000119a <TIMER1_voidSetTopValueMode_14>:

void TIMER1_voidSetTopValueMode_14(u16 Copy_u16TopValue)
{
    119a:	df 93       	push	r29
    119c:	cf 93       	push	r28
    119e:	00 d0       	rcall	.+0      	; 0x11a0 <TIMER1_voidSetTopValueMode_14+0x6>
    11a0:	cd b7       	in	r28, 0x3d	; 61
    11a2:	de b7       	in	r29, 0x3e	; 62
    11a4:	9a 83       	std	Y+2, r25	; 0x02
    11a6:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = Copy_u16TopValue;
    11a8:	e6 e4       	ldi	r30, 0x46	; 70
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
    11ae:	9a 81       	ldd	r25, Y+2	; 0x02
    11b0:	91 83       	std	Z+1, r25	; 0x01
    11b2:	80 83       	st	Z, r24
}
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	cf 91       	pop	r28
    11ba:	df 91       	pop	r29
    11bc:	08 95       	ret

000011be <ICU_voidInit>:




void ICU_voidInit(void)
{
    11be:	df 93       	push	r29
    11c0:	cf 93       	push	r28
    11c2:	cd b7       	in	r28, 0x3d	; 61
    11c4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_REG,7);   				   //TO ENABLE GLOBAL INT
    11c6:	af e5       	ldi	r26, 0x5F	; 95
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	ef e5       	ldi	r30, 0x5F	; 95
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	80 68       	ori	r24, 0x80	; 128
    11d2:	8c 93       	st	X, r24
	ICU_SetTriggerEdge(ICU_RISING_EDGE);   // set Rising
    11d4:	82 e0       	ldi	r24, 0x02	; 2
    11d6:	0e 94 05 09 	call	0x120a	; 0x120a <ICU_SetTriggerEdge>
	//CLR_BIT(TCCR1B,3);
	//CLR_BIT(TCCR1A,1);
	//CLR_BIT(TCCR1A,0);

	/*ICU INTERRUPT ENABLLED*/
	SET_BIT(TIMSK,5);
    11da:	a9 e5       	ldi	r26, 0x59	; 89
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e9 e5       	ldi	r30, 0x59	; 89
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	80 62       	ori	r24, 0x20	; 32
    11e6:	8c 93       	st	X, r24

	TCCR1B &= 0b11111000;
    11e8:	ae e4       	ldi	r26, 0x4E	; 78
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	ee e4       	ldi	r30, 0x4E	; 78
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	88 7f       	andi	r24, 0xF8	; 248
    11f4:	8c 93       	st	X, r24
	TCCR1B |= PRESCALER_DIV_BY_8;
    11f6:	ae e4       	ldi	r26, 0x4E	; 78
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	ee e4       	ldi	r30, 0x4E	; 78
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	82 60       	ori	r24, 0x02	; 2
    1202:	8c 93       	st	X, r24
}
    1204:	cf 91       	pop	r28
    1206:	df 91       	pop	r29
    1208:	08 95       	ret

0000120a <ICU_SetTriggerEdge>:

void ICU_SetTriggerEdge( u8 Copy_u8Edge)
{
    120a:	df 93       	push	r29
    120c:	cf 93       	push	r28
    120e:	00 d0       	rcall	.+0      	; 0x1210 <ICU_SetTriggerEdge+0x6>
    1210:	0f 92       	push	r0
    1212:	cd b7       	in	r28, 0x3d	; 61
    1214:	de b7       	in	r29, 0x3e	; 62
    1216:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8Edge)
    1218:	89 81       	ldd	r24, Y+1	; 0x01
    121a:	28 2f       	mov	r18, r24
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	3b 83       	std	Y+3, r19	; 0x03
    1220:	2a 83       	std	Y+2, r18	; 0x02
    1222:	8a 81       	ldd	r24, Y+2	; 0x02
    1224:	9b 81       	ldd	r25, Y+3	; 0x03
    1226:	81 30       	cpi	r24, 0x01	; 1
    1228:	91 05       	cpc	r25, r1
    122a:	31 f0       	breq	.+12     	; 0x1238 <ICU_SetTriggerEdge+0x2e>
    122c:	2a 81       	ldd	r18, Y+2	; 0x02
    122e:	3b 81       	ldd	r19, Y+3	; 0x03
    1230:	22 30       	cpi	r18, 0x02	; 2
    1232:	31 05       	cpc	r19, r1
    1234:	49 f0       	breq	.+18     	; 0x1248 <ICU_SetTriggerEdge+0x3e>
    1236:	0f c0       	rjmp	.+30     	; 0x1256 <ICU_SetTriggerEdge+0x4c>
	{
	case ICU_FALLING_EDGE:
		CLR_BIT(TCCR1B , 6);
    1238:	ae e4       	ldi	r26, 0x4E	; 78
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	ee e4       	ldi	r30, 0x4E	; 78
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	8f 7b       	andi	r24, 0xBF	; 191
    1244:	8c 93       	st	X, r24
    1246:	07 c0       	rjmp	.+14     	; 0x1256 <ICU_SetTriggerEdge+0x4c>
		break;
	case ICU_RISING_EDGE:
		SET_BIT(TCCR1B , 6);
    1248:	ae e4       	ldi	r26, 0x4E	; 78
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	ee e4       	ldi	r30, 0x4E	; 78
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	80 64       	ori	r24, 0x40	; 64
    1254:	8c 93       	st	X, r24
		break;
	default:
		break;

	}
}
    1256:	0f 90       	pop	r0
    1258:	0f 90       	pop	r0
    125a:	0f 90       	pop	r0
    125c:	cf 91       	pop	r28
    125e:	df 91       	pop	r29
    1260:	08 95       	ret

00001262 <ICU_u16ReadICU>:

u16 ICU_u16ReadICU(void)
{
    1262:	df 93       	push	r29
    1264:	cf 93       	push	r28
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    126a:	e6 e4       	ldi	r30, 0x46	; 70
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	91 81       	ldd	r25, Z+1	; 0x01
}
    1272:	cf 91       	pop	r28
    1274:	df 91       	pop	r29
    1276:	08 95       	ret

00001278 <TIMER_voidSetCallBack>:


void TIMER_voidSetCallBack(u8 Copy_u8INT_ID,void (*Copy_pvCallBackFunc)(void))
{
    1278:	df 93       	push	r29
    127a:	cf 93       	push	r28
    127c:	00 d0       	rcall	.+0      	; 0x127e <TIMER_voidSetCallBack+0x6>
    127e:	0f 92       	push	r0
    1280:	cd b7       	in	r28, 0x3d	; 61
    1282:	de b7       	in	r29, 0x3e	; 62
    1284:	89 83       	std	Y+1, r24	; 0x01
    1286:	7b 83       	std	Y+3, r23	; 0x03
    1288:	6a 83       	std	Y+2, r22	; 0x02
	TIMER_pvCallBackFunc[Copy_u8INT_ID] = Copy_pvCallBackFunc;
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	88 2f       	mov	r24, r24
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	88 0f       	add	r24, r24
    1292:	99 1f       	adc	r25, r25
    1294:	fc 01       	movw	r30, r24
    1296:	e8 58       	subi	r30, 0x88	; 136
    1298:	ff 4f       	sbci	r31, 0xFF	; 255
    129a:	8a 81       	ldd	r24, Y+2	; 0x02
    129c:	9b 81       	ldd	r25, Y+3	; 0x03
    129e:	91 83       	std	Z+1, r25	; 0x01
    12a0:	80 83       	st	Z, r24
}
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
    12a6:	0f 90       	pop	r0
    12a8:	cf 91       	pop	r28
    12aa:	df 91       	pop	r29
    12ac:	08 95       	ret

000012ae <__vector_6>:


void __vector_6 (void) __attribute__ ((signal));
void __vector_6 (void)
{
    12ae:	1f 92       	push	r1
    12b0:	0f 92       	push	r0
    12b2:	0f b6       	in	r0, 0x3f	; 63
    12b4:	0f 92       	push	r0
    12b6:	11 24       	eor	r1, r1
    12b8:	2f 93       	push	r18
    12ba:	3f 93       	push	r19
    12bc:	4f 93       	push	r20
    12be:	5f 93       	push	r21
    12c0:	6f 93       	push	r22
    12c2:	7f 93       	push	r23
    12c4:	8f 93       	push	r24
    12c6:	9f 93       	push	r25
    12c8:	af 93       	push	r26
    12ca:	bf 93       	push	r27
    12cc:	ef 93       	push	r30
    12ce:	ff 93       	push	r31
    12d0:	df 93       	push	r29
    12d2:	cf 93       	push	r28
    12d4:	cd b7       	in	r28, 0x3d	; 61
    12d6:	de b7       	in	r29, 0x3e	; 62
	TIMER_pvCallBackFunc[TIMER1_ICU_INT]();
    12d8:	e0 91 82 00 	lds	r30, 0x0082
    12dc:	f0 91 83 00 	lds	r31, 0x0083
    12e0:	09 95       	icall
}
    12e2:	cf 91       	pop	r28
    12e4:	df 91       	pop	r29
    12e6:	ff 91       	pop	r31
    12e8:	ef 91       	pop	r30
    12ea:	bf 91       	pop	r27
    12ec:	af 91       	pop	r26
    12ee:	9f 91       	pop	r25
    12f0:	8f 91       	pop	r24
    12f2:	7f 91       	pop	r23
    12f4:	6f 91       	pop	r22
    12f6:	5f 91       	pop	r21
    12f8:	4f 91       	pop	r20
    12fa:	3f 91       	pop	r19
    12fc:	2f 91       	pop	r18
    12fe:	0f 90       	pop	r0
    1300:	0f be       	out	0x3f, r0	; 63
    1302:	0f 90       	pop	r0
    1304:	1f 90       	pop	r1
    1306:	18 95       	reti

00001308 <__vector_7>:

void __vector_7 (void) __attribute__ ((signal));
void __vector_7 (void)
{
    1308:	1f 92       	push	r1
    130a:	0f 92       	push	r0
    130c:	0f b6       	in	r0, 0x3f	; 63
    130e:	0f 92       	push	r0
    1310:	11 24       	eor	r1, r1
    1312:	2f 93       	push	r18
    1314:	3f 93       	push	r19
    1316:	4f 93       	push	r20
    1318:	5f 93       	push	r21
    131a:	6f 93       	push	r22
    131c:	7f 93       	push	r23
    131e:	8f 93       	push	r24
    1320:	9f 93       	push	r25
    1322:	af 93       	push	r26
    1324:	bf 93       	push	r27
    1326:	ef 93       	push	r30
    1328:	ff 93       	push	r31
    132a:	df 93       	push	r29
    132c:	cf 93       	push	r28
    132e:	cd b7       	in	r28, 0x3d	; 61
    1330:	de b7       	in	r29, 0x3e	; 62
	TIMER_pvCallBackFunc[TIMER1_OUTPUT_COM_A_INT]();
    1332:	e0 91 7e 00 	lds	r30, 0x007E
    1336:	f0 91 7f 00 	lds	r31, 0x007F
    133a:	09 95       	icall
}
    133c:	cf 91       	pop	r28
    133e:	df 91       	pop	r29
    1340:	ff 91       	pop	r31
    1342:	ef 91       	pop	r30
    1344:	bf 91       	pop	r27
    1346:	af 91       	pop	r26
    1348:	9f 91       	pop	r25
    134a:	8f 91       	pop	r24
    134c:	7f 91       	pop	r23
    134e:	6f 91       	pop	r22
    1350:	5f 91       	pop	r21
    1352:	4f 91       	pop	r20
    1354:	3f 91       	pop	r19
    1356:	2f 91       	pop	r18
    1358:	0f 90       	pop	r0
    135a:	0f be       	out	0x3f, r0	; 63
    135c:	0f 90       	pop	r0
    135e:	1f 90       	pop	r1
    1360:	18 95       	reti

00001362 <__vector_8>:

void __vector_8 (void) __attribute__ ((signal));
void __vector_8 (void)
{
    1362:	1f 92       	push	r1
    1364:	0f 92       	push	r0
    1366:	0f b6       	in	r0, 0x3f	; 63
    1368:	0f 92       	push	r0
    136a:	11 24       	eor	r1, r1
    136c:	2f 93       	push	r18
    136e:	3f 93       	push	r19
    1370:	4f 93       	push	r20
    1372:	5f 93       	push	r21
    1374:	6f 93       	push	r22
    1376:	7f 93       	push	r23
    1378:	8f 93       	push	r24
    137a:	9f 93       	push	r25
    137c:	af 93       	push	r26
    137e:	bf 93       	push	r27
    1380:	ef 93       	push	r30
    1382:	ff 93       	push	r31
    1384:	df 93       	push	r29
    1386:	cf 93       	push	r28
    1388:	cd b7       	in	r28, 0x3d	; 61
    138a:	de b7       	in	r29, 0x3e	; 62
	TIMER_pvCallBackFunc[TIMER1_OUTPUT_COM_B_INT]();
    138c:	e0 91 80 00 	lds	r30, 0x0080
    1390:	f0 91 81 00 	lds	r31, 0x0081
    1394:	09 95       	icall
}
    1396:	cf 91       	pop	r28
    1398:	df 91       	pop	r29
    139a:	ff 91       	pop	r31
    139c:	ef 91       	pop	r30
    139e:	bf 91       	pop	r27
    13a0:	af 91       	pop	r26
    13a2:	9f 91       	pop	r25
    13a4:	8f 91       	pop	r24
    13a6:	7f 91       	pop	r23
    13a8:	6f 91       	pop	r22
    13aa:	5f 91       	pop	r21
    13ac:	4f 91       	pop	r20
    13ae:	3f 91       	pop	r19
    13b0:	2f 91       	pop	r18
    13b2:	0f 90       	pop	r0
    13b4:	0f be       	out	0x3f, r0	; 63
    13b6:	0f 90       	pop	r0
    13b8:	1f 90       	pop	r1
    13ba:	18 95       	reti

000013bc <__vector_9>:

void __vector_9 (void) __attribute__ ((signal));
void __vector_9 (void)
{
    13bc:	1f 92       	push	r1
    13be:	0f 92       	push	r0
    13c0:	0f b6       	in	r0, 0x3f	; 63
    13c2:	0f 92       	push	r0
    13c4:	11 24       	eor	r1, r1
    13c6:	2f 93       	push	r18
    13c8:	3f 93       	push	r19
    13ca:	4f 93       	push	r20
    13cc:	5f 93       	push	r21
    13ce:	6f 93       	push	r22
    13d0:	7f 93       	push	r23
    13d2:	8f 93       	push	r24
    13d4:	9f 93       	push	r25
    13d6:	af 93       	push	r26
    13d8:	bf 93       	push	r27
    13da:	ef 93       	push	r30
    13dc:	ff 93       	push	r31
    13de:	df 93       	push	r29
    13e0:	cf 93       	push	r28
    13e2:	cd b7       	in	r28, 0x3d	; 61
    13e4:	de b7       	in	r29, 0x3e	; 62
	TIMER_pvCallBackFunc[TIMER1_OVERFLOW_INT]();
    13e6:	e0 91 7c 00 	lds	r30, 0x007C
    13ea:	f0 91 7d 00 	lds	r31, 0x007D
    13ee:	09 95       	icall
}
    13f0:	cf 91       	pop	r28
    13f2:	df 91       	pop	r29
    13f4:	ff 91       	pop	r31
    13f6:	ef 91       	pop	r30
    13f8:	bf 91       	pop	r27
    13fa:	af 91       	pop	r26
    13fc:	9f 91       	pop	r25
    13fe:	8f 91       	pop	r24
    1400:	7f 91       	pop	r23
    1402:	6f 91       	pop	r22
    1404:	5f 91       	pop	r21
    1406:	4f 91       	pop	r20
    1408:	3f 91       	pop	r19
    140a:	2f 91       	pop	r18
    140c:	0f 90       	pop	r0
    140e:	0f be       	out	0x3f, r0	; 63
    1410:	0f 90       	pop	r0
    1412:	1f 90       	pop	r1
    1414:	18 95       	reti

00001416 <__vector_10>:

void __vector_10 (void)	__attribute__((signal));
void __vector_10 (void)
{
    1416:	1f 92       	push	r1
    1418:	0f 92       	push	r0
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	0f 92       	push	r0
    141e:	11 24       	eor	r1, r1
    1420:	2f 93       	push	r18
    1422:	3f 93       	push	r19
    1424:	4f 93       	push	r20
    1426:	5f 93       	push	r21
    1428:	6f 93       	push	r22
    142a:	7f 93       	push	r23
    142c:	8f 93       	push	r24
    142e:	9f 93       	push	r25
    1430:	af 93       	push	r26
    1432:	bf 93       	push	r27
    1434:	ef 93       	push	r30
    1436:	ff 93       	push	r31
    1438:	df 93       	push	r29
    143a:	cf 93       	push	r28
    143c:	cd b7       	in	r28, 0x3d	; 61
    143e:	de b7       	in	r29, 0x3e	; 62

	TIMER_pvCallBackFunc[TIMER0_OUTPUT_COM_INT]();
    1440:	e0 91 7a 00 	lds	r30, 0x007A
    1444:	f0 91 7b 00 	lds	r31, 0x007B
    1448:	09 95       	icall
}
    144a:	cf 91       	pop	r28
    144c:	df 91       	pop	r29
    144e:	ff 91       	pop	r31
    1450:	ef 91       	pop	r30
    1452:	bf 91       	pop	r27
    1454:	af 91       	pop	r26
    1456:	9f 91       	pop	r25
    1458:	8f 91       	pop	r24
    145a:	7f 91       	pop	r23
    145c:	6f 91       	pop	r22
    145e:	5f 91       	pop	r21
    1460:	4f 91       	pop	r20
    1462:	3f 91       	pop	r19
    1464:	2f 91       	pop	r18
    1466:	0f 90       	pop	r0
    1468:	0f be       	out	0x3f, r0	; 63
    146a:	0f 90       	pop	r0
    146c:	1f 90       	pop	r1
    146e:	18 95       	reti

00001470 <__vector_11>:

void __vector_11 (void)	__attribute__((signal));
void __vector_11 (void)
{
    1470:	1f 92       	push	r1
    1472:	0f 92       	push	r0
    1474:	0f b6       	in	r0, 0x3f	; 63
    1476:	0f 92       	push	r0
    1478:	11 24       	eor	r1, r1
    147a:	2f 93       	push	r18
    147c:	3f 93       	push	r19
    147e:	4f 93       	push	r20
    1480:	5f 93       	push	r21
    1482:	6f 93       	push	r22
    1484:	7f 93       	push	r23
    1486:	8f 93       	push	r24
    1488:	9f 93       	push	r25
    148a:	af 93       	push	r26
    148c:	bf 93       	push	r27
    148e:	ef 93       	push	r30
    1490:	ff 93       	push	r31
    1492:	df 93       	push	r29
    1494:	cf 93       	push	r28
    1496:	cd b7       	in	r28, 0x3d	; 61
    1498:	de b7       	in	r29, 0x3e	; 62
	TIMER_pvCallBackFunc[TIMER0_OVERFLOW_INT]();
    149a:	e0 91 78 00 	lds	r30, 0x0078
    149e:	f0 91 79 00 	lds	r31, 0x0079
    14a2:	09 95       	icall
}
    14a4:	cf 91       	pop	r28
    14a6:	df 91       	pop	r29
    14a8:	ff 91       	pop	r31
    14aa:	ef 91       	pop	r30
    14ac:	bf 91       	pop	r27
    14ae:	af 91       	pop	r26
    14b0:	9f 91       	pop	r25
    14b2:	8f 91       	pop	r24
    14b4:	7f 91       	pop	r23
    14b6:	6f 91       	pop	r22
    14b8:	5f 91       	pop	r21
    14ba:	4f 91       	pop	r20
    14bc:	3f 91       	pop	r19
    14be:	2f 91       	pop	r18
    14c0:	0f 90       	pop	r0
    14c2:	0f be       	out	0x3f, r0	; 63
    14c4:	0f 90       	pop	r0
    14c6:	1f 90       	pop	r1
    14c8:	18 95       	reti

000014ca <MSPI_voidInit>:
 * Description : Set initialization of SPI										*
 * Arguments   : void			 												*
 * return      : void															*
 *==============================================================================*/
void MSPI_voidInit(void)
{
    14ca:	df 93       	push	r29
    14cc:	cf 93       	push	r28
    14ce:	cd b7       	in	r28, 0x3d	; 61
    14d0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SPCR,5);                      //SENT FROM LSB FIRST
    14d2:	ad e2       	ldi	r26, 0x2D	; 45
    14d4:	b0 e0       	ldi	r27, 0x00	; 0
    14d6:	ed e2       	ldi	r30, 0x2D	; 45
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	80 62       	ori	r24, 0x20	; 32
    14de:	8c 93       	st	X, r24
	#if SPI_MODE == MASTER
	SET_BIT(DIO_u8_DDRB_REG,5);           // MOSI ==> OUTPUT  
    14e0:	a7 e3       	ldi	r26, 0x37	; 55
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	e7 e3       	ldi	r30, 0x37	; 55
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	80 62       	ori	r24, 0x20	; 32
    14ec:	8c 93       	st	X, r24
	CLR_BIT(DIO_u8_DDRB_REG,6);           // MISO ==> INPUT
    14ee:	a7 e3       	ldi	r26, 0x37	; 55
    14f0:	b0 e0       	ldi	r27, 0x00	; 0
    14f2:	e7 e3       	ldi	r30, 0x37	; 55
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 81       	ld	r24, Z
    14f8:	8f 7b       	andi	r24, 0xBF	; 191
    14fa:	8c 93       	st	X, r24
	SET_BIT(DIO_u8_DDRB_REG,4);           // SS   ==> OUTPUT
    14fc:	a7 e3       	ldi	r26, 0x37	; 55
    14fe:	b0 e0       	ldi	r27, 0x00	; 0
    1500:	e7 e3       	ldi	r30, 0x37	; 55
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	80 81       	ld	r24, Z
    1506:	80 61       	ori	r24, 0x10	; 16
    1508:	8c 93       	st	X, r24
	SET_BIT(DIO_u8_DDRB_REG,7);           // SCK  ==> OUTPUT
    150a:	a7 e3       	ldi	r26, 0x37	; 55
    150c:	b0 e0       	ldi	r27, 0x00	; 0
    150e:	e7 e3       	ldi	r30, 0x37	; 55
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	80 68       	ori	r24, 0x80	; 128
    1516:	8c 93       	st	X, r24

	SET_BIT(SPCR,4);                      //Set MSTR to Master Mode
    1518:	ad e2       	ldi	r26, 0x2D	; 45
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	ed e2       	ldi	r30, 0x2D	; 45
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	80 61       	ori	r24, 0x10	; 16
    1524:	8c 93       	st	X, r24
	SET_BIT(SPCR,2);					  //Set CPOL to CPHA to Setup First
    1526:	ad e2       	ldi	r26, 0x2D	; 45
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	ed e2       	ldi	r30, 0x2D	; 45
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	84 60       	ori	r24, 0x04	; 4
    1532:	8c 93       	st	X, r24
	SET_BIT(SPCR,0);					  //PRESCALER /128
    1534:	ad e2       	ldi	r26, 0x2D	; 45
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	ed e2       	ldi	r30, 0x2D	; 45
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	81 60       	ori	r24, 0x01	; 1
    1540:	8c 93       	st	X, r24
	SET_BIT(SPCR,1);
    1542:	ad e2       	ldi	r26, 0x2D	; 45
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	ed e2       	ldi	r30, 0x2D	; 45
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	82 60       	ori	r24, 0x02	; 2
    154e:	8c 93       	st	X, r24
	CLR_BIT(SPSR,0);                      // Clear SPI2X
    1550:	ae e2       	ldi	r26, 0x2E	; 46
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	ee e2       	ldi	r30, 0x2E	; 46
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	8e 7f       	andi	r24, 0xFE	; 254
    155c:	8c 93       	st	X, r24
	SET_BIT(DIO_u8_DDRB_REG,6);           // MISO ==> OUTPUT
	CLR_BIT(DIO_u8_DDRB_REG,4);           // SS   ==> INPUT
	CLR_BIT(DIO_u8_DDRB_REG,7);           // SCK  ==> INPUT
	CLR_BIT(SPCR,4);                      //Set MSTR to Slave Mode
	#endif
	SET_BIT(SPCR,6);					  //ENABLE SPI
    155e:	ad e2       	ldi	r26, 0x2D	; 45
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	ed e2       	ldi	r30, 0x2D	; 45
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	80 64       	ori	r24, 0x40	; 64
    156a:	8c 93       	st	X, r24
}
    156c:	cf 91       	pop	r28
    156e:	df 91       	pop	r29
    1570:	08 95       	ret

00001572 <MSPI_voidSendData>:
 * Description : Send Data														*
 * Arguments   : Copy_u8Data			 										*
 * return      : void														    *
 *==============================================================================*/
void MSPI_voidSendData(u8 Copy_u8Data)
{
    1572:	df 93       	push	r29
    1574:	cf 93       	push	r28
    1576:	0f 92       	push	r0
    1578:	cd b7       	in	r28, 0x3d	; 61
    157a:	de b7       	in	r29, 0x3e	; 62
    157c:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(DIO_u8_PORTB_REG,4);          // SS   ==> LOW
    157e:	a8 e3       	ldi	r26, 0x38	; 56
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	e8 e3       	ldi	r30, 0x38	; 56
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	8f 7e       	andi	r24, 0xEF	; 239
    158a:	8c 93       	st	X, r24
	SPDR = Copy_u8Data;
    158c:	ef e2       	ldi	r30, 0x2F	; 47
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	89 81       	ldd	r24, Y+1	; 0x01
    1592:	80 83       	st	Z, r24
	while(GET_BIT(SPSR,7) == 0);   // Check if Transmission is Complete
    1594:	ee e2       	ldi	r30, 0x2E	; 46
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	88 23       	and	r24, r24
    159c:	dc f7       	brge	.-10     	; 0x1594 <MSPI_voidSendData+0x22>
	SET_BIT(DIO_u8_PORTB_REG,4);          // SS   ==> HIGH
    159e:	a8 e3       	ldi	r26, 0x38	; 56
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	e8 e3       	ldi	r30, 0x38	; 56
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	80 61       	ori	r24, 0x10	; 16
    15aa:	8c 93       	st	X, r24
}
    15ac:	0f 90       	pop	r0
    15ae:	cf 91       	pop	r28
    15b0:	df 91       	pop	r29
    15b2:	08 95       	ret

000015b4 <MSPI_u8ReciveData>:
 * Description : Receive Data													*
 * Arguments   : void															*
 * return      : Value of SPDR													*
 *==============================================================================*/
u8   MSPI_u8ReciveData(void)
{
    15b4:	df 93       	push	r29
    15b6:	cf 93       	push	r28
    15b8:	cd b7       	in	r28, 0x3d	; 61
    15ba:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(SPSR,7) == 0);   // Check if Transmission is Complete
    15bc:	ee e2       	ldi	r30, 0x2E	; 46
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	88 23       	and	r24, r24
    15c4:	dc f7       	brge	.-10     	; 0x15bc <MSPI_u8ReciveData+0x8>
	return SPDR;
    15c6:	ef e2       	ldi	r30, 0x2F	; 47
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
}
    15cc:	cf 91       	pop	r28
    15ce:	df 91       	pop	r29
    15d0:	08 95       	ret

000015d2 <MSPI_u8SendReciveData>:
 * Description : Send and Receive Data											*
 * Arguments   : Copy_u8Data													*
 * return      : Value of SPDR													*
 *==============================================================================*/
u8   MSPI_u8SendReciveData(u8 Copy_u8Data)
{
    15d2:	df 93       	push	r29
    15d4:	cf 93       	push	r28
    15d6:	0f 92       	push	r0
    15d8:	cd b7       	in	r28, 0x3d	; 61
    15da:	de b7       	in	r29, 0x3e	; 62
    15dc:	89 83       	std	Y+1, r24	; 0x01
	SPDR = Copy_u8Data;
    15de:	ef e2       	ldi	r30, 0x2F	; 47
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	89 81       	ldd	r24, Y+1	; 0x01
    15e4:	80 83       	st	Z, r24
	while(GET_BIT(SPSR,7) == 0);   // Check if Transmission is Complete
    15e6:	ee e2       	ldi	r30, 0x2E	; 46
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	88 23       	and	r24, r24
    15ee:	dc f7       	brge	.-10     	; 0x15e6 <MSPI_u8SendReciveData+0x14>
    return SPDR;
    15f0:	ef e2       	ldi	r30, 0x2F	; 47
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	80 81       	ld	r24, Z
}
    15f6:	0f 90       	pop	r0
    15f8:	cf 91       	pop	r28
    15fa:	df 91       	pop	r29
    15fc:	08 95       	ret

000015fe <MEXTI_voidEXTIEnable>:
 * Arguments   : EXTI_Num 																					  *
 * 				 EXTI_Sense															 						  *
 * return      : void																					      *
 *============================================================================================================*/
void MEXTI_voidEXTIEnable(u8 Copy_u8EXTI_Num, u8 Copy_u8EXTI_Sense)
{
    15fe:	df 93       	push	r29
    1600:	cf 93       	push	r28
    1602:	cd b7       	in	r28, 0x3d	; 61
    1604:	de b7       	in	r29, 0x3e	; 62
    1606:	2a 97       	sbiw	r28, 0x0a	; 10
    1608:	0f b6       	in	r0, 0x3f	; 63
    160a:	f8 94       	cli
    160c:	de bf       	out	0x3e, r29	; 62
    160e:	0f be       	out	0x3f, r0	; 63
    1610:	cd bf       	out	0x3d, r28	; 61
    1612:	89 83       	std	Y+1, r24	; 0x01
    1614:	6a 83       	std	Y+2, r22	; 0x02
	SET_BIT(SREG,7);               //TO ENABLE GLOBAL INT
    1616:	af e5       	ldi	r26, 0x5F	; 95
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	ef e5       	ldi	r30, 0x5F	; 95
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	80 68       	ori	r24, 0x80	; 128
    1622:	8c 93       	st	X, r24
	switch(Copy_u8EXTI_Num)
    1624:	89 81       	ldd	r24, Y+1	; 0x01
    1626:	28 2f       	mov	r18, r24
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	3a 87       	std	Y+10, r19	; 0x0a
    162c:	29 87       	std	Y+9, r18	; 0x09
    162e:	89 85       	ldd	r24, Y+9	; 0x09
    1630:	9a 85       	ldd	r25, Y+10	; 0x0a
    1632:	81 30       	cpi	r24, 0x01	; 1
    1634:	91 05       	cpc	r25, r1
    1636:	09 f4       	brne	.+2      	; 0x163a <MEXTI_voidEXTIEnable+0x3c>
    1638:	6d c0       	rjmp	.+218    	; 0x1714 <MEXTI_voidEXTIEnable+0x116>
    163a:	29 85       	ldd	r18, Y+9	; 0x09
    163c:	3a 85       	ldd	r19, Y+10	; 0x0a
    163e:	22 30       	cpi	r18, 0x02	; 2
    1640:	31 05       	cpc	r19, r1
    1642:	09 f4       	brne	.+2      	; 0x1646 <MEXTI_voidEXTIEnable+0x48>
    1644:	c9 c0       	rjmp	.+402    	; 0x17d8 <MEXTI_voidEXTIEnable+0x1da>
    1646:	89 85       	ldd	r24, Y+9	; 0x09
    1648:	9a 85       	ldd	r25, Y+10	; 0x0a
    164a:	00 97       	sbiw	r24, 0x00	; 0
    164c:	09 f0       	breq	.+2      	; 0x1650 <MEXTI_voidEXTIEnable+0x52>
    164e:	e9 c0       	rjmp	.+466    	; 0x1822 <MEXTI_voidEXTIEnable+0x224>
	{
		case EXT_INT_0:
		SET_BIT(GICR,6);           //TO ENABLE INT0 INT
    1650:	ab e5       	ldi	r26, 0x5B	; 91
    1652:	b0 e0       	ldi	r27, 0x00	; 0
    1654:	eb e5       	ldi	r30, 0x5B	; 91
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	80 64       	ori	r24, 0x40	; 64
    165c:	8c 93       	st	X, r24
		switch(Copy_u8EXTI_Sense)
    165e:	8a 81       	ldd	r24, Y+2	; 0x02
    1660:	28 2f       	mov	r18, r24
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	38 87       	std	Y+8, r19	; 0x08
    1666:	2f 83       	std	Y+7, r18	; 0x07
    1668:	8f 81       	ldd	r24, Y+7	; 0x07
    166a:	98 85       	ldd	r25, Y+8	; 0x08
    166c:	81 30       	cpi	r24, 0x01	; 1
    166e:	91 05       	cpc	r25, r1
    1670:	21 f1       	breq	.+72     	; 0x16ba <MEXTI_voidEXTIEnable+0xbc>
    1672:	2f 81       	ldd	r18, Y+7	; 0x07
    1674:	38 85       	ldd	r19, Y+8	; 0x08
    1676:	22 30       	cpi	r18, 0x02	; 2
    1678:	31 05       	cpc	r19, r1
    167a:	2c f4       	brge	.+10     	; 0x1686 <MEXTI_voidEXTIEnable+0x88>
    167c:	8f 81       	ldd	r24, Y+7	; 0x07
    167e:	98 85       	ldd	r25, Y+8	; 0x08
    1680:	00 97       	sbiw	r24, 0x00	; 0
    1682:	61 f0       	breq	.+24     	; 0x169c <MEXTI_voidEXTIEnable+0x9e>
    1684:	ce c0       	rjmp	.+412    	; 0x1822 <MEXTI_voidEXTIEnable+0x224>
    1686:	2f 81       	ldd	r18, Y+7	; 0x07
    1688:	38 85       	ldd	r19, Y+8	; 0x08
    168a:	22 30       	cpi	r18, 0x02	; 2
    168c:	31 05       	cpc	r19, r1
    168e:	21 f1       	breq	.+72     	; 0x16d8 <MEXTI_voidEXTIEnable+0xda>
    1690:	8f 81       	ldd	r24, Y+7	; 0x07
    1692:	98 85       	ldd	r25, Y+8	; 0x08
    1694:	83 30       	cpi	r24, 0x03	; 3
    1696:	91 05       	cpc	r25, r1
    1698:	71 f1       	breq	.+92     	; 0x16f6 <MEXTI_voidEXTIEnable+0xf8>
    169a:	c3 c0       	rjmp	.+390    	; 0x1822 <MEXTI_voidEXTIEnable+0x224>
		{
			case FALLING_EDGE:
			CLR_BIT(MCUCR,0);
    169c:	a5 e5       	ldi	r26, 0x55	; 85
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	e5 e5       	ldi	r30, 0x55	; 85
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	8e 7f       	andi	r24, 0xFE	; 254
    16a8:	8c 93       	st	X, r24
			SET_BIT(MCUCR,1);
    16aa:	a5 e5       	ldi	r26, 0x55	; 85
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	e5 e5       	ldi	r30, 0x55	; 85
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	82 60       	ori	r24, 0x02	; 2
    16b6:	8c 93       	st	X, r24
    16b8:	b4 c0       	rjmp	.+360    	; 0x1822 <MEXTI_voidEXTIEnable+0x224>
			break;
			case RISING_EDGE:
			SET_BIT(MCUCR,0);
    16ba:	a5 e5       	ldi	r26, 0x55	; 85
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	e5 e5       	ldi	r30, 0x55	; 85
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	81 60       	ori	r24, 0x01	; 1
    16c6:	8c 93       	st	X, r24
			SET_BIT(MCUCR,1);
    16c8:	a5 e5       	ldi	r26, 0x55	; 85
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	e5 e5       	ldi	r30, 0x55	; 85
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	82 60       	ori	r24, 0x02	; 2
    16d4:	8c 93       	st	X, r24
    16d6:	a5 c0       	rjmp	.+330    	; 0x1822 <MEXTI_voidEXTIEnable+0x224>
			break;
			case LOGICAL_CHANGE:
		    SET_BIT(MCUCR,0);
    16d8:	a5 e5       	ldi	r26, 0x55	; 85
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e5 e5       	ldi	r30, 0x55	; 85
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	81 60       	ori	r24, 0x01	; 1
    16e4:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,1);
    16e6:	a5 e5       	ldi	r26, 0x55	; 85
    16e8:	b0 e0       	ldi	r27, 0x00	; 0
    16ea:	e5 e5       	ldi	r30, 0x55	; 85
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	8d 7f       	andi	r24, 0xFD	; 253
    16f2:	8c 93       	st	X, r24
    16f4:	96 c0       	rjmp	.+300    	; 0x1822 <MEXTI_voidEXTIEnable+0x224>
			break;
			case LOW_LEVEL:
			CLR_BIT(MCUCR,0);
    16f6:	a5 e5       	ldi	r26, 0x55	; 85
    16f8:	b0 e0       	ldi	r27, 0x00	; 0
    16fa:	e5 e5       	ldi	r30, 0x55	; 85
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 81       	ld	r24, Z
    1700:	8e 7f       	andi	r24, 0xFE	; 254
    1702:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,1);
    1704:	a5 e5       	ldi	r26, 0x55	; 85
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	e5 e5       	ldi	r30, 0x55	; 85
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	8d 7f       	andi	r24, 0xFD	; 253
    1710:	8c 93       	st	X, r24
    1712:	87 c0       	rjmp	.+270    	; 0x1822 <MEXTI_voidEXTIEnable+0x224>
			
			break;
		}
		break;
		case EXT_INT_1:
		SET_BIT(GICR,7);           //TO ENABLE INT1 INT
    1714:	ab e5       	ldi	r26, 0x5B	; 91
    1716:	b0 e0       	ldi	r27, 0x00	; 0
    1718:	eb e5       	ldi	r30, 0x5B	; 91
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	80 81       	ld	r24, Z
    171e:	80 68       	ori	r24, 0x80	; 128
    1720:	8c 93       	st	X, r24
		switch(Copy_u8EXTI_Sense)
    1722:	8a 81       	ldd	r24, Y+2	; 0x02
    1724:	28 2f       	mov	r18, r24
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	3e 83       	std	Y+6, r19	; 0x06
    172a:	2d 83       	std	Y+5, r18	; 0x05
    172c:	8d 81       	ldd	r24, Y+5	; 0x05
    172e:	9e 81       	ldd	r25, Y+6	; 0x06
    1730:	81 30       	cpi	r24, 0x01	; 1
    1732:	91 05       	cpc	r25, r1
    1734:	21 f1       	breq	.+72     	; 0x177e <MEXTI_voidEXTIEnable+0x180>
    1736:	2d 81       	ldd	r18, Y+5	; 0x05
    1738:	3e 81       	ldd	r19, Y+6	; 0x06
    173a:	22 30       	cpi	r18, 0x02	; 2
    173c:	31 05       	cpc	r19, r1
    173e:	2c f4       	brge	.+10     	; 0x174a <MEXTI_voidEXTIEnable+0x14c>
    1740:	8d 81       	ldd	r24, Y+5	; 0x05
    1742:	9e 81       	ldd	r25, Y+6	; 0x06
    1744:	00 97       	sbiw	r24, 0x00	; 0
    1746:	61 f0       	breq	.+24     	; 0x1760 <MEXTI_voidEXTIEnable+0x162>
    1748:	6c c0       	rjmp	.+216    	; 0x1822 <MEXTI_voidEXTIEnable+0x224>
    174a:	2d 81       	ldd	r18, Y+5	; 0x05
    174c:	3e 81       	ldd	r19, Y+6	; 0x06
    174e:	22 30       	cpi	r18, 0x02	; 2
    1750:	31 05       	cpc	r19, r1
    1752:	21 f1       	breq	.+72     	; 0x179c <MEXTI_voidEXTIEnable+0x19e>
    1754:	8d 81       	ldd	r24, Y+5	; 0x05
    1756:	9e 81       	ldd	r25, Y+6	; 0x06
    1758:	83 30       	cpi	r24, 0x03	; 3
    175a:	91 05       	cpc	r25, r1
    175c:	71 f1       	breq	.+92     	; 0x17ba <MEXTI_voidEXTIEnable+0x1bc>
    175e:	61 c0       	rjmp	.+194    	; 0x1822 <MEXTI_voidEXTIEnable+0x224>
		{
			case FALLING_EDGE:
			CLR_BIT(MCUCR,2);
    1760:	a5 e5       	ldi	r26, 0x55	; 85
    1762:	b0 e0       	ldi	r27, 0x00	; 0
    1764:	e5 e5       	ldi	r30, 0x55	; 85
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	8b 7f       	andi	r24, 0xFB	; 251
    176c:	8c 93       	st	X, r24
			SET_BIT(MCUCR,3);
    176e:	a5 e5       	ldi	r26, 0x55	; 85
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	e5 e5       	ldi	r30, 0x55	; 85
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	88 60       	ori	r24, 0x08	; 8
    177a:	8c 93       	st	X, r24
    177c:	52 c0       	rjmp	.+164    	; 0x1822 <MEXTI_voidEXTIEnable+0x224>
			break;
			case RISING_EDGE:
			SET_BIT(MCUCR,2);
    177e:	a5 e5       	ldi	r26, 0x55	; 85
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	e5 e5       	ldi	r30, 0x55	; 85
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	84 60       	ori	r24, 0x04	; 4
    178a:	8c 93       	st	X, r24
			SET_BIT(MCUCR,3);
    178c:	a5 e5       	ldi	r26, 0x55	; 85
    178e:	b0 e0       	ldi	r27, 0x00	; 0
    1790:	e5 e5       	ldi	r30, 0x55	; 85
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 81       	ld	r24, Z
    1796:	88 60       	ori	r24, 0x08	; 8
    1798:	8c 93       	st	X, r24
    179a:	43 c0       	rjmp	.+134    	; 0x1822 <MEXTI_voidEXTIEnable+0x224>
			break;
			case LOGICAL_CHANGE:
		    SET_BIT(MCUCR,2);
    179c:	a5 e5       	ldi	r26, 0x55	; 85
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	e5 e5       	ldi	r30, 0x55	; 85
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	84 60       	ori	r24, 0x04	; 4
    17a8:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,3);
    17aa:	a5 e5       	ldi	r26, 0x55	; 85
    17ac:	b0 e0       	ldi	r27, 0x00	; 0
    17ae:	e5 e5       	ldi	r30, 0x55	; 85
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	87 7f       	andi	r24, 0xF7	; 247
    17b6:	8c 93       	st	X, r24
    17b8:	34 c0       	rjmp	.+104    	; 0x1822 <MEXTI_voidEXTIEnable+0x224>
			break;
			case LOW_LEVEL:
			CLR_BIT(MCUCR,2);
    17ba:	a5 e5       	ldi	r26, 0x55	; 85
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	e5 e5       	ldi	r30, 0x55	; 85
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	8b 7f       	andi	r24, 0xFB	; 251
    17c6:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,3);
    17c8:	a5 e5       	ldi	r26, 0x55	; 85
    17ca:	b0 e0       	ldi	r27, 0x00	; 0
    17cc:	e5 e5       	ldi	r30, 0x55	; 85
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	87 7f       	andi	r24, 0xF7	; 247
    17d4:	8c 93       	st	X, r24
    17d6:	25 c0       	rjmp	.+74     	; 0x1822 <MEXTI_voidEXTIEnable+0x224>
			
			break;
		}
		break;
		case EXT_INT_2:
		SET_BIT(GICR,5);           //TO ENABLE INT2 INT
    17d8:	ab e5       	ldi	r26, 0x5B	; 91
    17da:	b0 e0       	ldi	r27, 0x00	; 0
    17dc:	eb e5       	ldi	r30, 0x5B	; 91
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	80 81       	ld	r24, Z
    17e2:	80 62       	ori	r24, 0x20	; 32
    17e4:	8c 93       	st	X, r24
		switch(Copy_u8EXTI_Sense)
    17e6:	8a 81       	ldd	r24, Y+2	; 0x02
    17e8:	28 2f       	mov	r18, r24
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	3c 83       	std	Y+4, r19	; 0x04
    17ee:	2b 83       	std	Y+3, r18	; 0x03
    17f0:	8b 81       	ldd	r24, Y+3	; 0x03
    17f2:	9c 81       	ldd	r25, Y+4	; 0x04
    17f4:	00 97       	sbiw	r24, 0x00	; 0
    17f6:	31 f0       	breq	.+12     	; 0x1804 <MEXTI_voidEXTIEnable+0x206>
    17f8:	2b 81       	ldd	r18, Y+3	; 0x03
    17fa:	3c 81       	ldd	r19, Y+4	; 0x04
    17fc:	21 30       	cpi	r18, 0x01	; 1
    17fe:	31 05       	cpc	r19, r1
    1800:	49 f0       	breq	.+18     	; 0x1814 <MEXTI_voidEXTIEnable+0x216>
    1802:	0f c0       	rjmp	.+30     	; 0x1822 <MEXTI_voidEXTIEnable+0x224>
		{
			case FALLING_EDGE:
			CLR_BIT(MCUCSR,6);
    1804:	a4 e5       	ldi	r26, 0x54	; 84
    1806:	b0 e0       	ldi	r27, 0x00	; 0
    1808:	e4 e5       	ldi	r30, 0x54	; 84
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	80 81       	ld	r24, Z
    180e:	8f 7b       	andi	r24, 0xBF	; 191
    1810:	8c 93       	st	X, r24
    1812:	07 c0       	rjmp	.+14     	; 0x1822 <MEXTI_voidEXTIEnable+0x224>
			break;
			case RISING_EDGE:
			SET_BIT(MCUCSR,6);
    1814:	a4 e5       	ldi	r26, 0x54	; 84
    1816:	b0 e0       	ldi	r27, 0x00	; 0
    1818:	e4 e5       	ldi	r30, 0x54	; 84
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	80 81       	ld	r24, Z
    181e:	80 64       	ori	r24, 0x40	; 64
    1820:	8c 93       	st	X, r24
	    break;
		default:
			
		break;
	}
}
    1822:	2a 96       	adiw	r28, 0x0a	; 10
    1824:	0f b6       	in	r0, 0x3f	; 63
    1826:	f8 94       	cli
    1828:	de bf       	out	0x3e, r29	; 62
    182a:	0f be       	out	0x3f, r0	; 63
    182c:	cd bf       	out	0x3d, r28	; 61
    182e:	cf 91       	pop	r28
    1830:	df 91       	pop	r29
    1832:	08 95       	ret

00001834 <MEXTI_voidEXTIDisable>:
 * Arguments   : EXTI_Num 																					  *
 * 				 EXTI_Sense															 						  *
 * return      : void																					      *
 *============================================================================================================*/
void MEXTI_voidEXTIDisable(u8 Copy_u8EXTI_Num)
{
    1834:	df 93       	push	r29
    1836:	cf 93       	push	r28
    1838:	00 d0       	rcall	.+0      	; 0x183a <MEXTI_voidEXTIDisable+0x6>
    183a:	0f 92       	push	r0
    183c:	cd b7       	in	r28, 0x3d	; 61
    183e:	de b7       	in	r29, 0x3e	; 62
    1840:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(SREG,7);               //TO ENABLE GLOBAL INT
    1842:	af e5       	ldi	r26, 0x5F	; 95
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	ef e5       	ldi	r30, 0x5F	; 95
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	8f 77       	andi	r24, 0x7F	; 127
    184e:	8c 93       	st	X, r24
	switch(Copy_u8EXTI_Num)
    1850:	89 81       	ldd	r24, Y+1	; 0x01
    1852:	28 2f       	mov	r18, r24
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	3b 83       	std	Y+3, r19	; 0x03
    1858:	2a 83       	std	Y+2, r18	; 0x02
    185a:	8a 81       	ldd	r24, Y+2	; 0x02
    185c:	9b 81       	ldd	r25, Y+3	; 0x03
    185e:	81 30       	cpi	r24, 0x01	; 1
    1860:	91 05       	cpc	r25, r1
    1862:	89 f0       	breq	.+34     	; 0x1886 <MEXTI_voidEXTIDisable+0x52>
    1864:	2a 81       	ldd	r18, Y+2	; 0x02
    1866:	3b 81       	ldd	r19, Y+3	; 0x03
    1868:	22 30       	cpi	r18, 0x02	; 2
    186a:	31 05       	cpc	r19, r1
    186c:	a1 f0       	breq	.+40     	; 0x1896 <MEXTI_voidEXTIDisable+0x62>
    186e:	8a 81       	ldd	r24, Y+2	; 0x02
    1870:	9b 81       	ldd	r25, Y+3	; 0x03
    1872:	00 97       	sbiw	r24, 0x00	; 0
    1874:	b9 f4       	brne	.+46     	; 0x18a4 <MEXTI_voidEXTIDisable+0x70>
	{
		case EXT_INT_0:
		CLR_BIT(GICR,6);           //TO DISABLE INT0 INT
    1876:	ab e5       	ldi	r26, 0x5B	; 91
    1878:	b0 e0       	ldi	r27, 0x00	; 0
    187a:	eb e5       	ldi	r30, 0x5B	; 91
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	80 81       	ld	r24, Z
    1880:	8f 7b       	andi	r24, 0xBF	; 191
    1882:	8c 93       	st	X, r24
    1884:	0f c0       	rjmp	.+30     	; 0x18a4 <MEXTI_voidEXTIDisable+0x70>
		break;                          
		case EXT_INT_1:                 
		CLR_BIT(GICR,7);           //TO DISABLE INT1 INT
    1886:	ab e5       	ldi	r26, 0x5B	; 91
    1888:	b0 e0       	ldi	r27, 0x00	; 0
    188a:	eb e5       	ldi	r30, 0x5B	; 91
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	80 81       	ld	r24, Z
    1890:	8f 77       	andi	r24, 0x7F	; 127
    1892:	8c 93       	st	X, r24
    1894:	07 c0       	rjmp	.+14     	; 0x18a4 <MEXTI_voidEXTIDisable+0x70>
		break;                          
		case EXT_INT_2:                 
		CLR_BIT(GICR,5);           //TO DISABLE INT2 INT
    1896:	ab e5       	ldi	r26, 0x5B	; 91
    1898:	b0 e0       	ldi	r27, 0x00	; 0
    189a:	eb e5       	ldi	r30, 0x5B	; 91
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	80 81       	ld	r24, Z
    18a0:	8f 7d       	andi	r24, 0xDF	; 223
    18a2:	8c 93       	st	X, r24
	    break;
		default:
			
		break;
	}
}
    18a4:	0f 90       	pop	r0
    18a6:	0f 90       	pop	r0
    18a8:	0f 90       	pop	r0
    18aa:	cf 91       	pop	r28
    18ac:	df 91       	pop	r29
    18ae:	08 95       	ret

000018b0 <EXT_INT_0_SET_CALL_BACK>:


void EXT_INT_0_SET_CALL_BACK(void(*ptr)(void))
{
    18b0:	df 93       	push	r29
    18b2:	cf 93       	push	r28
    18b4:	00 d0       	rcall	.+0      	; 0x18b6 <EXT_INT_0_SET_CALL_BACK+0x6>
    18b6:	cd b7       	in	r28, 0x3d	; 61
    18b8:	de b7       	in	r29, 0x3e	; 62
    18ba:	9a 83       	std	Y+2, r25	; 0x02
    18bc:	89 83       	std	Y+1, r24	; 0x01
	EXT_INT_0_CALL_BACK = ptr;
    18be:	89 81       	ldd	r24, Y+1	; 0x01
    18c0:	9a 81       	ldd	r25, Y+2	; 0x02
    18c2:	90 93 87 00 	sts	0x0087, r25
    18c6:	80 93 86 00 	sts	0x0086, r24
}
    18ca:	0f 90       	pop	r0
    18cc:	0f 90       	pop	r0
    18ce:	cf 91       	pop	r28
    18d0:	df 91       	pop	r29
    18d2:	08 95       	ret

000018d4 <__vector_1>:

void __vector_1(void)     __attribute__((signal));
void __vector_1(void)
{
    18d4:	1f 92       	push	r1
    18d6:	0f 92       	push	r0
    18d8:	0f b6       	in	r0, 0x3f	; 63
    18da:	0f 92       	push	r0
    18dc:	11 24       	eor	r1, r1
    18de:	2f 93       	push	r18
    18e0:	3f 93       	push	r19
    18e2:	4f 93       	push	r20
    18e4:	5f 93       	push	r21
    18e6:	6f 93       	push	r22
    18e8:	7f 93       	push	r23
    18ea:	8f 93       	push	r24
    18ec:	9f 93       	push	r25
    18ee:	af 93       	push	r26
    18f0:	bf 93       	push	r27
    18f2:	ef 93       	push	r30
    18f4:	ff 93       	push	r31
    18f6:	df 93       	push	r29
    18f8:	cf 93       	push	r28
    18fa:	cd b7       	in	r28, 0x3d	; 61
    18fc:	de b7       	in	r29, 0x3e	; 62
	EXT_INT_0_CALL_BACK();
    18fe:	e0 91 86 00 	lds	r30, 0x0086
    1902:	f0 91 87 00 	lds	r31, 0x0087
    1906:	09 95       	icall
}
    1908:	cf 91       	pop	r28
    190a:	df 91       	pop	r29
    190c:	ff 91       	pop	r31
    190e:	ef 91       	pop	r30
    1910:	bf 91       	pop	r27
    1912:	af 91       	pop	r26
    1914:	9f 91       	pop	r25
    1916:	8f 91       	pop	r24
    1918:	7f 91       	pop	r23
    191a:	6f 91       	pop	r22
    191c:	5f 91       	pop	r21
    191e:	4f 91       	pop	r20
    1920:	3f 91       	pop	r19
    1922:	2f 91       	pop	r18
    1924:	0f 90       	pop	r0
    1926:	0f be       	out	0x3f, r0	; 63
    1928:	0f 90       	pop	r0
    192a:	1f 90       	pop	r1
    192c:	18 95       	reti

0000192e <EXT_INT_1_SET_CALL_BACK>:


void EXT_INT_1_SET_CALL_BACK(void(*ptr)(void))
{
    192e:	df 93       	push	r29
    1930:	cf 93       	push	r28
    1932:	00 d0       	rcall	.+0      	; 0x1934 <EXT_INT_1_SET_CALL_BACK+0x6>
    1934:	cd b7       	in	r28, 0x3d	; 61
    1936:	de b7       	in	r29, 0x3e	; 62
    1938:	9a 83       	std	Y+2, r25	; 0x02
    193a:	89 83       	std	Y+1, r24	; 0x01
	EXT_INT_1_CALL_BACK = ptr;
    193c:	89 81       	ldd	r24, Y+1	; 0x01
    193e:	9a 81       	ldd	r25, Y+2	; 0x02
    1940:	90 93 89 00 	sts	0x0089, r25
    1944:	80 93 88 00 	sts	0x0088, r24
}
    1948:	0f 90       	pop	r0
    194a:	0f 90       	pop	r0
    194c:	cf 91       	pop	r28
    194e:	df 91       	pop	r29
    1950:	08 95       	ret

00001952 <__vector_2>:

void __vector_2(void)     __attribute__((signal));
void __vector_2(void)
{
    1952:	1f 92       	push	r1
    1954:	0f 92       	push	r0
    1956:	0f b6       	in	r0, 0x3f	; 63
    1958:	0f 92       	push	r0
    195a:	11 24       	eor	r1, r1
    195c:	2f 93       	push	r18
    195e:	3f 93       	push	r19
    1960:	4f 93       	push	r20
    1962:	5f 93       	push	r21
    1964:	6f 93       	push	r22
    1966:	7f 93       	push	r23
    1968:	8f 93       	push	r24
    196a:	9f 93       	push	r25
    196c:	af 93       	push	r26
    196e:	bf 93       	push	r27
    1970:	ef 93       	push	r30
    1972:	ff 93       	push	r31
    1974:	df 93       	push	r29
    1976:	cf 93       	push	r28
    1978:	cd b7       	in	r28, 0x3d	; 61
    197a:	de b7       	in	r29, 0x3e	; 62
	EXT_INT_1_CALL_BACK();
    197c:	e0 91 88 00 	lds	r30, 0x0088
    1980:	f0 91 89 00 	lds	r31, 0x0089
    1984:	09 95       	icall
}
    1986:	cf 91       	pop	r28
    1988:	df 91       	pop	r29
    198a:	ff 91       	pop	r31
    198c:	ef 91       	pop	r30
    198e:	bf 91       	pop	r27
    1990:	af 91       	pop	r26
    1992:	9f 91       	pop	r25
    1994:	8f 91       	pop	r24
    1996:	7f 91       	pop	r23
    1998:	6f 91       	pop	r22
    199a:	5f 91       	pop	r21
    199c:	4f 91       	pop	r20
    199e:	3f 91       	pop	r19
    19a0:	2f 91       	pop	r18
    19a2:	0f 90       	pop	r0
    19a4:	0f be       	out	0x3f, r0	; 63
    19a6:	0f 90       	pop	r0
    19a8:	1f 90       	pop	r1
    19aa:	18 95       	reti

000019ac <EXT_INT_2_SET_CALL_BACK>:


void EXT_INT_2_SET_CALL_BACK(void(*ptr)(void))
{
    19ac:	df 93       	push	r29
    19ae:	cf 93       	push	r28
    19b0:	00 d0       	rcall	.+0      	; 0x19b2 <EXT_INT_2_SET_CALL_BACK+0x6>
    19b2:	cd b7       	in	r28, 0x3d	; 61
    19b4:	de b7       	in	r29, 0x3e	; 62
    19b6:	9a 83       	std	Y+2, r25	; 0x02
    19b8:	89 83       	std	Y+1, r24	; 0x01
	EXT_INT_2_CALL_BACK = ptr;
    19ba:	89 81       	ldd	r24, Y+1	; 0x01
    19bc:	9a 81       	ldd	r25, Y+2	; 0x02
    19be:	90 93 85 00 	sts	0x0085, r25
    19c2:	80 93 84 00 	sts	0x0084, r24
}
    19c6:	0f 90       	pop	r0
    19c8:	0f 90       	pop	r0
    19ca:	cf 91       	pop	r28
    19cc:	df 91       	pop	r29
    19ce:	08 95       	ret

000019d0 <__vector_3>:

void __vector_3(void)     __attribute__((signal));
void __vector_3(void)
{
    19d0:	1f 92       	push	r1
    19d2:	0f 92       	push	r0
    19d4:	0f b6       	in	r0, 0x3f	; 63
    19d6:	0f 92       	push	r0
    19d8:	11 24       	eor	r1, r1
    19da:	2f 93       	push	r18
    19dc:	3f 93       	push	r19
    19de:	4f 93       	push	r20
    19e0:	5f 93       	push	r21
    19e2:	6f 93       	push	r22
    19e4:	7f 93       	push	r23
    19e6:	8f 93       	push	r24
    19e8:	9f 93       	push	r25
    19ea:	af 93       	push	r26
    19ec:	bf 93       	push	r27
    19ee:	ef 93       	push	r30
    19f0:	ff 93       	push	r31
    19f2:	df 93       	push	r29
    19f4:	cf 93       	push	r28
    19f6:	cd b7       	in	r28, 0x3d	; 61
    19f8:	de b7       	in	r29, 0x3e	; 62
	EXT_INT_2_CALL_BACK();
    19fa:	e0 91 84 00 	lds	r30, 0x0084
    19fe:	f0 91 85 00 	lds	r31, 0x0085
    1a02:	09 95       	icall
}
    1a04:	cf 91       	pop	r28
    1a06:	df 91       	pop	r29
    1a08:	ff 91       	pop	r31
    1a0a:	ef 91       	pop	r30
    1a0c:	bf 91       	pop	r27
    1a0e:	af 91       	pop	r26
    1a10:	9f 91       	pop	r25
    1a12:	8f 91       	pop	r24
    1a14:	7f 91       	pop	r23
    1a16:	6f 91       	pop	r22
    1a18:	5f 91       	pop	r21
    1a1a:	4f 91       	pop	r20
    1a1c:	3f 91       	pop	r19
    1a1e:	2f 91       	pop	r18
    1a20:	0f 90       	pop	r0
    1a22:	0f be       	out	0x3f, r0	; 63
    1a24:	0f 90       	pop	r0
    1a26:	1f 90       	pop	r1
    1a28:	18 95       	reti

00001a2a <MDIO_voidSetPinDirection>:
 * 				 PIN															 							  *
 *               Direction : takes INPUT or OUTPUT															  *
 * return      : void																					      *
 *============================================================================================================*/
void MDIO_voidSetPinDirection (u8 Copy_u8PortId, u8 Copy_u8PinId ,u8 Copy_u8PinDirection)
{
    1a2a:	df 93       	push	r29
    1a2c:	cf 93       	push	r28
    1a2e:	00 d0       	rcall	.+0      	; 0x1a30 <MDIO_voidSetPinDirection+0x6>
    1a30:	00 d0       	rcall	.+0      	; 0x1a32 <MDIO_voidSetPinDirection+0x8>
    1a32:	0f 92       	push	r0
    1a34:	cd b7       	in	r28, 0x3d	; 61
    1a36:	de b7       	in	r29, 0x3e	; 62
    1a38:	89 83       	std	Y+1, r24	; 0x01
    1a3a:	6a 83       	std	Y+2, r22	; 0x02
    1a3c:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8PortId)
    1a3e:	89 81       	ldd	r24, Y+1	; 0x01
    1a40:	28 2f       	mov	r18, r24
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	3d 83       	std	Y+5, r19	; 0x05
    1a46:	2c 83       	std	Y+4, r18	; 0x04
    1a48:	8c 81       	ldd	r24, Y+4	; 0x04
    1a4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a4c:	81 30       	cpi	r24, 0x01	; 1
    1a4e:	91 05       	cpc	r25, r1
    1a50:	09 f4       	brne	.+2      	; 0x1a54 <MDIO_voidSetPinDirection+0x2a>
    1a52:	47 c0       	rjmp	.+142    	; 0x1ae2 <MDIO_voidSetPinDirection+0xb8>
    1a54:	2c 81       	ldd	r18, Y+4	; 0x04
    1a56:	3d 81       	ldd	r19, Y+5	; 0x05
    1a58:	22 30       	cpi	r18, 0x02	; 2
    1a5a:	31 05       	cpc	r19, r1
    1a5c:	2c f4       	brge	.+10     	; 0x1a68 <MDIO_voidSetPinDirection+0x3e>
    1a5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a60:	9d 81       	ldd	r25, Y+5	; 0x05
    1a62:	00 97       	sbiw	r24, 0x00	; 0
    1a64:	71 f0       	breq	.+28     	; 0x1a82 <MDIO_voidSetPinDirection+0x58>
    1a66:	cb c0       	rjmp	.+406    	; 0x1bfe <MDIO_voidSetPinDirection+0x1d4>
    1a68:	2c 81       	ldd	r18, Y+4	; 0x04
    1a6a:	3d 81       	ldd	r19, Y+5	; 0x05
    1a6c:	22 30       	cpi	r18, 0x02	; 2
    1a6e:	31 05       	cpc	r19, r1
    1a70:	09 f4       	brne	.+2      	; 0x1a74 <MDIO_voidSetPinDirection+0x4a>
    1a72:	67 c0       	rjmp	.+206    	; 0x1b42 <MDIO_voidSetPinDirection+0x118>
    1a74:	8c 81       	ldd	r24, Y+4	; 0x04
    1a76:	9d 81       	ldd	r25, Y+5	; 0x05
    1a78:	83 30       	cpi	r24, 0x03	; 3
    1a7a:	91 05       	cpc	r25, r1
    1a7c:	09 f4       	brne	.+2      	; 0x1a80 <MDIO_voidSetPinDirection+0x56>
    1a7e:	91 c0       	rjmp	.+290    	; 0x1ba2 <MDIO_voidSetPinDirection+0x178>
    1a80:	be c0       	rjmp	.+380    	; 0x1bfe <MDIO_voidSetPinDirection+0x1d4>
	{
	case DIO_PORTA:
		if(Copy_u8PinDirection == DIO_OUTPUT )
    1a82:	8b 81       	ldd	r24, Y+3	; 0x03
    1a84:	81 30       	cpi	r24, 0x01	; 1
    1a86:	a1 f4       	brne	.+40     	; 0x1ab0 <MDIO_voidSetPinDirection+0x86>
		{
			SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);
    1a88:	aa e3       	ldi	r26, 0x3A	; 58
    1a8a:	b0 e0       	ldi	r27, 0x00	; 0
    1a8c:	ea e3       	ldi	r30, 0x3A	; 58
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	80 81       	ld	r24, Z
    1a92:	48 2f       	mov	r20, r24
    1a94:	8a 81       	ldd	r24, Y+2	; 0x02
    1a96:	28 2f       	mov	r18, r24
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	02 2e       	mov	r0, r18
    1aa0:	02 c0       	rjmp	.+4      	; 0x1aa6 <MDIO_voidSetPinDirection+0x7c>
    1aa2:	88 0f       	add	r24, r24
    1aa4:	99 1f       	adc	r25, r25
    1aa6:	0a 94       	dec	r0
    1aa8:	e2 f7       	brpl	.-8      	; 0x1aa2 <MDIO_voidSetPinDirection+0x78>
    1aaa:	84 2b       	or	r24, r20
    1aac:	8c 93       	st	X, r24
    1aae:	a7 c0       	rjmp	.+334    	; 0x1bfe <MDIO_voidSetPinDirection+0x1d4>
		}
		else if(Copy_u8PinDirection == DIO_INPUT)
    1ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab2:	88 23       	and	r24, r24
    1ab4:	09 f0       	breq	.+2      	; 0x1ab8 <MDIO_voidSetPinDirection+0x8e>
    1ab6:	a3 c0       	rjmp	.+326    	; 0x1bfe <MDIO_voidSetPinDirection+0x1d4>
		{
			CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);
    1ab8:	aa e3       	ldi	r26, 0x3A	; 58
    1aba:	b0 e0       	ldi	r27, 0x00	; 0
    1abc:	ea e3       	ldi	r30, 0x3A	; 58
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	80 81       	ld	r24, Z
    1ac2:	48 2f       	mov	r20, r24
    1ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac6:	28 2f       	mov	r18, r24
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	02 2e       	mov	r0, r18
    1ad0:	02 c0       	rjmp	.+4      	; 0x1ad6 <MDIO_voidSetPinDirection+0xac>
    1ad2:	88 0f       	add	r24, r24
    1ad4:	99 1f       	adc	r25, r25
    1ad6:	0a 94       	dec	r0
    1ad8:	e2 f7       	brpl	.-8      	; 0x1ad2 <MDIO_voidSetPinDirection+0xa8>
    1ada:	80 95       	com	r24
    1adc:	84 23       	and	r24, r20
    1ade:	8c 93       	st	X, r24
    1ae0:	8e c0       	rjmp	.+284    	; 0x1bfe <MDIO_voidSetPinDirection+0x1d4>
		}
		break;
	case DIO_PORTB:
		if(Copy_u8PinDirection == DIO_OUTPUT )
    1ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae4:	81 30       	cpi	r24, 0x01	; 1
    1ae6:	a1 f4       	brne	.+40     	; 0x1b10 <MDIO_voidSetPinDirection+0xe6>
		{
			SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);
    1ae8:	a7 e3       	ldi	r26, 0x37	; 55
    1aea:	b0 e0       	ldi	r27, 0x00	; 0
    1aec:	e7 e3       	ldi	r30, 0x37	; 55
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	80 81       	ld	r24, Z
    1af2:	48 2f       	mov	r20, r24
    1af4:	8a 81       	ldd	r24, Y+2	; 0x02
    1af6:	28 2f       	mov	r18, r24
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	02 2e       	mov	r0, r18
    1b00:	02 c0       	rjmp	.+4      	; 0x1b06 <MDIO_voidSetPinDirection+0xdc>
    1b02:	88 0f       	add	r24, r24
    1b04:	99 1f       	adc	r25, r25
    1b06:	0a 94       	dec	r0
    1b08:	e2 f7       	brpl	.-8      	; 0x1b02 <MDIO_voidSetPinDirection+0xd8>
    1b0a:	84 2b       	or	r24, r20
    1b0c:	8c 93       	st	X, r24
    1b0e:	77 c0       	rjmp	.+238    	; 0x1bfe <MDIO_voidSetPinDirection+0x1d4>
		}
		else if(Copy_u8PinDirection == DIO_INPUT)
    1b10:	8b 81       	ldd	r24, Y+3	; 0x03
    1b12:	88 23       	and	r24, r24
    1b14:	09 f0       	breq	.+2      	; 0x1b18 <MDIO_voidSetPinDirection+0xee>
    1b16:	73 c0       	rjmp	.+230    	; 0x1bfe <MDIO_voidSetPinDirection+0x1d4>
		{
			CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);
    1b18:	a7 e3       	ldi	r26, 0x37	; 55
    1b1a:	b0 e0       	ldi	r27, 0x00	; 0
    1b1c:	e7 e3       	ldi	r30, 0x37	; 55
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	80 81       	ld	r24, Z
    1b22:	48 2f       	mov	r20, r24
    1b24:	8a 81       	ldd	r24, Y+2	; 0x02
    1b26:	28 2f       	mov	r18, r24
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	02 2e       	mov	r0, r18
    1b30:	02 c0       	rjmp	.+4      	; 0x1b36 <MDIO_voidSetPinDirection+0x10c>
    1b32:	88 0f       	add	r24, r24
    1b34:	99 1f       	adc	r25, r25
    1b36:	0a 94       	dec	r0
    1b38:	e2 f7       	brpl	.-8      	; 0x1b32 <MDIO_voidSetPinDirection+0x108>
    1b3a:	80 95       	com	r24
    1b3c:	84 23       	and	r24, r20
    1b3e:	8c 93       	st	X, r24
    1b40:	5e c0       	rjmp	.+188    	; 0x1bfe <MDIO_voidSetPinDirection+0x1d4>
		}
		break;
	case DIO_PORTC:
		if(Copy_u8PinDirection == DIO_OUTPUT )
    1b42:	8b 81       	ldd	r24, Y+3	; 0x03
    1b44:	81 30       	cpi	r24, 0x01	; 1
    1b46:	a1 f4       	brne	.+40     	; 0x1b70 <MDIO_voidSetPinDirection+0x146>
		{
			SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);
    1b48:	a4 e3       	ldi	r26, 0x34	; 52
    1b4a:	b0 e0       	ldi	r27, 0x00	; 0
    1b4c:	e4 e3       	ldi	r30, 0x34	; 52
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	80 81       	ld	r24, Z
    1b52:	48 2f       	mov	r20, r24
    1b54:	8a 81       	ldd	r24, Y+2	; 0x02
    1b56:	28 2f       	mov	r18, r24
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	02 2e       	mov	r0, r18
    1b60:	02 c0       	rjmp	.+4      	; 0x1b66 <MDIO_voidSetPinDirection+0x13c>
    1b62:	88 0f       	add	r24, r24
    1b64:	99 1f       	adc	r25, r25
    1b66:	0a 94       	dec	r0
    1b68:	e2 f7       	brpl	.-8      	; 0x1b62 <MDIO_voidSetPinDirection+0x138>
    1b6a:	84 2b       	or	r24, r20
    1b6c:	8c 93       	st	X, r24
    1b6e:	47 c0       	rjmp	.+142    	; 0x1bfe <MDIO_voidSetPinDirection+0x1d4>
		}
		else if(Copy_u8PinDirection == DIO_INPUT)
    1b70:	8b 81       	ldd	r24, Y+3	; 0x03
    1b72:	88 23       	and	r24, r24
    1b74:	09 f0       	breq	.+2      	; 0x1b78 <MDIO_voidSetPinDirection+0x14e>
    1b76:	43 c0       	rjmp	.+134    	; 0x1bfe <MDIO_voidSetPinDirection+0x1d4>
		{
			CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);
    1b78:	a4 e3       	ldi	r26, 0x34	; 52
    1b7a:	b0 e0       	ldi	r27, 0x00	; 0
    1b7c:	e4 e3       	ldi	r30, 0x34	; 52
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
    1b82:	48 2f       	mov	r20, r24
    1b84:	8a 81       	ldd	r24, Y+2	; 0x02
    1b86:	28 2f       	mov	r18, r24
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	02 2e       	mov	r0, r18
    1b90:	02 c0       	rjmp	.+4      	; 0x1b96 <MDIO_voidSetPinDirection+0x16c>
    1b92:	88 0f       	add	r24, r24
    1b94:	99 1f       	adc	r25, r25
    1b96:	0a 94       	dec	r0
    1b98:	e2 f7       	brpl	.-8      	; 0x1b92 <MDIO_voidSetPinDirection+0x168>
    1b9a:	80 95       	com	r24
    1b9c:	84 23       	and	r24, r20
    1b9e:	8c 93       	st	X, r24
    1ba0:	2e c0       	rjmp	.+92     	; 0x1bfe <MDIO_voidSetPinDirection+0x1d4>
		}
		break;
	case DIO_PORTD:
		if(Copy_u8PinDirection == DIO_OUTPUT )
    1ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba4:	81 30       	cpi	r24, 0x01	; 1
    1ba6:	a1 f4       	brne	.+40     	; 0x1bd0 <MDIO_voidSetPinDirection+0x1a6>
		{
			SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);
    1ba8:	a1 e3       	ldi	r26, 0x31	; 49
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	e1 e3       	ldi	r30, 0x31	; 49
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	80 81       	ld	r24, Z
    1bb2:	48 2f       	mov	r20, r24
    1bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb6:	28 2f       	mov	r18, r24
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	02 2e       	mov	r0, r18
    1bc0:	02 c0       	rjmp	.+4      	; 0x1bc6 <MDIO_voidSetPinDirection+0x19c>
    1bc2:	88 0f       	add	r24, r24
    1bc4:	99 1f       	adc	r25, r25
    1bc6:	0a 94       	dec	r0
    1bc8:	e2 f7       	brpl	.-8      	; 0x1bc2 <MDIO_voidSetPinDirection+0x198>
    1bca:	84 2b       	or	r24, r20
    1bcc:	8c 93       	st	X, r24
    1bce:	17 c0       	rjmp	.+46     	; 0x1bfe <MDIO_voidSetPinDirection+0x1d4>
		}
		else if(Copy_u8PinDirection == DIO_INPUT)
    1bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd2:	88 23       	and	r24, r24
    1bd4:	a1 f4       	brne	.+40     	; 0x1bfe <MDIO_voidSetPinDirection+0x1d4>
		{
			CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);
    1bd6:	a1 e3       	ldi	r26, 0x31	; 49
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	e1 e3       	ldi	r30, 0x31	; 49
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	80 81       	ld	r24, Z
    1be0:	48 2f       	mov	r20, r24
    1be2:	8a 81       	ldd	r24, Y+2	; 0x02
    1be4:	28 2f       	mov	r18, r24
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	02 2e       	mov	r0, r18
    1bee:	02 c0       	rjmp	.+4      	; 0x1bf4 <MDIO_voidSetPinDirection+0x1ca>
    1bf0:	88 0f       	add	r24, r24
    1bf2:	99 1f       	adc	r25, r25
    1bf4:	0a 94       	dec	r0
    1bf6:	e2 f7       	brpl	.-8      	; 0x1bf0 <MDIO_voidSetPinDirection+0x1c6>
    1bf8:	80 95       	com	r24
    1bfa:	84 23       	and	r24, r20
    1bfc:	8c 93       	st	X, r24
		break;
	default:

		break;
	}
}
    1bfe:	0f 90       	pop	r0
    1c00:	0f 90       	pop	r0
    1c02:	0f 90       	pop	r0
    1c04:	0f 90       	pop	r0
    1c06:	0f 90       	pop	r0
    1c08:	cf 91       	pop	r28
    1c0a:	df 91       	pop	r29
    1c0c:	08 95       	ret

00001c0e <MDIO_voidSetPinValue>:
 * 				 PIN															 							  *
 *               Value : takes HIGH or LOW																	  *
 * return      : void																					      *
 *============================================================================================================*/
void MDIO_voidSetPinValue     (u8 Copy_u8PortId, u8 Copy_u8PinId ,u8 Copy_u8PinValue)
{
    1c0e:	df 93       	push	r29
    1c10:	cf 93       	push	r28
    1c12:	00 d0       	rcall	.+0      	; 0x1c14 <MDIO_voidSetPinValue+0x6>
    1c14:	00 d0       	rcall	.+0      	; 0x1c16 <MDIO_voidSetPinValue+0x8>
    1c16:	0f 92       	push	r0
    1c18:	cd b7       	in	r28, 0x3d	; 61
    1c1a:	de b7       	in	r29, 0x3e	; 62
    1c1c:	89 83       	std	Y+1, r24	; 0x01
    1c1e:	6a 83       	std	Y+2, r22	; 0x02
    1c20:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8PortId)
    1c22:	89 81       	ldd	r24, Y+1	; 0x01
    1c24:	28 2f       	mov	r18, r24
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	3d 83       	std	Y+5, r19	; 0x05
    1c2a:	2c 83       	std	Y+4, r18	; 0x04
    1c2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c2e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c30:	81 30       	cpi	r24, 0x01	; 1
    1c32:	91 05       	cpc	r25, r1
    1c34:	09 f4       	brne	.+2      	; 0x1c38 <MDIO_voidSetPinValue+0x2a>
    1c36:	47 c0       	rjmp	.+142    	; 0x1cc6 <MDIO_voidSetPinValue+0xb8>
    1c38:	2c 81       	ldd	r18, Y+4	; 0x04
    1c3a:	3d 81       	ldd	r19, Y+5	; 0x05
    1c3c:	22 30       	cpi	r18, 0x02	; 2
    1c3e:	31 05       	cpc	r19, r1
    1c40:	2c f4       	brge	.+10     	; 0x1c4c <MDIO_voidSetPinValue+0x3e>
    1c42:	8c 81       	ldd	r24, Y+4	; 0x04
    1c44:	9d 81       	ldd	r25, Y+5	; 0x05
    1c46:	00 97       	sbiw	r24, 0x00	; 0
    1c48:	71 f0       	breq	.+28     	; 0x1c66 <MDIO_voidSetPinValue+0x58>
    1c4a:	cb c0       	rjmp	.+406    	; 0x1de2 <MDIO_voidSetPinValue+0x1d4>
    1c4c:	2c 81       	ldd	r18, Y+4	; 0x04
    1c4e:	3d 81       	ldd	r19, Y+5	; 0x05
    1c50:	22 30       	cpi	r18, 0x02	; 2
    1c52:	31 05       	cpc	r19, r1
    1c54:	09 f4       	brne	.+2      	; 0x1c58 <MDIO_voidSetPinValue+0x4a>
    1c56:	67 c0       	rjmp	.+206    	; 0x1d26 <MDIO_voidSetPinValue+0x118>
    1c58:	8c 81       	ldd	r24, Y+4	; 0x04
    1c5a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c5c:	83 30       	cpi	r24, 0x03	; 3
    1c5e:	91 05       	cpc	r25, r1
    1c60:	09 f4       	brne	.+2      	; 0x1c64 <MDIO_voidSetPinValue+0x56>
    1c62:	91 c0       	rjmp	.+290    	; 0x1d86 <MDIO_voidSetPinValue+0x178>
    1c64:	be c0       	rjmp	.+380    	; 0x1de2 <MDIO_voidSetPinValue+0x1d4>
	{
	case DIO_PORTA:
		if(Copy_u8PinValue == DIO_HIGH )
    1c66:	8b 81       	ldd	r24, Y+3	; 0x03
    1c68:	81 30       	cpi	r24, 0x01	; 1
    1c6a:	a1 f4       	brne	.+40     	; 0x1c94 <MDIO_voidSetPinValue+0x86>
		{
			SET_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);
    1c6c:	ab e3       	ldi	r26, 0x3B	; 59
    1c6e:	b0 e0       	ldi	r27, 0x00	; 0
    1c70:	eb e3       	ldi	r30, 0x3B	; 59
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	80 81       	ld	r24, Z
    1c76:	48 2f       	mov	r20, r24
    1c78:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7a:	28 2f       	mov	r18, r24
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	02 2e       	mov	r0, r18
    1c84:	02 c0       	rjmp	.+4      	; 0x1c8a <MDIO_voidSetPinValue+0x7c>
    1c86:	88 0f       	add	r24, r24
    1c88:	99 1f       	adc	r25, r25
    1c8a:	0a 94       	dec	r0
    1c8c:	e2 f7       	brpl	.-8      	; 0x1c86 <MDIO_voidSetPinValue+0x78>
    1c8e:	84 2b       	or	r24, r20
    1c90:	8c 93       	st	X, r24
    1c92:	a7 c0       	rjmp	.+334    	; 0x1de2 <MDIO_voidSetPinValue+0x1d4>
		}
		else if(Copy_u8PinValue == DIO_LOW)
    1c94:	8b 81       	ldd	r24, Y+3	; 0x03
    1c96:	88 23       	and	r24, r24
    1c98:	09 f0       	breq	.+2      	; 0x1c9c <MDIO_voidSetPinValue+0x8e>
    1c9a:	a3 c0       	rjmp	.+326    	; 0x1de2 <MDIO_voidSetPinValue+0x1d4>
		{
			CLR_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);
    1c9c:	ab e3       	ldi	r26, 0x3B	; 59
    1c9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ca0:	eb e3       	ldi	r30, 0x3B	; 59
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	80 81       	ld	r24, Z
    1ca6:	48 2f       	mov	r20, r24
    1ca8:	8a 81       	ldd	r24, Y+2	; 0x02
    1caa:	28 2f       	mov	r18, r24
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	02 2e       	mov	r0, r18
    1cb4:	02 c0       	rjmp	.+4      	; 0x1cba <MDIO_voidSetPinValue+0xac>
    1cb6:	88 0f       	add	r24, r24
    1cb8:	99 1f       	adc	r25, r25
    1cba:	0a 94       	dec	r0
    1cbc:	e2 f7       	brpl	.-8      	; 0x1cb6 <MDIO_voidSetPinValue+0xa8>
    1cbe:	80 95       	com	r24
    1cc0:	84 23       	and	r24, r20
    1cc2:	8c 93       	st	X, r24
    1cc4:	8e c0       	rjmp	.+284    	; 0x1de2 <MDIO_voidSetPinValue+0x1d4>
		}
		break;
	case DIO_PORTB:
		if(Copy_u8PinValue == DIO_HIGH )
    1cc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc8:	81 30       	cpi	r24, 0x01	; 1
    1cca:	a1 f4       	brne	.+40     	; 0x1cf4 <MDIO_voidSetPinValue+0xe6>
		{
			SET_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);
    1ccc:	a8 e3       	ldi	r26, 0x38	; 56
    1cce:	b0 e0       	ldi	r27, 0x00	; 0
    1cd0:	e8 e3       	ldi	r30, 0x38	; 56
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	80 81       	ld	r24, Z
    1cd6:	48 2f       	mov	r20, r24
    1cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cda:	28 2f       	mov	r18, r24
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	81 e0       	ldi	r24, 0x01	; 1
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	02 2e       	mov	r0, r18
    1ce4:	02 c0       	rjmp	.+4      	; 0x1cea <MDIO_voidSetPinValue+0xdc>
    1ce6:	88 0f       	add	r24, r24
    1ce8:	99 1f       	adc	r25, r25
    1cea:	0a 94       	dec	r0
    1cec:	e2 f7       	brpl	.-8      	; 0x1ce6 <MDIO_voidSetPinValue+0xd8>
    1cee:	84 2b       	or	r24, r20
    1cf0:	8c 93       	st	X, r24
    1cf2:	77 c0       	rjmp	.+238    	; 0x1de2 <MDIO_voidSetPinValue+0x1d4>
		}
		else if(Copy_u8PinValue == DIO_LOW)
    1cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf6:	88 23       	and	r24, r24
    1cf8:	09 f0       	breq	.+2      	; 0x1cfc <MDIO_voidSetPinValue+0xee>
    1cfa:	73 c0       	rjmp	.+230    	; 0x1de2 <MDIO_voidSetPinValue+0x1d4>
		{
			CLR_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);
    1cfc:	a8 e3       	ldi	r26, 0x38	; 56
    1cfe:	b0 e0       	ldi	r27, 0x00	; 0
    1d00:	e8 e3       	ldi	r30, 0x38	; 56
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	80 81       	ld	r24, Z
    1d06:	48 2f       	mov	r20, r24
    1d08:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0a:	28 2f       	mov	r18, r24
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	02 2e       	mov	r0, r18
    1d14:	02 c0       	rjmp	.+4      	; 0x1d1a <MDIO_voidSetPinValue+0x10c>
    1d16:	88 0f       	add	r24, r24
    1d18:	99 1f       	adc	r25, r25
    1d1a:	0a 94       	dec	r0
    1d1c:	e2 f7       	brpl	.-8      	; 0x1d16 <MDIO_voidSetPinValue+0x108>
    1d1e:	80 95       	com	r24
    1d20:	84 23       	and	r24, r20
    1d22:	8c 93       	st	X, r24
    1d24:	5e c0       	rjmp	.+188    	; 0x1de2 <MDIO_voidSetPinValue+0x1d4>
		}
		break;
	case DIO_PORTC:
		if(Copy_u8PinValue == DIO_HIGH )
    1d26:	8b 81       	ldd	r24, Y+3	; 0x03
    1d28:	81 30       	cpi	r24, 0x01	; 1
    1d2a:	a1 f4       	brne	.+40     	; 0x1d54 <MDIO_voidSetPinValue+0x146>
		{
			SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);
    1d2c:	a5 e3       	ldi	r26, 0x35	; 53
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	e5 e3       	ldi	r30, 0x35	; 53
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	80 81       	ld	r24, Z
    1d36:	48 2f       	mov	r20, r24
    1d38:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3a:	28 2f       	mov	r18, r24
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	02 2e       	mov	r0, r18
    1d44:	02 c0       	rjmp	.+4      	; 0x1d4a <MDIO_voidSetPinValue+0x13c>
    1d46:	88 0f       	add	r24, r24
    1d48:	99 1f       	adc	r25, r25
    1d4a:	0a 94       	dec	r0
    1d4c:	e2 f7       	brpl	.-8      	; 0x1d46 <MDIO_voidSetPinValue+0x138>
    1d4e:	84 2b       	or	r24, r20
    1d50:	8c 93       	st	X, r24
    1d52:	47 c0       	rjmp	.+142    	; 0x1de2 <MDIO_voidSetPinValue+0x1d4>
		}
		else if(Copy_u8PinValue == DIO_LOW)
    1d54:	8b 81       	ldd	r24, Y+3	; 0x03
    1d56:	88 23       	and	r24, r24
    1d58:	09 f0       	breq	.+2      	; 0x1d5c <MDIO_voidSetPinValue+0x14e>
    1d5a:	43 c0       	rjmp	.+134    	; 0x1de2 <MDIO_voidSetPinValue+0x1d4>
		{
			CLR_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);
    1d5c:	a5 e3       	ldi	r26, 0x35	; 53
    1d5e:	b0 e0       	ldi	r27, 0x00	; 0
    1d60:	e5 e3       	ldi	r30, 0x35	; 53
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	80 81       	ld	r24, Z
    1d66:	48 2f       	mov	r20, r24
    1d68:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6a:	28 2f       	mov	r18, r24
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	81 e0       	ldi	r24, 0x01	; 1
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	02 2e       	mov	r0, r18
    1d74:	02 c0       	rjmp	.+4      	; 0x1d7a <MDIO_voidSetPinValue+0x16c>
    1d76:	88 0f       	add	r24, r24
    1d78:	99 1f       	adc	r25, r25
    1d7a:	0a 94       	dec	r0
    1d7c:	e2 f7       	brpl	.-8      	; 0x1d76 <MDIO_voidSetPinValue+0x168>
    1d7e:	80 95       	com	r24
    1d80:	84 23       	and	r24, r20
    1d82:	8c 93       	st	X, r24
    1d84:	2e c0       	rjmp	.+92     	; 0x1de2 <MDIO_voidSetPinValue+0x1d4>
		}
		break;
	case DIO_PORTD:
		if(Copy_u8PinValue == DIO_HIGH )
    1d86:	8b 81       	ldd	r24, Y+3	; 0x03
    1d88:	81 30       	cpi	r24, 0x01	; 1
    1d8a:	a1 f4       	brne	.+40     	; 0x1db4 <MDIO_voidSetPinValue+0x1a6>
		{
			SET_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);
    1d8c:	a2 e3       	ldi	r26, 0x32	; 50
    1d8e:	b0 e0       	ldi	r27, 0x00	; 0
    1d90:	e2 e3       	ldi	r30, 0x32	; 50
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	80 81       	ld	r24, Z
    1d96:	48 2f       	mov	r20, r24
    1d98:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9a:	28 2f       	mov	r18, r24
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	02 2e       	mov	r0, r18
    1da4:	02 c0       	rjmp	.+4      	; 0x1daa <MDIO_voidSetPinValue+0x19c>
    1da6:	88 0f       	add	r24, r24
    1da8:	99 1f       	adc	r25, r25
    1daa:	0a 94       	dec	r0
    1dac:	e2 f7       	brpl	.-8      	; 0x1da6 <MDIO_voidSetPinValue+0x198>
    1dae:	84 2b       	or	r24, r20
    1db0:	8c 93       	st	X, r24
    1db2:	17 c0       	rjmp	.+46     	; 0x1de2 <MDIO_voidSetPinValue+0x1d4>
		}
		else if(Copy_u8PinValue == DIO_LOW)
    1db4:	8b 81       	ldd	r24, Y+3	; 0x03
    1db6:	88 23       	and	r24, r24
    1db8:	a1 f4       	brne	.+40     	; 0x1de2 <MDIO_voidSetPinValue+0x1d4>
		{
			CLR_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);
    1dba:	a2 e3       	ldi	r26, 0x32	; 50
    1dbc:	b0 e0       	ldi	r27, 0x00	; 0
    1dbe:	e2 e3       	ldi	r30, 0x32	; 50
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	48 2f       	mov	r20, r24
    1dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc8:	28 2f       	mov	r18, r24
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	02 2e       	mov	r0, r18
    1dd2:	02 c0       	rjmp	.+4      	; 0x1dd8 <MDIO_voidSetPinValue+0x1ca>
    1dd4:	88 0f       	add	r24, r24
    1dd6:	99 1f       	adc	r25, r25
    1dd8:	0a 94       	dec	r0
    1dda:	e2 f7       	brpl	.-8      	; 0x1dd4 <MDIO_voidSetPinValue+0x1c6>
    1ddc:	80 95       	com	r24
    1dde:	84 23       	and	r24, r20
    1de0:	8c 93       	st	X, r24
		break;
	default:

		break;
	}
}
    1de2:	0f 90       	pop	r0
    1de4:	0f 90       	pop	r0
    1de6:	0f 90       	pop	r0
    1de8:	0f 90       	pop	r0
    1dea:	0f 90       	pop	r0
    1dec:	cf 91       	pop	r28
    1dee:	df 91       	pop	r29
    1df0:	08 95       	ret

00001df2 <MDIO_voidSetPortDirection>:
 * Arguments   : PORT 																						  *
 *               Direction 																	  				  *
 * return      : void																					      *
 *============================================================================================================*/
void MDIO_voidSetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
    1df2:	df 93       	push	r29
    1df4:	cf 93       	push	r28
    1df6:	00 d0       	rcall	.+0      	; 0x1df8 <MDIO_voidSetPortDirection+0x6>
    1df8:	00 d0       	rcall	.+0      	; 0x1dfa <MDIO_voidSetPortDirection+0x8>
    1dfa:	cd b7       	in	r28, 0x3d	; 61
    1dfc:	de b7       	in	r29, 0x3e	; 62
    1dfe:	89 83       	std	Y+1, r24	; 0x01
    1e00:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortId)
    1e02:	89 81       	ldd	r24, Y+1	; 0x01
    1e04:	28 2f       	mov	r18, r24
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	3c 83       	std	Y+4, r19	; 0x04
    1e0a:	2b 83       	std	Y+3, r18	; 0x03
    1e0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e10:	81 30       	cpi	r24, 0x01	; 1
    1e12:	91 05       	cpc	r25, r1
    1e14:	d1 f0       	breq	.+52     	; 0x1e4a <MDIO_voidSetPortDirection+0x58>
    1e16:	2b 81       	ldd	r18, Y+3	; 0x03
    1e18:	3c 81       	ldd	r19, Y+4	; 0x04
    1e1a:	22 30       	cpi	r18, 0x02	; 2
    1e1c:	31 05       	cpc	r19, r1
    1e1e:	2c f4       	brge	.+10     	; 0x1e2a <MDIO_voidSetPortDirection+0x38>
    1e20:	8b 81       	ldd	r24, Y+3	; 0x03
    1e22:	9c 81       	ldd	r25, Y+4	; 0x04
    1e24:	00 97       	sbiw	r24, 0x00	; 0
    1e26:	61 f0       	breq	.+24     	; 0x1e40 <MDIO_voidSetPortDirection+0x4e>
    1e28:	1e c0       	rjmp	.+60     	; 0x1e66 <MDIO_voidSetPortDirection+0x74>
    1e2a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e2c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e2e:	22 30       	cpi	r18, 0x02	; 2
    1e30:	31 05       	cpc	r19, r1
    1e32:	81 f0       	breq	.+32     	; 0x1e54 <MDIO_voidSetPortDirection+0x62>
    1e34:	8b 81       	ldd	r24, Y+3	; 0x03
    1e36:	9c 81       	ldd	r25, Y+4	; 0x04
    1e38:	83 30       	cpi	r24, 0x03	; 3
    1e3a:	91 05       	cpc	r25, r1
    1e3c:	81 f0       	breq	.+32     	; 0x1e5e <MDIO_voidSetPortDirection+0x6c>
    1e3e:	13 c0       	rjmp	.+38     	; 0x1e66 <MDIO_voidSetPortDirection+0x74>
	{
	case DIO_PORTA:
		DIO_u8_DDRA_REG = Copy_u8PortDirection;
    1e40:	ea e3       	ldi	r30, 0x3A	; 58
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	8a 81       	ldd	r24, Y+2	; 0x02
    1e46:	80 83       	st	Z, r24
    1e48:	0e c0       	rjmp	.+28     	; 0x1e66 <MDIO_voidSetPortDirection+0x74>
		break;
	case DIO_PORTB:
		DIO_u8_DDRB_REG = Copy_u8PortDirection;
    1e4a:	e7 e3       	ldi	r30, 0x37	; 55
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e50:	80 83       	st	Z, r24
    1e52:	09 c0       	rjmp	.+18     	; 0x1e66 <MDIO_voidSetPortDirection+0x74>
		break;
	case DIO_PORTC:
		DIO_u8_DDRC_REG = Copy_u8PortDirection;
    1e54:	e4 e3       	ldi	r30, 0x34	; 52
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5a:	80 83       	st	Z, r24
    1e5c:	04 c0       	rjmp	.+8      	; 0x1e66 <MDIO_voidSetPortDirection+0x74>
		break;
	case DIO_PORTD:
		DIO_u8_DDRD_REG = Copy_u8PortDirection;
    1e5e:	e1 e3       	ldi	r30, 0x31	; 49
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	8a 81       	ldd	r24, Y+2	; 0x02
    1e64:	80 83       	st	Z, r24
		break;
	default:

		break;
	}
}
    1e66:	0f 90       	pop	r0
    1e68:	0f 90       	pop	r0
    1e6a:	0f 90       	pop	r0
    1e6c:	0f 90       	pop	r0
    1e6e:	cf 91       	pop	r28
    1e70:	df 91       	pop	r29
    1e72:	08 95       	ret

00001e74 <MDIO_voidSetPortValue>:
 * Arguments   : PORT 																						  *
 *               Value 																						  *
 * return      : void																					      *
 *============================================================================================================*/
void MDIO_voidSetPortValue    (u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
    1e74:	df 93       	push	r29
    1e76:	cf 93       	push	r28
    1e78:	00 d0       	rcall	.+0      	; 0x1e7a <MDIO_voidSetPortValue+0x6>
    1e7a:	00 d0       	rcall	.+0      	; 0x1e7c <MDIO_voidSetPortValue+0x8>
    1e7c:	cd b7       	in	r28, 0x3d	; 61
    1e7e:	de b7       	in	r29, 0x3e	; 62
    1e80:	89 83       	std	Y+1, r24	; 0x01
    1e82:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortId)
    1e84:	89 81       	ldd	r24, Y+1	; 0x01
    1e86:	28 2f       	mov	r18, r24
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	3c 83       	std	Y+4, r19	; 0x04
    1e8c:	2b 83       	std	Y+3, r18	; 0x03
    1e8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e90:	9c 81       	ldd	r25, Y+4	; 0x04
    1e92:	81 30       	cpi	r24, 0x01	; 1
    1e94:	91 05       	cpc	r25, r1
    1e96:	d1 f0       	breq	.+52     	; 0x1ecc <MDIO_voidSetPortValue+0x58>
    1e98:	2b 81       	ldd	r18, Y+3	; 0x03
    1e9a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e9c:	22 30       	cpi	r18, 0x02	; 2
    1e9e:	31 05       	cpc	r19, r1
    1ea0:	2c f4       	brge	.+10     	; 0x1eac <MDIO_voidSetPortValue+0x38>
    1ea2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea6:	00 97       	sbiw	r24, 0x00	; 0
    1ea8:	61 f0       	breq	.+24     	; 0x1ec2 <MDIO_voidSetPortValue+0x4e>
    1eaa:	1e c0       	rjmp	.+60     	; 0x1ee8 <MDIO_voidSetPortValue+0x74>
    1eac:	2b 81       	ldd	r18, Y+3	; 0x03
    1eae:	3c 81       	ldd	r19, Y+4	; 0x04
    1eb0:	22 30       	cpi	r18, 0x02	; 2
    1eb2:	31 05       	cpc	r19, r1
    1eb4:	81 f0       	breq	.+32     	; 0x1ed6 <MDIO_voidSetPortValue+0x62>
    1eb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eba:	83 30       	cpi	r24, 0x03	; 3
    1ebc:	91 05       	cpc	r25, r1
    1ebe:	81 f0       	breq	.+32     	; 0x1ee0 <MDIO_voidSetPortValue+0x6c>
    1ec0:	13 c0       	rjmp	.+38     	; 0x1ee8 <MDIO_voidSetPortValue+0x74>
	{
	case DIO_PORTA:
		DIO_u8_PORTA_REG = Copy_u8PortValue;
    1ec2:	eb e3       	ldi	r30, 0x3B	; 59
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec8:	80 83       	st	Z, r24
    1eca:	0e c0       	rjmp	.+28     	; 0x1ee8 <MDIO_voidSetPortValue+0x74>
		break;
	case DIO_PORTB:
		DIO_u8_PORTB_REG = Copy_u8PortValue;
    1ecc:	e8 e3       	ldi	r30, 0x38	; 56
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed2:	80 83       	st	Z, r24
    1ed4:	09 c0       	rjmp	.+18     	; 0x1ee8 <MDIO_voidSetPortValue+0x74>
		break;
	case DIO_PORTC:
		DIO_u8_PORTC_REG = Copy_u8PortValue;
    1ed6:	e5 e3       	ldi	r30, 0x35	; 53
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	8a 81       	ldd	r24, Y+2	; 0x02
    1edc:	80 83       	st	Z, r24
    1ede:	04 c0       	rjmp	.+8      	; 0x1ee8 <MDIO_voidSetPortValue+0x74>
		break;
	case DIO_PORTD:
		DIO_u8_PORTD_REG = Copy_u8PortValue;
    1ee0:	e2 e3       	ldi	r30, 0x32	; 50
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee6:	80 83       	st	Z, r24
		break;
	default:

		break;
	}
}
    1ee8:	0f 90       	pop	r0
    1eea:	0f 90       	pop	r0
    1eec:	0f 90       	pop	r0
    1eee:	0f 90       	pop	r0
    1ef0:	cf 91       	pop	r28
    1ef2:	df 91       	pop	r29
    1ef4:	08 95       	ret

00001ef6 <MDIO_u8GetPinValue>:
 * Arguments   : PORT																					    *
 * 				 Pin 																						*
 * return      : Pin Value																					*
 *==========================================================================================================*/
u8 MDIO_u8GetPinValue         (u8 Copy_u8PortId, u8 Copy_u8PinId)
{
    1ef6:	df 93       	push	r29
    1ef8:	cf 93       	push	r28
    1efa:	00 d0       	rcall	.+0      	; 0x1efc <MDIO_u8GetPinValue+0x6>
    1efc:	00 d0       	rcall	.+0      	; 0x1efe <MDIO_u8GetPinValue+0x8>
    1efe:	0f 92       	push	r0
    1f00:	cd b7       	in	r28, 0x3d	; 61
    1f02:	de b7       	in	r29, 0x3e	; 62
    1f04:	8a 83       	std	Y+2, r24	; 0x02
    1f06:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8VALUE;
	switch(Copy_u8PortId)
    1f08:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0a:	28 2f       	mov	r18, r24
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	3d 83       	std	Y+5, r19	; 0x05
    1f10:	2c 83       	std	Y+4, r18	; 0x04
    1f12:	4c 81       	ldd	r20, Y+4	; 0x04
    1f14:	5d 81       	ldd	r21, Y+5	; 0x05
    1f16:	41 30       	cpi	r20, 0x01	; 1
    1f18:	51 05       	cpc	r21, r1
    1f1a:	41 f1       	breq	.+80     	; 0x1f6c <MDIO_u8GetPinValue+0x76>
    1f1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f1e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f20:	82 30       	cpi	r24, 0x02	; 2
    1f22:	91 05       	cpc	r25, r1
    1f24:	34 f4       	brge	.+12     	; 0x1f32 <MDIO_u8GetPinValue+0x3c>
    1f26:	2c 81       	ldd	r18, Y+4	; 0x04
    1f28:	3d 81       	ldd	r19, Y+5	; 0x05
    1f2a:	21 15       	cp	r18, r1
    1f2c:	31 05       	cpc	r19, r1
    1f2e:	61 f0       	breq	.+24     	; 0x1f48 <MDIO_u8GetPinValue+0x52>
    1f30:	52 c0       	rjmp	.+164    	; 0x1fd6 <MDIO_u8GetPinValue+0xe0>
    1f32:	4c 81       	ldd	r20, Y+4	; 0x04
    1f34:	5d 81       	ldd	r21, Y+5	; 0x05
    1f36:	42 30       	cpi	r20, 0x02	; 2
    1f38:	51 05       	cpc	r21, r1
    1f3a:	51 f1       	breq	.+84     	; 0x1f90 <MDIO_u8GetPinValue+0x9a>
    1f3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f3e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f40:	83 30       	cpi	r24, 0x03	; 3
    1f42:	91 05       	cpc	r25, r1
    1f44:	b9 f1       	breq	.+110    	; 0x1fb4 <MDIO_u8GetPinValue+0xbe>
    1f46:	47 c0       	rjmp	.+142    	; 0x1fd6 <MDIO_u8GetPinValue+0xe0>
	{
	case DIO_PORTA:
		Local_u8VALUE = GET_BIT(DIO_u8_PINA_REG,Copy_u8PinId);
    1f48:	e9 e3       	ldi	r30, 0x39	; 57
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	80 81       	ld	r24, Z
    1f4e:	28 2f       	mov	r18, r24
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	8b 81       	ldd	r24, Y+3	; 0x03
    1f54:	88 2f       	mov	r24, r24
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	a9 01       	movw	r20, r18
    1f5a:	02 c0       	rjmp	.+4      	; 0x1f60 <MDIO_u8GetPinValue+0x6a>
    1f5c:	55 95       	asr	r21
    1f5e:	47 95       	ror	r20
    1f60:	8a 95       	dec	r24
    1f62:	e2 f7       	brpl	.-8      	; 0x1f5c <MDIO_u8GetPinValue+0x66>
    1f64:	ca 01       	movw	r24, r20
    1f66:	81 70       	andi	r24, 0x01	; 1
    1f68:	89 83       	std	Y+1, r24	; 0x01
    1f6a:	35 c0       	rjmp	.+106    	; 0x1fd6 <MDIO_u8GetPinValue+0xe0>
		break;
	case DIO_PORTB:
		Local_u8VALUE = GET_BIT(DIO_u8_PINB_REG,Copy_u8PinId);
    1f6c:	e6 e3       	ldi	r30, 0x36	; 54
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	80 81       	ld	r24, Z
    1f72:	28 2f       	mov	r18, r24
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	8b 81       	ldd	r24, Y+3	; 0x03
    1f78:	88 2f       	mov	r24, r24
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	a9 01       	movw	r20, r18
    1f7e:	02 c0       	rjmp	.+4      	; 0x1f84 <MDIO_u8GetPinValue+0x8e>
    1f80:	55 95       	asr	r21
    1f82:	47 95       	ror	r20
    1f84:	8a 95       	dec	r24
    1f86:	e2 f7       	brpl	.-8      	; 0x1f80 <MDIO_u8GetPinValue+0x8a>
    1f88:	ca 01       	movw	r24, r20
    1f8a:	81 70       	andi	r24, 0x01	; 1
    1f8c:	89 83       	std	Y+1, r24	; 0x01
    1f8e:	23 c0       	rjmp	.+70     	; 0x1fd6 <MDIO_u8GetPinValue+0xe0>
		break;
	case DIO_PORTC:
		Local_u8VALUE = GET_BIT(DIO_u8_PINC_REG,Copy_u8PinId);
    1f90:	e3 e3       	ldi	r30, 0x33	; 51
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	80 81       	ld	r24, Z
    1f96:	28 2f       	mov	r18, r24
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9c:	88 2f       	mov	r24, r24
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	a9 01       	movw	r20, r18
    1fa2:	02 c0       	rjmp	.+4      	; 0x1fa8 <MDIO_u8GetPinValue+0xb2>
    1fa4:	55 95       	asr	r21
    1fa6:	47 95       	ror	r20
    1fa8:	8a 95       	dec	r24
    1faa:	e2 f7       	brpl	.-8      	; 0x1fa4 <MDIO_u8GetPinValue+0xae>
    1fac:	ca 01       	movw	r24, r20
    1fae:	81 70       	andi	r24, 0x01	; 1
    1fb0:	89 83       	std	Y+1, r24	; 0x01
    1fb2:	11 c0       	rjmp	.+34     	; 0x1fd6 <MDIO_u8GetPinValue+0xe0>
		break;
	case DIO_PORTD:
		Local_u8VALUE = GET_BIT(DIO_u8_PIND_REG,Copy_u8PinId);
    1fb4:	e0 e3       	ldi	r30, 0x30	; 48
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	80 81       	ld	r24, Z
    1fba:	28 2f       	mov	r18, r24
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc0:	88 2f       	mov	r24, r24
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	a9 01       	movw	r20, r18
    1fc6:	02 c0       	rjmp	.+4      	; 0x1fcc <MDIO_u8GetPinValue+0xd6>
    1fc8:	55 95       	asr	r21
    1fca:	47 95       	ror	r20
    1fcc:	8a 95       	dec	r24
    1fce:	e2 f7       	brpl	.-8      	; 0x1fc8 <MDIO_u8GetPinValue+0xd2>
    1fd0:	ca 01       	movw	r24, r20
    1fd2:	81 70       	andi	r24, 0x01	; 1
    1fd4:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:

		break;
	}
	return Local_u8VALUE;
    1fd6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fd8:	0f 90       	pop	r0
    1fda:	0f 90       	pop	r0
    1fdc:	0f 90       	pop	r0
    1fde:	0f 90       	pop	r0
    1fe0:	0f 90       	pop	r0
    1fe2:	cf 91       	pop	r28
    1fe4:	df 91       	pop	r29
    1fe6:	08 95       	ret

00001fe8 <MADC_voidInit>:
 * Description : Set initialization of ADC										*
 * Arguments   : void			 												*
 * return      : void															*
 *==============================================================================*/
void MADC_voidInit(void)
{
    1fe8:	df 93       	push	r29
    1fea:	cf 93       	push	r28
    1fec:	cd b7       	in	r28, 0x3d	; 61
    1fee:	de b7       	in	r29, 0x3e	; 62
	#if VOLTAGE_REFERENCE    ==   AVCC_PIN
		CLR_BIT(ADMUX,7);
    1ff0:	a7 e2       	ldi	r26, 0x27	; 39
    1ff2:	b0 e0       	ldi	r27, 0x00	; 0
    1ff4:	e7 e2       	ldi	r30, 0x27	; 39
    1ff6:	f0 e0       	ldi	r31, 0x00	; 0
    1ff8:	80 81       	ld	r24, Z
    1ffa:	8f 77       	andi	r24, 0x7F	; 127
    1ffc:	8c 93       	st	X, r24
		SET_BIT(ADMUX,6);
    1ffe:	a7 e2       	ldi	r26, 0x27	; 39
    2000:	b0 e0       	ldi	r27, 0x00	; 0
    2002:	e7 e2       	ldi	r30, 0x27	; 39
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	80 81       	ld	r24, Z
    2008:	80 64       	ori	r24, 0x40	; 64
    200a:	8c 93       	st	X, r24
		SET_BIT(ADMUX,7);
		SET_BIT(ADMUX,6);
	#endif
	
	#if ADJUST   == RIGHT_ADJUST
		CLR_BIT(ADMUX,5);
    200c:	a7 e2       	ldi	r26, 0x27	; 39
    200e:	b0 e0       	ldi	r27, 0x00	; 0
    2010:	e7 e2       	ldi	r30, 0x27	; 39
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	80 81       	ld	r24, Z
    2016:	8f 7d       	andi	r24, 0xDF	; 223
    2018:	8c 93       	st	X, r24
	#elif PRESCALER_DIVISION_FACTOR == DIVISION_BY_64
		CLR_BIT(ADCSRA,0);
		SET_BIT(ADCSRA,1);
		SET_BIT(ADCSRA,2);
	#elif PRESCALER_DIVISION_FACTOR == DIVISION_BY_128
		SET_BIT(ADCSRA,0);
    201a:	a6 e2       	ldi	r26, 0x26	; 38
    201c:	b0 e0       	ldi	r27, 0x00	; 0
    201e:	e6 e2       	ldi	r30, 0x26	; 38
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	80 81       	ld	r24, Z
    2024:	81 60       	ori	r24, 0x01	; 1
    2026:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,1);
    2028:	a6 e2       	ldi	r26, 0x26	; 38
    202a:	b0 e0       	ldi	r27, 0x00	; 0
    202c:	e6 e2       	ldi	r30, 0x26	; 38
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	80 81       	ld	r24, Z
    2032:	82 60       	ori	r24, 0x02	; 2
    2034:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,2);
    2036:	a6 e2       	ldi	r26, 0x26	; 38
    2038:	b0 e0       	ldi	r27, 0x00	; 0
    203a:	e6 e2       	ldi	r30, 0x26	; 38
    203c:	f0 e0       	ldi	r31, 0x00	; 0
    203e:	80 81       	ld	r24, Z
    2040:	84 60       	ori	r24, 0x04	; 4
    2042:	8c 93       	st	X, r24
	#endif
	
	#if MODE_SELECTION  ==  AUTO_TRIGGER_MODE
		SET_BIT(ADCSRA,5);
    2044:	a6 e2       	ldi	r26, 0x26	; 38
    2046:	b0 e0       	ldi	r27, 0x00	; 0
    2048:	e6 e2       	ldi	r30, 0x26	; 38
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	80 81       	ld	r24, Z
    204e:	80 62       	ori	r24, 0x20	; 32
    2050:	8c 93       	st	X, r24
	#elif MODE_SELECTION  ==  SINGLE_CONVERSION_MODE
		CLR_BIT(ADCSRA,5);
	#endif
	//ENABLE ADC
	SET_BIT(ADCSRA,7);
    2052:	a6 e2       	ldi	r26, 0x26	; 38
    2054:	b0 e0       	ldi	r27, 0x00	; 0
    2056:	e6 e2       	ldi	r30, 0x26	; 38
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	80 81       	ld	r24, Z
    205c:	80 68       	ori	r24, 0x80	; 128
    205e:	8c 93       	st	X, r24
} 
    2060:	cf 91       	pop	r28
    2062:	df 91       	pop	r29
    2064:	08 95       	ret

00002066 <MADC_u16GetDigitalValue>:
 * Description : Read value of ADC												*
 * Arguments   : void			 												*
 * return      : ADC Value														*
 *==============================================================================*/
u16 MADC_u16GetDigitalValue(void)
{
    2066:	df 93       	push	r29
    2068:	cf 93       	push	r28
    206a:	cd b7       	in	r28, 0x3d	; 61
    206c:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(ADCSRA,4) == 0);
    206e:	e6 e2       	ldi	r30, 0x26	; 38
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	80 81       	ld	r24, Z
    2074:	82 95       	swap	r24
    2076:	8f 70       	andi	r24, 0x0F	; 15
    2078:	88 2f       	mov	r24, r24
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	81 70       	andi	r24, 0x01	; 1
    207e:	90 70       	andi	r25, 0x00	; 0
    2080:	00 97       	sbiw	r24, 0x00	; 0
    2082:	a9 f3       	breq	.-22     	; 0x206e <MADC_u16GetDigitalValue+0x8>
	return ADC_VALUE;
    2084:	e4 e2       	ldi	r30, 0x24	; 36
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	80 81       	ld	r24, Z
    208a:	91 81       	ldd	r25, Z+1	; 0x01
}
    208c:	cf 91       	pop	r28
    208e:	df 91       	pop	r29
    2090:	08 95       	ret

00002092 <MADC_voidAdcStartConversion>:
 * Description : Start Conversion Process										*
 * Arguments   : CHANNEL			 											*
 * return      : void															*
 *==============================================================================*/
void MADC_voidAdcStartConversion(u8 Copy_u8ChannelNum )
{
    2092:	df 93       	push	r29
    2094:	cf 93       	push	r28
    2096:	0f 92       	push	r0
    2098:	cd b7       	in	r28, 0x3d	; 61
    209a:	de b7       	in	r29, 0x3e	; 62
    209c:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8ChannelNum == CHANNEL_0)
    209e:	89 81       	ldd	r24, Y+1	; 0x01
    20a0:	88 23       	and	r24, r24
    20a2:	21 f5       	brne	.+72     	; 0x20ec <MADC_voidAdcStartConversion+0x5a>
	{
		CLR_BIT(ADMUX,4);
    20a4:	a7 e2       	ldi	r26, 0x27	; 39
    20a6:	b0 e0       	ldi	r27, 0x00	; 0
    20a8:	e7 e2       	ldi	r30, 0x27	; 39
    20aa:	f0 e0       	ldi	r31, 0x00	; 0
    20ac:	80 81       	ld	r24, Z
    20ae:	8f 7e       	andi	r24, 0xEF	; 239
    20b0:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,3);
    20b2:	a7 e2       	ldi	r26, 0x27	; 39
    20b4:	b0 e0       	ldi	r27, 0x00	; 0
    20b6:	e7 e2       	ldi	r30, 0x27	; 39
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	80 81       	ld	r24, Z
    20bc:	87 7f       	andi	r24, 0xF7	; 247
    20be:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,2);
    20c0:	a7 e2       	ldi	r26, 0x27	; 39
    20c2:	b0 e0       	ldi	r27, 0x00	; 0
    20c4:	e7 e2       	ldi	r30, 0x27	; 39
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	80 81       	ld	r24, Z
    20ca:	8b 7f       	andi	r24, 0xFB	; 251
    20cc:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,1);
    20ce:	a7 e2       	ldi	r26, 0x27	; 39
    20d0:	b0 e0       	ldi	r27, 0x00	; 0
    20d2:	e7 e2       	ldi	r30, 0x27	; 39
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	80 81       	ld	r24, Z
    20d8:	8d 7f       	andi	r24, 0xFD	; 253
    20da:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,0);
    20dc:	a7 e2       	ldi	r26, 0x27	; 39
    20de:	b0 e0       	ldi	r27, 0x00	; 0
    20e0:	e7 e2       	ldi	r30, 0x27	; 39
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	80 81       	ld	r24, Z
    20e6:	8e 7f       	andi	r24, 0xFE	; 254
    20e8:	8c 93       	st	X, r24
    20ea:	10 c1       	rjmp	.+544    	; 0x230c <MADC_voidAdcStartConversion+0x27a>
	}
	else if (Copy_u8ChannelNum == CHANNEL_1)
    20ec:	89 81       	ldd	r24, Y+1	; 0x01
    20ee:	81 30       	cpi	r24, 0x01	; 1
    20f0:	21 f5       	brne	.+72     	; 0x213a <MADC_voidAdcStartConversion+0xa8>
	{
		CLR_BIT(ADMUX,4);
    20f2:	a7 e2       	ldi	r26, 0x27	; 39
    20f4:	b0 e0       	ldi	r27, 0x00	; 0
    20f6:	e7 e2       	ldi	r30, 0x27	; 39
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	80 81       	ld	r24, Z
    20fc:	8f 7e       	andi	r24, 0xEF	; 239
    20fe:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,3);
    2100:	a7 e2       	ldi	r26, 0x27	; 39
    2102:	b0 e0       	ldi	r27, 0x00	; 0
    2104:	e7 e2       	ldi	r30, 0x27	; 39
    2106:	f0 e0       	ldi	r31, 0x00	; 0
    2108:	80 81       	ld	r24, Z
    210a:	87 7f       	andi	r24, 0xF7	; 247
    210c:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,2);
    210e:	a7 e2       	ldi	r26, 0x27	; 39
    2110:	b0 e0       	ldi	r27, 0x00	; 0
    2112:	e7 e2       	ldi	r30, 0x27	; 39
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	80 81       	ld	r24, Z
    2118:	8b 7f       	andi	r24, 0xFB	; 251
    211a:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,1);
    211c:	a7 e2       	ldi	r26, 0x27	; 39
    211e:	b0 e0       	ldi	r27, 0x00	; 0
    2120:	e7 e2       	ldi	r30, 0x27	; 39
    2122:	f0 e0       	ldi	r31, 0x00	; 0
    2124:	80 81       	ld	r24, Z
    2126:	8d 7f       	andi	r24, 0xFD	; 253
    2128:	8c 93       	st	X, r24
		SET_BIT(ADMUX,0);
    212a:	a7 e2       	ldi	r26, 0x27	; 39
    212c:	b0 e0       	ldi	r27, 0x00	; 0
    212e:	e7 e2       	ldi	r30, 0x27	; 39
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	80 81       	ld	r24, Z
    2134:	81 60       	ori	r24, 0x01	; 1
    2136:	8c 93       	st	X, r24
    2138:	e9 c0       	rjmp	.+466    	; 0x230c <MADC_voidAdcStartConversion+0x27a>
	}
	else if (Copy_u8ChannelNum == CHANNEL_2)
    213a:	89 81       	ldd	r24, Y+1	; 0x01
    213c:	82 30       	cpi	r24, 0x02	; 2
    213e:	21 f5       	brne	.+72     	; 0x2188 <MADC_voidAdcStartConversion+0xf6>

	{
		CLR_BIT(ADMUX,4);
    2140:	a7 e2       	ldi	r26, 0x27	; 39
    2142:	b0 e0       	ldi	r27, 0x00	; 0
    2144:	e7 e2       	ldi	r30, 0x27	; 39
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	80 81       	ld	r24, Z
    214a:	8f 7e       	andi	r24, 0xEF	; 239
    214c:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,3);
    214e:	a7 e2       	ldi	r26, 0x27	; 39
    2150:	b0 e0       	ldi	r27, 0x00	; 0
    2152:	e7 e2       	ldi	r30, 0x27	; 39
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	80 81       	ld	r24, Z
    2158:	87 7f       	andi	r24, 0xF7	; 247
    215a:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,2);
    215c:	a7 e2       	ldi	r26, 0x27	; 39
    215e:	b0 e0       	ldi	r27, 0x00	; 0
    2160:	e7 e2       	ldi	r30, 0x27	; 39
    2162:	f0 e0       	ldi	r31, 0x00	; 0
    2164:	80 81       	ld	r24, Z
    2166:	8b 7f       	andi	r24, 0xFB	; 251
    2168:	8c 93       	st	X, r24
		SET_BIT(ADMUX,1);
    216a:	a7 e2       	ldi	r26, 0x27	; 39
    216c:	b0 e0       	ldi	r27, 0x00	; 0
    216e:	e7 e2       	ldi	r30, 0x27	; 39
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	80 81       	ld	r24, Z
    2174:	82 60       	ori	r24, 0x02	; 2
    2176:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,0);
    2178:	a7 e2       	ldi	r26, 0x27	; 39
    217a:	b0 e0       	ldi	r27, 0x00	; 0
    217c:	e7 e2       	ldi	r30, 0x27	; 39
    217e:	f0 e0       	ldi	r31, 0x00	; 0
    2180:	80 81       	ld	r24, Z
    2182:	8e 7f       	andi	r24, 0xFE	; 254
    2184:	8c 93       	st	X, r24
    2186:	c2 c0       	rjmp	.+388    	; 0x230c <MADC_voidAdcStartConversion+0x27a>
	}
	else if( Copy_u8ChannelNum == CHANNEL_3)
    2188:	89 81       	ldd	r24, Y+1	; 0x01
    218a:	83 30       	cpi	r24, 0x03	; 3
    218c:	21 f5       	brne	.+72     	; 0x21d6 <MADC_voidAdcStartConversion+0x144>
	{
		CLR_BIT(ADMUX,4);
    218e:	a7 e2       	ldi	r26, 0x27	; 39
    2190:	b0 e0       	ldi	r27, 0x00	; 0
    2192:	e7 e2       	ldi	r30, 0x27	; 39
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	80 81       	ld	r24, Z
    2198:	8f 7e       	andi	r24, 0xEF	; 239
    219a:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,3);
    219c:	a7 e2       	ldi	r26, 0x27	; 39
    219e:	b0 e0       	ldi	r27, 0x00	; 0
    21a0:	e7 e2       	ldi	r30, 0x27	; 39
    21a2:	f0 e0       	ldi	r31, 0x00	; 0
    21a4:	80 81       	ld	r24, Z
    21a6:	87 7f       	andi	r24, 0xF7	; 247
    21a8:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,2);
    21aa:	a7 e2       	ldi	r26, 0x27	; 39
    21ac:	b0 e0       	ldi	r27, 0x00	; 0
    21ae:	e7 e2       	ldi	r30, 0x27	; 39
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	80 81       	ld	r24, Z
    21b4:	8b 7f       	andi	r24, 0xFB	; 251
    21b6:	8c 93       	st	X, r24
		SET_BIT(ADMUX,1);
    21b8:	a7 e2       	ldi	r26, 0x27	; 39
    21ba:	b0 e0       	ldi	r27, 0x00	; 0
    21bc:	e7 e2       	ldi	r30, 0x27	; 39
    21be:	f0 e0       	ldi	r31, 0x00	; 0
    21c0:	80 81       	ld	r24, Z
    21c2:	82 60       	ori	r24, 0x02	; 2
    21c4:	8c 93       	st	X, r24
		SET_BIT(ADMUX,0);
    21c6:	a7 e2       	ldi	r26, 0x27	; 39
    21c8:	b0 e0       	ldi	r27, 0x00	; 0
    21ca:	e7 e2       	ldi	r30, 0x27	; 39
    21cc:	f0 e0       	ldi	r31, 0x00	; 0
    21ce:	80 81       	ld	r24, Z
    21d0:	81 60       	ori	r24, 0x01	; 1
    21d2:	8c 93       	st	X, r24
    21d4:	9b c0       	rjmp	.+310    	; 0x230c <MADC_voidAdcStartConversion+0x27a>
	}
	else if (Copy_u8ChannelNum == CHANNEL_4)
    21d6:	89 81       	ldd	r24, Y+1	; 0x01
    21d8:	84 30       	cpi	r24, 0x04	; 4
    21da:	21 f5       	brne	.+72     	; 0x2224 <MADC_voidAdcStartConversion+0x192>
	{
		CLR_BIT(ADMUX,4);
    21dc:	a7 e2       	ldi	r26, 0x27	; 39
    21de:	b0 e0       	ldi	r27, 0x00	; 0
    21e0:	e7 e2       	ldi	r30, 0x27	; 39
    21e2:	f0 e0       	ldi	r31, 0x00	; 0
    21e4:	80 81       	ld	r24, Z
    21e6:	8f 7e       	andi	r24, 0xEF	; 239
    21e8:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,3);
    21ea:	a7 e2       	ldi	r26, 0x27	; 39
    21ec:	b0 e0       	ldi	r27, 0x00	; 0
    21ee:	e7 e2       	ldi	r30, 0x27	; 39
    21f0:	f0 e0       	ldi	r31, 0x00	; 0
    21f2:	80 81       	ld	r24, Z
    21f4:	87 7f       	andi	r24, 0xF7	; 247
    21f6:	8c 93       	st	X, r24
		SET_BIT(ADMUX,2);
    21f8:	a7 e2       	ldi	r26, 0x27	; 39
    21fa:	b0 e0       	ldi	r27, 0x00	; 0
    21fc:	e7 e2       	ldi	r30, 0x27	; 39
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	80 81       	ld	r24, Z
    2202:	84 60       	ori	r24, 0x04	; 4
    2204:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,1);
    2206:	a7 e2       	ldi	r26, 0x27	; 39
    2208:	b0 e0       	ldi	r27, 0x00	; 0
    220a:	e7 e2       	ldi	r30, 0x27	; 39
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	80 81       	ld	r24, Z
    2210:	8d 7f       	andi	r24, 0xFD	; 253
    2212:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,0);
    2214:	a7 e2       	ldi	r26, 0x27	; 39
    2216:	b0 e0       	ldi	r27, 0x00	; 0
    2218:	e7 e2       	ldi	r30, 0x27	; 39
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	80 81       	ld	r24, Z
    221e:	8e 7f       	andi	r24, 0xFE	; 254
    2220:	8c 93       	st	X, r24
    2222:	74 c0       	rjmp	.+232    	; 0x230c <MADC_voidAdcStartConversion+0x27a>
	}
	else if (Copy_u8ChannelNum == CHANNEL_5)
    2224:	89 81       	ldd	r24, Y+1	; 0x01
    2226:	85 30       	cpi	r24, 0x05	; 5
    2228:	21 f5       	brne	.+72     	; 0x2272 <MADC_voidAdcStartConversion+0x1e0>
	{
		CLR_BIT(ADMUX,4);
    222a:	a7 e2       	ldi	r26, 0x27	; 39
    222c:	b0 e0       	ldi	r27, 0x00	; 0
    222e:	e7 e2       	ldi	r30, 0x27	; 39
    2230:	f0 e0       	ldi	r31, 0x00	; 0
    2232:	80 81       	ld	r24, Z
    2234:	8f 7e       	andi	r24, 0xEF	; 239
    2236:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,3);
    2238:	a7 e2       	ldi	r26, 0x27	; 39
    223a:	b0 e0       	ldi	r27, 0x00	; 0
    223c:	e7 e2       	ldi	r30, 0x27	; 39
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	80 81       	ld	r24, Z
    2242:	87 7f       	andi	r24, 0xF7	; 247
    2244:	8c 93       	st	X, r24
		SET_BIT(ADMUX,2);
    2246:	a7 e2       	ldi	r26, 0x27	; 39
    2248:	b0 e0       	ldi	r27, 0x00	; 0
    224a:	e7 e2       	ldi	r30, 0x27	; 39
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	80 81       	ld	r24, Z
    2250:	84 60       	ori	r24, 0x04	; 4
    2252:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,1);
    2254:	a7 e2       	ldi	r26, 0x27	; 39
    2256:	b0 e0       	ldi	r27, 0x00	; 0
    2258:	e7 e2       	ldi	r30, 0x27	; 39
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	80 81       	ld	r24, Z
    225e:	8d 7f       	andi	r24, 0xFD	; 253
    2260:	8c 93       	st	X, r24
		SET_BIT(ADMUX,0);
    2262:	a7 e2       	ldi	r26, 0x27	; 39
    2264:	b0 e0       	ldi	r27, 0x00	; 0
    2266:	e7 e2       	ldi	r30, 0x27	; 39
    2268:	f0 e0       	ldi	r31, 0x00	; 0
    226a:	80 81       	ld	r24, Z
    226c:	81 60       	ori	r24, 0x01	; 1
    226e:	8c 93       	st	X, r24
    2270:	4d c0       	rjmp	.+154    	; 0x230c <MADC_voidAdcStartConversion+0x27a>
	}
	else if (Copy_u8ChannelNum == CHANNEL_6)
    2272:	89 81       	ldd	r24, Y+1	; 0x01
    2274:	86 30       	cpi	r24, 0x06	; 6
    2276:	21 f5       	brne	.+72     	; 0x22c0 <MADC_voidAdcStartConversion+0x22e>
	{
		CLR_BIT(ADMUX,4);
    2278:	a7 e2       	ldi	r26, 0x27	; 39
    227a:	b0 e0       	ldi	r27, 0x00	; 0
    227c:	e7 e2       	ldi	r30, 0x27	; 39
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	80 81       	ld	r24, Z
    2282:	8f 7e       	andi	r24, 0xEF	; 239
    2284:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,3);
    2286:	a7 e2       	ldi	r26, 0x27	; 39
    2288:	b0 e0       	ldi	r27, 0x00	; 0
    228a:	e7 e2       	ldi	r30, 0x27	; 39
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	80 81       	ld	r24, Z
    2290:	87 7f       	andi	r24, 0xF7	; 247
    2292:	8c 93       	st	X, r24
		SET_BIT(ADMUX,2);
    2294:	a7 e2       	ldi	r26, 0x27	; 39
    2296:	b0 e0       	ldi	r27, 0x00	; 0
    2298:	e7 e2       	ldi	r30, 0x27	; 39
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	80 81       	ld	r24, Z
    229e:	84 60       	ori	r24, 0x04	; 4
    22a0:	8c 93       	st	X, r24
		SET_BIT(ADMUX,1);
    22a2:	a7 e2       	ldi	r26, 0x27	; 39
    22a4:	b0 e0       	ldi	r27, 0x00	; 0
    22a6:	e7 e2       	ldi	r30, 0x27	; 39
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	80 81       	ld	r24, Z
    22ac:	82 60       	ori	r24, 0x02	; 2
    22ae:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,0);
    22b0:	a7 e2       	ldi	r26, 0x27	; 39
    22b2:	b0 e0       	ldi	r27, 0x00	; 0
    22b4:	e7 e2       	ldi	r30, 0x27	; 39
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
    22b8:	80 81       	ld	r24, Z
    22ba:	8e 7f       	andi	r24, 0xFE	; 254
    22bc:	8c 93       	st	X, r24
    22be:	26 c0       	rjmp	.+76     	; 0x230c <MADC_voidAdcStartConversion+0x27a>
	}
	else if (Copy_u8ChannelNum == CHANNEL_7)
    22c0:	89 81       	ldd	r24, Y+1	; 0x01
    22c2:	87 30       	cpi	r24, 0x07	; 7
    22c4:	19 f5       	brne	.+70     	; 0x230c <MADC_voidAdcStartConversion+0x27a>
	{
		CLR_BIT(ADMUX,4);
    22c6:	a7 e2       	ldi	r26, 0x27	; 39
    22c8:	b0 e0       	ldi	r27, 0x00	; 0
    22ca:	e7 e2       	ldi	r30, 0x27	; 39
    22cc:	f0 e0       	ldi	r31, 0x00	; 0
    22ce:	80 81       	ld	r24, Z
    22d0:	8f 7e       	andi	r24, 0xEF	; 239
    22d2:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,3);
    22d4:	a7 e2       	ldi	r26, 0x27	; 39
    22d6:	b0 e0       	ldi	r27, 0x00	; 0
    22d8:	e7 e2       	ldi	r30, 0x27	; 39
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	80 81       	ld	r24, Z
    22de:	87 7f       	andi	r24, 0xF7	; 247
    22e0:	8c 93       	st	X, r24
		SET_BIT(ADMUX,2);
    22e2:	a7 e2       	ldi	r26, 0x27	; 39
    22e4:	b0 e0       	ldi	r27, 0x00	; 0
    22e6:	e7 e2       	ldi	r30, 0x27	; 39
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	80 81       	ld	r24, Z
    22ec:	84 60       	ori	r24, 0x04	; 4
    22ee:	8c 93       	st	X, r24
		SET_BIT(ADMUX,1);
    22f0:	a7 e2       	ldi	r26, 0x27	; 39
    22f2:	b0 e0       	ldi	r27, 0x00	; 0
    22f4:	e7 e2       	ldi	r30, 0x27	; 39
    22f6:	f0 e0       	ldi	r31, 0x00	; 0
    22f8:	80 81       	ld	r24, Z
    22fa:	82 60       	ori	r24, 0x02	; 2
    22fc:	8c 93       	st	X, r24
		SET_BIT(ADMUX,0);
    22fe:	a7 e2       	ldi	r26, 0x27	; 39
    2300:	b0 e0       	ldi	r27, 0x00	; 0
    2302:	e7 e2       	ldi	r30, 0x27	; 39
    2304:	f0 e0       	ldi	r31, 0x00	; 0
    2306:	80 81       	ld	r24, Z
    2308:	81 60       	ori	r24, 0x01	; 1
    230a:	8c 93       	st	X, r24
	}
	SET_BIT(ADCSRA,6);
    230c:	a6 e2       	ldi	r26, 0x26	; 38
    230e:	b0 e0       	ldi	r27, 0x00	; 0
    2310:	e6 e2       	ldi	r30, 0x26	; 38
    2312:	f0 e0       	ldi	r31, 0x00	; 0
    2314:	80 81       	ld	r24, Z
    2316:	80 64       	ori	r24, 0x40	; 64
    2318:	8c 93       	st	X, r24
}
    231a:	0f 90       	pop	r0
    231c:	cf 91       	pop	r28
    231e:	df 91       	pop	r29
    2320:	08 95       	ret

00002322 <MADC_voidAdcIntEnable>:
 * Description : ENABLE INT OF ADC												*
 * Arguments   : void				 											*
 * return      : void															*
 *==============================================================================*/
void MADC_voidAdcIntEnable(void)
{
    2322:	df 93       	push	r29
    2324:	cf 93       	push	r28
    2326:	cd b7       	in	r28, 0x3d	; 61
    2328:	de b7       	in	r29, 0x3e	; 62
	//TO ENABLE GLOBAL INT
	SET_BIT(SREG,7);
    232a:	af e5       	ldi	r26, 0x5F	; 95
    232c:	b0 e0       	ldi	r27, 0x00	; 0
    232e:	ef e5       	ldi	r30, 0x5F	; 95
    2330:	f0 e0       	ldi	r31, 0x00	; 0
    2332:	80 81       	ld	r24, Z
    2334:	80 68       	ori	r24, 0x80	; 128
    2336:	8c 93       	st	X, r24
	//TO ENABLE ADC_INT
	SET_BIT(ADCSRA,3);
    2338:	a6 e2       	ldi	r26, 0x26	; 38
    233a:	b0 e0       	ldi	r27, 0x00	; 0
    233c:	e6 e2       	ldi	r30, 0x26	; 38
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	80 81       	ld	r24, Z
    2342:	88 60       	ori	r24, 0x08	; 8
    2344:	8c 93       	st	X, r24
}
    2346:	cf 91       	pop	r28
    2348:	df 91       	pop	r29
    234a:	08 95       	ret

0000234c <MADC_voidAdcIntDisable>:
 * Description : DISABLE INT OF ADC												*
 * Arguments   : void				 											*
 * return      : void															*
 *==============================================================================*/
void MADC_voidAdcIntDisable(void)
{
    234c:	df 93       	push	r29
    234e:	cf 93       	push	r28
    2350:	cd b7       	in	r28, 0x3d	; 61
    2352:	de b7       	in	r29, 0x3e	; 62
	//TO Disable GLOBAL INT
	CLR_BIT(SREG,7);
    2354:	af e5       	ldi	r26, 0x5F	; 95
    2356:	b0 e0       	ldi	r27, 0x00	; 0
    2358:	ef e5       	ldi	r30, 0x5F	; 95
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	80 81       	ld	r24, Z
    235e:	8f 77       	andi	r24, 0x7F	; 127
    2360:	8c 93       	st	X, r24
	//TO Disable ADC_INT
	CLR_BIT(ADCSRA,3);     
    2362:	a6 e2       	ldi	r26, 0x26	; 38
    2364:	b0 e0       	ldi	r27, 0x00	; 0
    2366:	e6 e2       	ldi	r30, 0x26	; 38
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	80 81       	ld	r24, Z
    236c:	87 7f       	andi	r24, 0xF7	; 247
    236e:	8c 93       	st	X, r24
}
    2370:	cf 91       	pop	r28
    2372:	df 91       	pop	r29
    2374:	08 95       	ret

00002376 <MADC_Adc_SET_CALL_BACK>:

void MADC_Adc_SET_CALL_BACK(void(*ptr)(void))
{
    2376:	df 93       	push	r29
    2378:	cf 93       	push	r28
    237a:	00 d0       	rcall	.+0      	; 0x237c <MADC_Adc_SET_CALL_BACK+0x6>
    237c:	cd b7       	in	r28, 0x3d	; 61
    237e:	de b7       	in	r29, 0x3e	; 62
    2380:	9a 83       	std	Y+2, r25	; 0x02
    2382:	89 83       	std	Y+1, r24	; 0x01
	Adc_Int_CALL_BACK = ptr;
    2384:	89 81       	ldd	r24, Y+1	; 0x01
    2386:	9a 81       	ldd	r25, Y+2	; 0x02
    2388:	90 93 8b 00 	sts	0x008B, r25
    238c:	80 93 8a 00 	sts	0x008A, r24
}
    2390:	0f 90       	pop	r0
    2392:	0f 90       	pop	r0
    2394:	cf 91       	pop	r28
    2396:	df 91       	pop	r29
    2398:	08 95       	ret

0000239a <__vector_16>:

/* Prototype for ADC ISR */
void __vector_16(void)     __attribute__((signal));
void __vector_16(void)
{
    239a:	1f 92       	push	r1
    239c:	0f 92       	push	r0
    239e:	0f b6       	in	r0, 0x3f	; 63
    23a0:	0f 92       	push	r0
    23a2:	11 24       	eor	r1, r1
    23a4:	2f 93       	push	r18
    23a6:	3f 93       	push	r19
    23a8:	4f 93       	push	r20
    23aa:	5f 93       	push	r21
    23ac:	6f 93       	push	r22
    23ae:	7f 93       	push	r23
    23b0:	8f 93       	push	r24
    23b2:	9f 93       	push	r25
    23b4:	af 93       	push	r26
    23b6:	bf 93       	push	r27
    23b8:	ef 93       	push	r30
    23ba:	ff 93       	push	r31
    23bc:	df 93       	push	r29
    23be:	cf 93       	push	r28
    23c0:	cd b7       	in	r28, 0x3d	; 61
    23c2:	de b7       	in	r29, 0x3e	; 62
	Adc_Int_CALL_BACK();
    23c4:	e0 91 8a 00 	lds	r30, 0x008A
    23c8:	f0 91 8b 00 	lds	r31, 0x008B
    23cc:	09 95       	icall
}
    23ce:	cf 91       	pop	r28
    23d0:	df 91       	pop	r29
    23d2:	ff 91       	pop	r31
    23d4:	ef 91       	pop	r30
    23d6:	bf 91       	pop	r27
    23d8:	af 91       	pop	r26
    23da:	9f 91       	pop	r25
    23dc:	8f 91       	pop	r24
    23de:	7f 91       	pop	r23
    23e0:	6f 91       	pop	r22
    23e2:	5f 91       	pop	r21
    23e4:	4f 91       	pop	r20
    23e6:	3f 91       	pop	r19
    23e8:	2f 91       	pop	r18
    23ea:	0f 90       	pop	r0
    23ec:	0f be       	out	0x3f, r0	; 63
    23ee:	0f 90       	pop	r0
    23f0:	1f 90       	pop	r1
    23f2:	18 95       	reti

000023f4 <HSTEPPER_voidRotate>:
 * Description : Set DIRECTION OF DCMOTOR , RUN it																					 *						
 * Arguments   : MotorPort, FirstPin, Direction	, Angle		 																		 *						
 * return      : void																												 *						
 *===================================================================================================================================*/
void HSTEPPER_voidRotate (u8 Copy_u8MotorPortId, u8 Copy_u8FirstPinId, u8 Copy_u8Direction, u16 Copy_u16Angle)
{
    23f4:	0f 93       	push	r16
    23f6:	1f 93       	push	r17
    23f8:	df 93       	push	r29
    23fa:	cf 93       	push	r28
    23fc:	cd b7       	in	r28, 0x3d	; 61
    23fe:	de b7       	in	r29, 0x3e	; 62
    2400:	ce 57       	subi	r28, 0x7E	; 126
    2402:	d0 40       	sbci	r29, 0x00	; 0
    2404:	0f b6       	in	r0, 0x3f	; 63
    2406:	f8 94       	cli
    2408:	de bf       	out	0x3e, r29	; 62
    240a:	0f be       	out	0x3f, r0	; 63
    240c:	cd bf       	out	0x3d, r28	; 61
    240e:	fe 01       	movw	r30, r28
    2410:	e8 58       	subi	r30, 0x88	; 136
    2412:	ff 4f       	sbci	r31, 0xFF	; 255
    2414:	80 83       	st	Z, r24
    2416:	fe 01       	movw	r30, r28
    2418:	e7 58       	subi	r30, 0x87	; 135
    241a:	ff 4f       	sbci	r31, 0xFF	; 255
    241c:	60 83       	st	Z, r22
    241e:	fe 01       	movw	r30, r28
    2420:	e6 58       	subi	r30, 0x86	; 134
    2422:	ff 4f       	sbci	r31, 0xFF	; 255
    2424:	40 83       	st	Z, r20
    2426:	fe 01       	movw	r30, r28
    2428:	e5 58       	subi	r30, 0x85	; 133
    242a:	ff 4f       	sbci	r31, 0xFF	; 255
    242c:	31 83       	std	Z+1, r19	; 0x01
    242e:	20 83       	st	Z, r18
	u16 Local_u16Counter = 0;
    2430:	fe 01       	movw	r30, r28
    2432:	ea 58       	subi	r30, 0x8A	; 138
    2434:	ff 4f       	sbci	r31, 0xFF	; 255
    2436:	11 82       	std	Z+1, r1	; 0x01
    2438:	10 82       	st	Z, r1
	u16 Local_U16Revolution =(u16)((Copy_u16Angle * 2048UL) / (360 * 4));
    243a:	fe 01       	movw	r30, r28
    243c:	e5 58       	subi	r30, 0x85	; 133
    243e:	ff 4f       	sbci	r31, 0xFF	; 255
    2440:	80 81       	ld	r24, Z
    2442:	91 81       	ldd	r25, Z+1	; 0x01
    2444:	cc 01       	movw	r24, r24
    2446:	a0 e0       	ldi	r26, 0x00	; 0
    2448:	b0 e0       	ldi	r27, 0x00	; 0
    244a:	07 2e       	mov	r0, r23
    244c:	7b e0       	ldi	r23, 0x0B	; 11
    244e:	88 0f       	add	r24, r24
    2450:	99 1f       	adc	r25, r25
    2452:	aa 1f       	adc	r26, r26
    2454:	bb 1f       	adc	r27, r27
    2456:	7a 95       	dec	r23
    2458:	d1 f7       	brne	.-12     	; 0x244e <HSTEPPER_voidRotate+0x5a>
    245a:	70 2d       	mov	r23, r0
    245c:	20 ea       	ldi	r18, 0xA0	; 160
    245e:	35 e0       	ldi	r19, 0x05	; 5
    2460:	40 e0       	ldi	r20, 0x00	; 0
    2462:	50 e0       	ldi	r21, 0x00	; 0
    2464:	bc 01       	movw	r22, r24
    2466:	cd 01       	movw	r24, r26
    2468:	0e 94 34 21 	call	0x4268	; 0x4268 <__udivmodsi4>
    246c:	da 01       	movw	r26, r20
    246e:	c9 01       	movw	r24, r18
    2470:	fe 01       	movw	r30, r28
    2472:	ec 58       	subi	r30, 0x8C	; 140
    2474:	ff 4f       	sbci	r31, 0xFF	; 255
    2476:	91 83       	std	Z+1, r25	; 0x01
    2478:	80 83       	st	Z, r24

	u8 Local_u8SecondPinID = Copy_u8FirstPinId + 1;
    247a:	de 01       	movw	r26, r28
    247c:	ad 58       	subi	r26, 0x8D	; 141
    247e:	bf 4f       	sbci	r27, 0xFF	; 255
    2480:	fe 01       	movw	r30, r28
    2482:	e7 58       	subi	r30, 0x87	; 135
    2484:	ff 4f       	sbci	r31, 0xFF	; 255
    2486:	80 81       	ld	r24, Z
    2488:	8f 5f       	subi	r24, 0xFF	; 255
    248a:	8c 93       	st	X, r24
	u8 Local_u8ThirdPinID  = Copy_u8FirstPinId + 2;
    248c:	de 01       	movw	r26, r28
    248e:	ae 58       	subi	r26, 0x8E	; 142
    2490:	bf 4f       	sbci	r27, 0xFF	; 255
    2492:	fe 01       	movw	r30, r28
    2494:	e7 58       	subi	r30, 0x87	; 135
    2496:	ff 4f       	sbci	r31, 0xFF	; 255
    2498:	80 81       	ld	r24, Z
    249a:	8e 5f       	subi	r24, 0xFE	; 254
    249c:	8c 93       	st	X, r24
	u8 Local_u8FourthPinID = Copy_u8FirstPinId + 3;
    249e:	de 01       	movw	r26, r28
    24a0:	af 58       	subi	r26, 0x8F	; 143
    24a2:	bf 4f       	sbci	r27, 0xFF	; 255
    24a4:	fe 01       	movw	r30, r28
    24a6:	e7 58       	subi	r30, 0x87	; 135
    24a8:	ff 4f       	sbci	r31, 0xFF	; 255
    24aa:	80 81       	ld	r24, Z
    24ac:	8d 5f       	subi	r24, 0xFD	; 253
    24ae:	8c 93       	st	X, r24
	
	MDIO_voidSetPinDirection(Copy_u8MotorPortId,Copy_u8FirstPinId,  DIO_OUTPUT);
    24b0:	fe 01       	movw	r30, r28
    24b2:	e8 58       	subi	r30, 0x88	; 136
    24b4:	ff 4f       	sbci	r31, 0xFF	; 255
    24b6:	de 01       	movw	r26, r28
    24b8:	a7 58       	subi	r26, 0x87	; 135
    24ba:	bf 4f       	sbci	r27, 0xFF	; 255
    24bc:	80 81       	ld	r24, Z
    24be:	6c 91       	ld	r22, X
    24c0:	41 e0       	ldi	r20, 0x01	; 1
    24c2:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(Copy_u8MotorPortId,Local_u8SecondPinID,DIO_OUTPUT);
    24c6:	fe 01       	movw	r30, r28
    24c8:	e8 58       	subi	r30, 0x88	; 136
    24ca:	ff 4f       	sbci	r31, 0xFF	; 255
    24cc:	de 01       	movw	r26, r28
    24ce:	ad 58       	subi	r26, 0x8D	; 141
    24d0:	bf 4f       	sbci	r27, 0xFF	; 255
    24d2:	80 81       	ld	r24, Z
    24d4:	6c 91       	ld	r22, X
    24d6:	41 e0       	ldi	r20, 0x01	; 1
    24d8:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(Copy_u8MotorPortId,Local_u8ThirdPinID, DIO_OUTPUT);
    24dc:	fe 01       	movw	r30, r28
    24de:	e8 58       	subi	r30, 0x88	; 136
    24e0:	ff 4f       	sbci	r31, 0xFF	; 255
    24e2:	de 01       	movw	r26, r28
    24e4:	ae 58       	subi	r26, 0x8E	; 142
    24e6:	bf 4f       	sbci	r27, 0xFF	; 255
    24e8:	80 81       	ld	r24, Z
    24ea:	6c 91       	ld	r22, X
    24ec:	41 e0       	ldi	r20, 0x01	; 1
    24ee:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(Copy_u8MotorPortId,Local_u8FourthPinID,DIO_OUTPUT);
    24f2:	fe 01       	movw	r30, r28
    24f4:	e8 58       	subi	r30, 0x88	; 136
    24f6:	ff 4f       	sbci	r31, 0xFF	; 255
    24f8:	de 01       	movw	r26, r28
    24fa:	af 58       	subi	r26, 0x8F	; 143
    24fc:	bf 4f       	sbci	r27, 0xFF	; 255
    24fe:	80 81       	ld	r24, Z
    2500:	6c 91       	ld	r22, X
    2502:	41 e0       	ldi	r20, 0x01	; 1
    2504:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <MDIO_voidSetPinDirection>
	
	MDIO_voidSetPinValue(Copy_u8MotorPortId,Copy_u8FirstPinId,  DIO_HIGH);
    2508:	fe 01       	movw	r30, r28
    250a:	e8 58       	subi	r30, 0x88	; 136
    250c:	ff 4f       	sbci	r31, 0xFF	; 255
    250e:	de 01       	movw	r26, r28
    2510:	a7 58       	subi	r26, 0x87	; 135
    2512:	bf 4f       	sbci	r27, 0xFF	; 255
    2514:	80 81       	ld	r24, Z
    2516:	6c 91       	ld	r22, X
    2518:	41 e0       	ldi	r20, 0x01	; 1
    251a:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8MotorPortId,Local_u8SecondPinID,DIO_HIGH);
    251e:	fe 01       	movw	r30, r28
    2520:	e8 58       	subi	r30, 0x88	; 136
    2522:	ff 4f       	sbci	r31, 0xFF	; 255
    2524:	de 01       	movw	r26, r28
    2526:	ad 58       	subi	r26, 0x8D	; 141
    2528:	bf 4f       	sbci	r27, 0xFF	; 255
    252a:	80 81       	ld	r24, Z
    252c:	6c 91       	ld	r22, X
    252e:	41 e0       	ldi	r20, 0x01	; 1
    2530:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8MotorPortId,Local_u8ThirdPinID, DIO_HIGH);
    2534:	fe 01       	movw	r30, r28
    2536:	e8 58       	subi	r30, 0x88	; 136
    2538:	ff 4f       	sbci	r31, 0xFF	; 255
    253a:	de 01       	movw	r26, r28
    253c:	ae 58       	subi	r26, 0x8E	; 142
    253e:	bf 4f       	sbci	r27, 0xFF	; 255
    2540:	80 81       	ld	r24, Z
    2542:	6c 91       	ld	r22, X
    2544:	41 e0       	ldi	r20, 0x01	; 1
    2546:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Copy_u8MotorPortId,Local_u8FourthPinID,DIO_HIGH);
    254a:	fe 01       	movw	r30, r28
    254c:	e8 58       	subi	r30, 0x88	; 136
    254e:	ff 4f       	sbci	r31, 0xFF	; 255
    2550:	de 01       	movw	r26, r28
    2552:	af 58       	subi	r26, 0x8F	; 143
    2554:	bf 4f       	sbci	r27, 0xFF	; 255
    2556:	80 81       	ld	r24, Z
    2558:	6c 91       	ld	r22, X
    255a:	41 e0       	ldi	r20, 0x01	; 1
    255c:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
	
	
	switch(Copy_u8Direction)
    2560:	fe 01       	movw	r30, r28
    2562:	e6 58       	subi	r30, 0x86	; 134
    2564:	ff 4f       	sbci	r31, 0xFF	; 255
    2566:	80 81       	ld	r24, Z
    2568:	28 2f       	mov	r18, r24
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	ef 96       	adiw	r28, 0x3f	; 63
    256e:	3f af       	std	Y+63, r19	; 0x3f
    2570:	2e af       	std	Y+62, r18	; 0x3e
    2572:	ef 97       	sbiw	r28, 0x3f	; 63
    2574:	ef 96       	adiw	r28, 0x3f	; 63
    2576:	8e ad       	ldd	r24, Y+62	; 0x3e
    2578:	9f ad       	ldd	r25, Y+63	; 0x3f
    257a:	ef 97       	sbiw	r28, 0x3f	; 63
    257c:	00 97       	sbiw	r24, 0x00	; 0
    257e:	49 f0       	breq	.+18     	; 0x2592 <HSTEPPER_voidRotate+0x19e>
    2580:	ef 96       	adiw	r28, 0x3f	; 63
    2582:	ee ad       	ldd	r30, Y+62	; 0x3e
    2584:	ff ad       	ldd	r31, Y+63	; 0x3f
    2586:	ef 97       	sbiw	r28, 0x3f	; 63
    2588:	e1 30       	cpi	r30, 0x01	; 1
    258a:	f1 05       	cpc	r31, r1
    258c:	09 f4       	brne	.+2      	; 0x2590 <HSTEPPER_voidRotate+0x19c>
    258e:	70 c3       	rjmp	.+1760   	; 0x2c70 <HSTEPPER_voidRotate+0x87c>
    2590:	07 c6       	rjmp	.+3086   	; 0x31a0 <HSTEPPER_voidRotate+0xdac>
	{
		case CLOCKWISE:
		for(Local_u16Counter = 0; Local_u16Counter < Local_U16Revolution; Local_u16Counter++)
    2592:	fe 01       	movw	r30, r28
    2594:	ea 58       	subi	r30, 0x8A	; 138
    2596:	ff 4f       	sbci	r31, 0xFF	; 255
    2598:	11 82       	std	Z+1, r1	; 0x01
    259a:	10 82       	st	Z, r1
    259c:	59 c3       	rjmp	.+1714   	; 0x2c50 <HSTEPPER_voidRotate+0x85c>
		{
			MDIO_voidSetPinValue(Copy_u8MotorPortId,Copy_u8FirstPinId,  DIO_LOW);
    259e:	fe 01       	movw	r30, r28
    25a0:	e8 58       	subi	r30, 0x88	; 136
    25a2:	ff 4f       	sbci	r31, 0xFF	; 255
    25a4:	de 01       	movw	r26, r28
    25a6:	a7 58       	subi	r26, 0x87	; 135
    25a8:	bf 4f       	sbci	r27, 0xFF	; 255
    25aa:	80 81       	ld	r24, Z
    25ac:	6c 91       	ld	r22, X
    25ae:	40 e0       	ldi	r20, 0x00	; 0
    25b0:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(Copy_u8MotorPortId,Local_u8SecondPinID,DIO_HIGH);
    25b4:	fe 01       	movw	r30, r28
    25b6:	e8 58       	subi	r30, 0x88	; 136
    25b8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ba:	de 01       	movw	r26, r28
    25bc:	ad 58       	subi	r26, 0x8D	; 141
    25be:	bf 4f       	sbci	r27, 0xFF	; 255
    25c0:	80 81       	ld	r24, Z
    25c2:	6c 91       	ld	r22, X
    25c4:	41 e0       	ldi	r20, 0x01	; 1
    25c6:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(Copy_u8MotorPortId,Local_u8ThirdPinID, DIO_HIGH);
    25ca:	fe 01       	movw	r30, r28
    25cc:	e8 58       	subi	r30, 0x88	; 136
    25ce:	ff 4f       	sbci	r31, 0xFF	; 255
    25d0:	de 01       	movw	r26, r28
    25d2:	ae 58       	subi	r26, 0x8E	; 142
    25d4:	bf 4f       	sbci	r27, 0xFF	; 255
    25d6:	80 81       	ld	r24, Z
    25d8:	6c 91       	ld	r22, X
    25da:	41 e0       	ldi	r20, 0x01	; 1
    25dc:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(Copy_u8MotorPortId,Local_u8FourthPinID,DIO_HIGH);
    25e0:	fe 01       	movw	r30, r28
    25e2:	e8 58       	subi	r30, 0x88	; 136
    25e4:	ff 4f       	sbci	r31, 0xFF	; 255
    25e6:	de 01       	movw	r26, r28
    25e8:	af 58       	subi	r26, 0x8F	; 143
    25ea:	bf 4f       	sbci	r27, 0xFF	; 255
    25ec:	80 81       	ld	r24, Z
    25ee:	6c 91       	ld	r22, X
    25f0:	41 e0       	ldi	r20, 0x01	; 1
    25f2:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
    25f6:	fe 01       	movw	r30, r28
    25f8:	e3 59       	subi	r30, 0x93	; 147
    25fa:	ff 4f       	sbci	r31, 0xFF	; 255
    25fc:	80 e0       	ldi	r24, 0x00	; 0
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	a0 e2       	ldi	r26, 0x20	; 32
    2602:	b1 e4       	ldi	r27, 0x41	; 65
    2604:	80 83       	st	Z, r24
    2606:	91 83       	std	Z+1, r25	; 0x01
    2608:	a2 83       	std	Z+2, r26	; 0x02
    260a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    260c:	8e 01       	movw	r16, r28
    260e:	07 59       	subi	r16, 0x97	; 151
    2610:	1f 4f       	sbci	r17, 0xFF	; 255
    2612:	fe 01       	movw	r30, r28
    2614:	e3 59       	subi	r30, 0x93	; 147
    2616:	ff 4f       	sbci	r31, 0xFF	; 255
    2618:	60 81       	ld	r22, Z
    261a:	71 81       	ldd	r23, Z+1	; 0x01
    261c:	82 81       	ldd	r24, Z+2	; 0x02
    261e:	93 81       	ldd	r25, Z+3	; 0x03
    2620:	20 e0       	ldi	r18, 0x00	; 0
    2622:	30 e0       	ldi	r19, 0x00	; 0
    2624:	4a ef       	ldi	r20, 0xFA	; 250
    2626:	54 e4       	ldi	r21, 0x44	; 68
    2628:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    262c:	dc 01       	movw	r26, r24
    262e:	cb 01       	movw	r24, r22
    2630:	f8 01       	movw	r30, r16
    2632:	80 83       	st	Z, r24
    2634:	91 83       	std	Z+1, r25	; 0x01
    2636:	a2 83       	std	Z+2, r26	; 0x02
    2638:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    263a:	fe 01       	movw	r30, r28
    263c:	e7 59       	subi	r30, 0x97	; 151
    263e:	ff 4f       	sbci	r31, 0xFF	; 255
    2640:	60 81       	ld	r22, Z
    2642:	71 81       	ldd	r23, Z+1	; 0x01
    2644:	82 81       	ldd	r24, Z+2	; 0x02
    2646:	93 81       	ldd	r25, Z+3	; 0x03
    2648:	20 e0       	ldi	r18, 0x00	; 0
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	40 e8       	ldi	r20, 0x80	; 128
    264e:	5f e3       	ldi	r21, 0x3F	; 63
    2650:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2654:	88 23       	and	r24, r24
    2656:	44 f4       	brge	.+16     	; 0x2668 <HSTEPPER_voidRotate+0x274>
		__ticks = 1;
    2658:	fe 01       	movw	r30, r28
    265a:	e9 59       	subi	r30, 0x99	; 153
    265c:	ff 4f       	sbci	r31, 0xFF	; 255
    265e:	81 e0       	ldi	r24, 0x01	; 1
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	91 83       	std	Z+1, r25	; 0x01
    2664:	80 83       	st	Z, r24
    2666:	64 c0       	rjmp	.+200    	; 0x2730 <HSTEPPER_voidRotate+0x33c>
	else if (__tmp > 65535)
    2668:	fe 01       	movw	r30, r28
    266a:	e7 59       	subi	r30, 0x97	; 151
    266c:	ff 4f       	sbci	r31, 0xFF	; 255
    266e:	60 81       	ld	r22, Z
    2670:	71 81       	ldd	r23, Z+1	; 0x01
    2672:	82 81       	ldd	r24, Z+2	; 0x02
    2674:	93 81       	ldd	r25, Z+3	; 0x03
    2676:	20 e0       	ldi	r18, 0x00	; 0
    2678:	3f ef       	ldi	r19, 0xFF	; 255
    267a:	4f e7       	ldi	r20, 0x7F	; 127
    267c:	57 e4       	ldi	r21, 0x47	; 71
    267e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2682:	18 16       	cp	r1, r24
    2684:	0c f0       	brlt	.+2      	; 0x2688 <HSTEPPER_voidRotate+0x294>
    2686:	43 c0       	rjmp	.+134    	; 0x270e <HSTEPPER_voidRotate+0x31a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2688:	fe 01       	movw	r30, r28
    268a:	e3 59       	subi	r30, 0x93	; 147
    268c:	ff 4f       	sbci	r31, 0xFF	; 255
    268e:	60 81       	ld	r22, Z
    2690:	71 81       	ldd	r23, Z+1	; 0x01
    2692:	82 81       	ldd	r24, Z+2	; 0x02
    2694:	93 81       	ldd	r25, Z+3	; 0x03
    2696:	20 e0       	ldi	r18, 0x00	; 0
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	40 e2       	ldi	r20, 0x20	; 32
    269c:	51 e4       	ldi	r21, 0x41	; 65
    269e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a2:	dc 01       	movw	r26, r24
    26a4:	cb 01       	movw	r24, r22
    26a6:	8e 01       	movw	r16, r28
    26a8:	09 59       	subi	r16, 0x99	; 153
    26aa:	1f 4f       	sbci	r17, 0xFF	; 255
    26ac:	bc 01       	movw	r22, r24
    26ae:	cd 01       	movw	r24, r26
    26b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b4:	dc 01       	movw	r26, r24
    26b6:	cb 01       	movw	r24, r22
    26b8:	f8 01       	movw	r30, r16
    26ba:	91 83       	std	Z+1, r25	; 0x01
    26bc:	80 83       	st	Z, r24
    26be:	1f c0       	rjmp	.+62     	; 0x26fe <HSTEPPER_voidRotate+0x30a>
    26c0:	fe 01       	movw	r30, r28
    26c2:	eb 59       	subi	r30, 0x9B	; 155
    26c4:	ff 4f       	sbci	r31, 0xFF	; 255
    26c6:	88 ec       	ldi	r24, 0xC8	; 200
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	91 83       	std	Z+1, r25	; 0x01
    26cc:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    26ce:	fe 01       	movw	r30, r28
    26d0:	eb 59       	subi	r30, 0x9B	; 155
    26d2:	ff 4f       	sbci	r31, 0xFF	; 255
    26d4:	80 81       	ld	r24, Z
    26d6:	91 81       	ldd	r25, Z+1	; 0x01
    26d8:	01 97       	sbiw	r24, 0x01	; 1
    26da:	f1 f7       	brne	.-4      	; 0x26d8 <HSTEPPER_voidRotate+0x2e4>
    26dc:	fe 01       	movw	r30, r28
    26de:	eb 59       	subi	r30, 0x9B	; 155
    26e0:	ff 4f       	sbci	r31, 0xFF	; 255
    26e2:	91 83       	std	Z+1, r25	; 0x01
    26e4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26e6:	de 01       	movw	r26, r28
    26e8:	a9 59       	subi	r26, 0x99	; 153
    26ea:	bf 4f       	sbci	r27, 0xFF	; 255
    26ec:	fe 01       	movw	r30, r28
    26ee:	e9 59       	subi	r30, 0x99	; 153
    26f0:	ff 4f       	sbci	r31, 0xFF	; 255
    26f2:	80 81       	ld	r24, Z
    26f4:	91 81       	ldd	r25, Z+1	; 0x01
    26f6:	01 97       	sbiw	r24, 0x01	; 1
    26f8:	11 96       	adiw	r26, 0x01	; 1
    26fa:	9c 93       	st	X, r25
    26fc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26fe:	fe 01       	movw	r30, r28
    2700:	e9 59       	subi	r30, 0x99	; 153
    2702:	ff 4f       	sbci	r31, 0xFF	; 255
    2704:	80 81       	ld	r24, Z
    2706:	91 81       	ldd	r25, Z+1	; 0x01
    2708:	00 97       	sbiw	r24, 0x00	; 0
    270a:	d1 f6       	brne	.-76     	; 0x26c0 <HSTEPPER_voidRotate+0x2cc>
    270c:	27 c0       	rjmp	.+78     	; 0x275c <HSTEPPER_voidRotate+0x368>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    270e:	8e 01       	movw	r16, r28
    2710:	09 59       	subi	r16, 0x99	; 153
    2712:	1f 4f       	sbci	r17, 0xFF	; 255
    2714:	fe 01       	movw	r30, r28
    2716:	e7 59       	subi	r30, 0x97	; 151
    2718:	ff 4f       	sbci	r31, 0xFF	; 255
    271a:	60 81       	ld	r22, Z
    271c:	71 81       	ldd	r23, Z+1	; 0x01
    271e:	82 81       	ldd	r24, Z+2	; 0x02
    2720:	93 81       	ldd	r25, Z+3	; 0x03
    2722:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2726:	dc 01       	movw	r26, r24
    2728:	cb 01       	movw	r24, r22
    272a:	f8 01       	movw	r30, r16
    272c:	91 83       	std	Z+1, r25	; 0x01
    272e:	80 83       	st	Z, r24
    2730:	de 01       	movw	r26, r28
    2732:	ad 59       	subi	r26, 0x9D	; 157
    2734:	bf 4f       	sbci	r27, 0xFF	; 255
    2736:	fe 01       	movw	r30, r28
    2738:	e9 59       	subi	r30, 0x99	; 153
    273a:	ff 4f       	sbci	r31, 0xFF	; 255
    273c:	80 81       	ld	r24, Z
    273e:	91 81       	ldd	r25, Z+1	; 0x01
    2740:	8d 93       	st	X+, r24
    2742:	9c 93       	st	X, r25
    2744:	fe 01       	movw	r30, r28
    2746:	ed 59       	subi	r30, 0x9D	; 157
    2748:	ff 4f       	sbci	r31, 0xFF	; 255
    274a:	80 81       	ld	r24, Z
    274c:	91 81       	ldd	r25, Z+1	; 0x01
    274e:	01 97       	sbiw	r24, 0x01	; 1
    2750:	f1 f7       	brne	.-4      	; 0x274e <HSTEPPER_voidRotate+0x35a>
    2752:	fe 01       	movw	r30, r28
    2754:	ed 59       	subi	r30, 0x9D	; 157
    2756:	ff 4f       	sbci	r31, 0xFF	; 255
    2758:	91 83       	std	Z+1, r25	; 0x01
    275a:	80 83       	st	Z, r24
			_delay_ms(10);
			
			MDIO_voidSetPinValue(Copy_u8MotorPortId,Copy_u8FirstPinId,  DIO_HIGH);
    275c:	fe 01       	movw	r30, r28
    275e:	e8 58       	subi	r30, 0x88	; 136
    2760:	ff 4f       	sbci	r31, 0xFF	; 255
    2762:	de 01       	movw	r26, r28
    2764:	a7 58       	subi	r26, 0x87	; 135
    2766:	bf 4f       	sbci	r27, 0xFF	; 255
    2768:	80 81       	ld	r24, Z
    276a:	6c 91       	ld	r22, X
    276c:	41 e0       	ldi	r20, 0x01	; 1
    276e:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(Copy_u8MotorPortId,Local_u8SecondPinID,DIO_LOW);
    2772:	fe 01       	movw	r30, r28
    2774:	e8 58       	subi	r30, 0x88	; 136
    2776:	ff 4f       	sbci	r31, 0xFF	; 255
    2778:	de 01       	movw	r26, r28
    277a:	ad 58       	subi	r26, 0x8D	; 141
    277c:	bf 4f       	sbci	r27, 0xFF	; 255
    277e:	80 81       	ld	r24, Z
    2780:	6c 91       	ld	r22, X
    2782:	40 e0       	ldi	r20, 0x00	; 0
    2784:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(Copy_u8MotorPortId,Local_u8ThirdPinID, DIO_HIGH);
    2788:	fe 01       	movw	r30, r28
    278a:	e8 58       	subi	r30, 0x88	; 136
    278c:	ff 4f       	sbci	r31, 0xFF	; 255
    278e:	de 01       	movw	r26, r28
    2790:	ae 58       	subi	r26, 0x8E	; 142
    2792:	bf 4f       	sbci	r27, 0xFF	; 255
    2794:	80 81       	ld	r24, Z
    2796:	6c 91       	ld	r22, X
    2798:	41 e0       	ldi	r20, 0x01	; 1
    279a:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(Copy_u8MotorPortId,Local_u8FourthPinID,DIO_HIGH);
    279e:	fe 01       	movw	r30, r28
    27a0:	e8 58       	subi	r30, 0x88	; 136
    27a2:	ff 4f       	sbci	r31, 0xFF	; 255
    27a4:	de 01       	movw	r26, r28
    27a6:	af 58       	subi	r26, 0x8F	; 143
    27a8:	bf 4f       	sbci	r27, 0xFF	; 255
    27aa:	80 81       	ld	r24, Z
    27ac:	6c 91       	ld	r22, X
    27ae:	41 e0       	ldi	r20, 0x01	; 1
    27b0:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
    27b4:	fe 01       	movw	r30, r28
    27b6:	e1 5a       	subi	r30, 0xA1	; 161
    27b8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ba:	80 e0       	ldi	r24, 0x00	; 0
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	a0 e2       	ldi	r26, 0x20	; 32
    27c0:	b1 e4       	ldi	r27, 0x41	; 65
    27c2:	80 83       	st	Z, r24
    27c4:	91 83       	std	Z+1, r25	; 0x01
    27c6:	a2 83       	std	Z+2, r26	; 0x02
    27c8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ca:	8e 01       	movw	r16, r28
    27cc:	05 5a       	subi	r16, 0xA5	; 165
    27ce:	1f 4f       	sbci	r17, 0xFF	; 255
    27d0:	fe 01       	movw	r30, r28
    27d2:	e1 5a       	subi	r30, 0xA1	; 161
    27d4:	ff 4f       	sbci	r31, 0xFF	; 255
    27d6:	60 81       	ld	r22, Z
    27d8:	71 81       	ldd	r23, Z+1	; 0x01
    27da:	82 81       	ldd	r24, Z+2	; 0x02
    27dc:	93 81       	ldd	r25, Z+3	; 0x03
    27de:	20 e0       	ldi	r18, 0x00	; 0
    27e0:	30 e0       	ldi	r19, 0x00	; 0
    27e2:	4a ef       	ldi	r20, 0xFA	; 250
    27e4:	54 e4       	ldi	r21, 0x44	; 68
    27e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ea:	dc 01       	movw	r26, r24
    27ec:	cb 01       	movw	r24, r22
    27ee:	f8 01       	movw	r30, r16
    27f0:	80 83       	st	Z, r24
    27f2:	91 83       	std	Z+1, r25	; 0x01
    27f4:	a2 83       	std	Z+2, r26	; 0x02
    27f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27f8:	fe 01       	movw	r30, r28
    27fa:	e5 5a       	subi	r30, 0xA5	; 165
    27fc:	ff 4f       	sbci	r31, 0xFF	; 255
    27fe:	60 81       	ld	r22, Z
    2800:	71 81       	ldd	r23, Z+1	; 0x01
    2802:	82 81       	ldd	r24, Z+2	; 0x02
    2804:	93 81       	ldd	r25, Z+3	; 0x03
    2806:	20 e0       	ldi	r18, 0x00	; 0
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	40 e8       	ldi	r20, 0x80	; 128
    280c:	5f e3       	ldi	r21, 0x3F	; 63
    280e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2812:	88 23       	and	r24, r24
    2814:	44 f4       	brge	.+16     	; 0x2826 <HSTEPPER_voidRotate+0x432>
		__ticks = 1;
    2816:	fe 01       	movw	r30, r28
    2818:	e7 5a       	subi	r30, 0xA7	; 167
    281a:	ff 4f       	sbci	r31, 0xFF	; 255
    281c:	81 e0       	ldi	r24, 0x01	; 1
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	91 83       	std	Z+1, r25	; 0x01
    2822:	80 83       	st	Z, r24
    2824:	64 c0       	rjmp	.+200    	; 0x28ee <HSTEPPER_voidRotate+0x4fa>
	else if (__tmp > 65535)
    2826:	fe 01       	movw	r30, r28
    2828:	e5 5a       	subi	r30, 0xA5	; 165
    282a:	ff 4f       	sbci	r31, 0xFF	; 255
    282c:	60 81       	ld	r22, Z
    282e:	71 81       	ldd	r23, Z+1	; 0x01
    2830:	82 81       	ldd	r24, Z+2	; 0x02
    2832:	93 81       	ldd	r25, Z+3	; 0x03
    2834:	20 e0       	ldi	r18, 0x00	; 0
    2836:	3f ef       	ldi	r19, 0xFF	; 255
    2838:	4f e7       	ldi	r20, 0x7F	; 127
    283a:	57 e4       	ldi	r21, 0x47	; 71
    283c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2840:	18 16       	cp	r1, r24
    2842:	0c f0       	brlt	.+2      	; 0x2846 <HSTEPPER_voidRotate+0x452>
    2844:	43 c0       	rjmp	.+134    	; 0x28cc <HSTEPPER_voidRotate+0x4d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2846:	fe 01       	movw	r30, r28
    2848:	e1 5a       	subi	r30, 0xA1	; 161
    284a:	ff 4f       	sbci	r31, 0xFF	; 255
    284c:	60 81       	ld	r22, Z
    284e:	71 81       	ldd	r23, Z+1	; 0x01
    2850:	82 81       	ldd	r24, Z+2	; 0x02
    2852:	93 81       	ldd	r25, Z+3	; 0x03
    2854:	20 e0       	ldi	r18, 0x00	; 0
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	40 e2       	ldi	r20, 0x20	; 32
    285a:	51 e4       	ldi	r21, 0x41	; 65
    285c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2860:	dc 01       	movw	r26, r24
    2862:	cb 01       	movw	r24, r22
    2864:	8e 01       	movw	r16, r28
    2866:	07 5a       	subi	r16, 0xA7	; 167
    2868:	1f 4f       	sbci	r17, 0xFF	; 255
    286a:	bc 01       	movw	r22, r24
    286c:	cd 01       	movw	r24, r26
    286e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2872:	dc 01       	movw	r26, r24
    2874:	cb 01       	movw	r24, r22
    2876:	f8 01       	movw	r30, r16
    2878:	91 83       	std	Z+1, r25	; 0x01
    287a:	80 83       	st	Z, r24
    287c:	1f c0       	rjmp	.+62     	; 0x28bc <HSTEPPER_voidRotate+0x4c8>
    287e:	fe 01       	movw	r30, r28
    2880:	e9 5a       	subi	r30, 0xA9	; 169
    2882:	ff 4f       	sbci	r31, 0xFF	; 255
    2884:	88 ec       	ldi	r24, 0xC8	; 200
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	91 83       	std	Z+1, r25	; 0x01
    288a:	80 83       	st	Z, r24
    288c:	fe 01       	movw	r30, r28
    288e:	e9 5a       	subi	r30, 0xA9	; 169
    2890:	ff 4f       	sbci	r31, 0xFF	; 255
    2892:	80 81       	ld	r24, Z
    2894:	91 81       	ldd	r25, Z+1	; 0x01
    2896:	01 97       	sbiw	r24, 0x01	; 1
    2898:	f1 f7       	brne	.-4      	; 0x2896 <HSTEPPER_voidRotate+0x4a2>
    289a:	fe 01       	movw	r30, r28
    289c:	e9 5a       	subi	r30, 0xA9	; 169
    289e:	ff 4f       	sbci	r31, 0xFF	; 255
    28a0:	91 83       	std	Z+1, r25	; 0x01
    28a2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28a4:	de 01       	movw	r26, r28
    28a6:	a7 5a       	subi	r26, 0xA7	; 167
    28a8:	bf 4f       	sbci	r27, 0xFF	; 255
    28aa:	fe 01       	movw	r30, r28
    28ac:	e7 5a       	subi	r30, 0xA7	; 167
    28ae:	ff 4f       	sbci	r31, 0xFF	; 255
    28b0:	80 81       	ld	r24, Z
    28b2:	91 81       	ldd	r25, Z+1	; 0x01
    28b4:	01 97       	sbiw	r24, 0x01	; 1
    28b6:	11 96       	adiw	r26, 0x01	; 1
    28b8:	9c 93       	st	X, r25
    28ba:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28bc:	fe 01       	movw	r30, r28
    28be:	e7 5a       	subi	r30, 0xA7	; 167
    28c0:	ff 4f       	sbci	r31, 0xFF	; 255
    28c2:	80 81       	ld	r24, Z
    28c4:	91 81       	ldd	r25, Z+1	; 0x01
    28c6:	00 97       	sbiw	r24, 0x00	; 0
    28c8:	d1 f6       	brne	.-76     	; 0x287e <HSTEPPER_voidRotate+0x48a>
    28ca:	27 c0       	rjmp	.+78     	; 0x291a <HSTEPPER_voidRotate+0x526>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28cc:	8e 01       	movw	r16, r28
    28ce:	07 5a       	subi	r16, 0xA7	; 167
    28d0:	1f 4f       	sbci	r17, 0xFF	; 255
    28d2:	fe 01       	movw	r30, r28
    28d4:	e5 5a       	subi	r30, 0xA5	; 165
    28d6:	ff 4f       	sbci	r31, 0xFF	; 255
    28d8:	60 81       	ld	r22, Z
    28da:	71 81       	ldd	r23, Z+1	; 0x01
    28dc:	82 81       	ldd	r24, Z+2	; 0x02
    28de:	93 81       	ldd	r25, Z+3	; 0x03
    28e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e4:	dc 01       	movw	r26, r24
    28e6:	cb 01       	movw	r24, r22
    28e8:	f8 01       	movw	r30, r16
    28ea:	91 83       	std	Z+1, r25	; 0x01
    28ec:	80 83       	st	Z, r24
    28ee:	de 01       	movw	r26, r28
    28f0:	ab 5a       	subi	r26, 0xAB	; 171
    28f2:	bf 4f       	sbci	r27, 0xFF	; 255
    28f4:	fe 01       	movw	r30, r28
    28f6:	e7 5a       	subi	r30, 0xA7	; 167
    28f8:	ff 4f       	sbci	r31, 0xFF	; 255
    28fa:	80 81       	ld	r24, Z
    28fc:	91 81       	ldd	r25, Z+1	; 0x01
    28fe:	8d 93       	st	X+, r24
    2900:	9c 93       	st	X, r25
    2902:	fe 01       	movw	r30, r28
    2904:	eb 5a       	subi	r30, 0xAB	; 171
    2906:	ff 4f       	sbci	r31, 0xFF	; 255
    2908:	80 81       	ld	r24, Z
    290a:	91 81       	ldd	r25, Z+1	; 0x01
    290c:	01 97       	sbiw	r24, 0x01	; 1
    290e:	f1 f7       	brne	.-4      	; 0x290c <HSTEPPER_voidRotate+0x518>
    2910:	fe 01       	movw	r30, r28
    2912:	eb 5a       	subi	r30, 0xAB	; 171
    2914:	ff 4f       	sbci	r31, 0xFF	; 255
    2916:	91 83       	std	Z+1, r25	; 0x01
    2918:	80 83       	st	Z, r24
			_delay_ms(10);
			
			MDIO_voidSetPinValue(Copy_u8MotorPortId,Copy_u8FirstPinId,  DIO_HIGH);
    291a:	fe 01       	movw	r30, r28
    291c:	e8 58       	subi	r30, 0x88	; 136
    291e:	ff 4f       	sbci	r31, 0xFF	; 255
    2920:	de 01       	movw	r26, r28
    2922:	a7 58       	subi	r26, 0x87	; 135
    2924:	bf 4f       	sbci	r27, 0xFF	; 255
    2926:	80 81       	ld	r24, Z
    2928:	6c 91       	ld	r22, X
    292a:	41 e0       	ldi	r20, 0x01	; 1
    292c:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(Copy_u8MotorPortId,Local_u8SecondPinID,DIO_HIGH);
    2930:	fe 01       	movw	r30, r28
    2932:	e8 58       	subi	r30, 0x88	; 136
    2934:	ff 4f       	sbci	r31, 0xFF	; 255
    2936:	de 01       	movw	r26, r28
    2938:	ad 58       	subi	r26, 0x8D	; 141
    293a:	bf 4f       	sbci	r27, 0xFF	; 255
    293c:	80 81       	ld	r24, Z
    293e:	6c 91       	ld	r22, X
    2940:	41 e0       	ldi	r20, 0x01	; 1
    2942:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(Copy_u8MotorPortId,Local_u8ThirdPinID, DIO_LOW);
    2946:	fe 01       	movw	r30, r28
    2948:	e8 58       	subi	r30, 0x88	; 136
    294a:	ff 4f       	sbci	r31, 0xFF	; 255
    294c:	de 01       	movw	r26, r28
    294e:	ae 58       	subi	r26, 0x8E	; 142
    2950:	bf 4f       	sbci	r27, 0xFF	; 255
    2952:	80 81       	ld	r24, Z
    2954:	6c 91       	ld	r22, X
    2956:	40 e0       	ldi	r20, 0x00	; 0
    2958:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(Copy_u8MotorPortId,Local_u8FourthPinID,DIO_HIGH);
    295c:	fe 01       	movw	r30, r28
    295e:	e8 58       	subi	r30, 0x88	; 136
    2960:	ff 4f       	sbci	r31, 0xFF	; 255
    2962:	de 01       	movw	r26, r28
    2964:	af 58       	subi	r26, 0x8F	; 143
    2966:	bf 4f       	sbci	r27, 0xFF	; 255
    2968:	80 81       	ld	r24, Z
    296a:	6c 91       	ld	r22, X
    296c:	41 e0       	ldi	r20, 0x01	; 1
    296e:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
    2972:	fe 01       	movw	r30, r28
    2974:	ef 5a       	subi	r30, 0xAF	; 175
    2976:	ff 4f       	sbci	r31, 0xFF	; 255
    2978:	80 e0       	ldi	r24, 0x00	; 0
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	a0 e2       	ldi	r26, 0x20	; 32
    297e:	b1 e4       	ldi	r27, 0x41	; 65
    2980:	80 83       	st	Z, r24
    2982:	91 83       	std	Z+1, r25	; 0x01
    2984:	a2 83       	std	Z+2, r26	; 0x02
    2986:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2988:	8e 01       	movw	r16, r28
    298a:	03 5b       	subi	r16, 0xB3	; 179
    298c:	1f 4f       	sbci	r17, 0xFF	; 255
    298e:	fe 01       	movw	r30, r28
    2990:	ef 5a       	subi	r30, 0xAF	; 175
    2992:	ff 4f       	sbci	r31, 0xFF	; 255
    2994:	60 81       	ld	r22, Z
    2996:	71 81       	ldd	r23, Z+1	; 0x01
    2998:	82 81       	ldd	r24, Z+2	; 0x02
    299a:	93 81       	ldd	r25, Z+3	; 0x03
    299c:	20 e0       	ldi	r18, 0x00	; 0
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	4a ef       	ldi	r20, 0xFA	; 250
    29a2:	54 e4       	ldi	r21, 0x44	; 68
    29a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29a8:	dc 01       	movw	r26, r24
    29aa:	cb 01       	movw	r24, r22
    29ac:	f8 01       	movw	r30, r16
    29ae:	80 83       	st	Z, r24
    29b0:	91 83       	std	Z+1, r25	; 0x01
    29b2:	a2 83       	std	Z+2, r26	; 0x02
    29b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29b6:	fe 01       	movw	r30, r28
    29b8:	e3 5b       	subi	r30, 0xB3	; 179
    29ba:	ff 4f       	sbci	r31, 0xFF	; 255
    29bc:	60 81       	ld	r22, Z
    29be:	71 81       	ldd	r23, Z+1	; 0x01
    29c0:	82 81       	ldd	r24, Z+2	; 0x02
    29c2:	93 81       	ldd	r25, Z+3	; 0x03
    29c4:	20 e0       	ldi	r18, 0x00	; 0
    29c6:	30 e0       	ldi	r19, 0x00	; 0
    29c8:	40 e8       	ldi	r20, 0x80	; 128
    29ca:	5f e3       	ldi	r21, 0x3F	; 63
    29cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29d0:	88 23       	and	r24, r24
    29d2:	44 f4       	brge	.+16     	; 0x29e4 <HSTEPPER_voidRotate+0x5f0>
		__ticks = 1;
    29d4:	fe 01       	movw	r30, r28
    29d6:	e5 5b       	subi	r30, 0xB5	; 181
    29d8:	ff 4f       	sbci	r31, 0xFF	; 255
    29da:	81 e0       	ldi	r24, 0x01	; 1
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	91 83       	std	Z+1, r25	; 0x01
    29e0:	80 83       	st	Z, r24
    29e2:	64 c0       	rjmp	.+200    	; 0x2aac <HSTEPPER_voidRotate+0x6b8>
	else if (__tmp > 65535)
    29e4:	fe 01       	movw	r30, r28
    29e6:	e3 5b       	subi	r30, 0xB3	; 179
    29e8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ea:	60 81       	ld	r22, Z
    29ec:	71 81       	ldd	r23, Z+1	; 0x01
    29ee:	82 81       	ldd	r24, Z+2	; 0x02
    29f0:	93 81       	ldd	r25, Z+3	; 0x03
    29f2:	20 e0       	ldi	r18, 0x00	; 0
    29f4:	3f ef       	ldi	r19, 0xFF	; 255
    29f6:	4f e7       	ldi	r20, 0x7F	; 127
    29f8:	57 e4       	ldi	r21, 0x47	; 71
    29fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29fe:	18 16       	cp	r1, r24
    2a00:	0c f0       	brlt	.+2      	; 0x2a04 <HSTEPPER_voidRotate+0x610>
    2a02:	43 c0       	rjmp	.+134    	; 0x2a8a <HSTEPPER_voidRotate+0x696>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a04:	fe 01       	movw	r30, r28
    2a06:	ef 5a       	subi	r30, 0xAF	; 175
    2a08:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0a:	60 81       	ld	r22, Z
    2a0c:	71 81       	ldd	r23, Z+1	; 0x01
    2a0e:	82 81       	ldd	r24, Z+2	; 0x02
    2a10:	93 81       	ldd	r25, Z+3	; 0x03
    2a12:	20 e0       	ldi	r18, 0x00	; 0
    2a14:	30 e0       	ldi	r19, 0x00	; 0
    2a16:	40 e2       	ldi	r20, 0x20	; 32
    2a18:	51 e4       	ldi	r21, 0x41	; 65
    2a1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a1e:	dc 01       	movw	r26, r24
    2a20:	cb 01       	movw	r24, r22
    2a22:	8e 01       	movw	r16, r28
    2a24:	05 5b       	subi	r16, 0xB5	; 181
    2a26:	1f 4f       	sbci	r17, 0xFF	; 255
    2a28:	bc 01       	movw	r22, r24
    2a2a:	cd 01       	movw	r24, r26
    2a2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a30:	dc 01       	movw	r26, r24
    2a32:	cb 01       	movw	r24, r22
    2a34:	f8 01       	movw	r30, r16
    2a36:	91 83       	std	Z+1, r25	; 0x01
    2a38:	80 83       	st	Z, r24
    2a3a:	1f c0       	rjmp	.+62     	; 0x2a7a <HSTEPPER_voidRotate+0x686>
    2a3c:	fe 01       	movw	r30, r28
    2a3e:	e7 5b       	subi	r30, 0xB7	; 183
    2a40:	ff 4f       	sbci	r31, 0xFF	; 255
    2a42:	88 ec       	ldi	r24, 0xC8	; 200
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	91 83       	std	Z+1, r25	; 0x01
    2a48:	80 83       	st	Z, r24
    2a4a:	fe 01       	movw	r30, r28
    2a4c:	e7 5b       	subi	r30, 0xB7	; 183
    2a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a50:	80 81       	ld	r24, Z
    2a52:	91 81       	ldd	r25, Z+1	; 0x01
    2a54:	01 97       	sbiw	r24, 0x01	; 1
    2a56:	f1 f7       	brne	.-4      	; 0x2a54 <HSTEPPER_voidRotate+0x660>
    2a58:	fe 01       	movw	r30, r28
    2a5a:	e7 5b       	subi	r30, 0xB7	; 183
    2a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5e:	91 83       	std	Z+1, r25	; 0x01
    2a60:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a62:	de 01       	movw	r26, r28
    2a64:	a5 5b       	subi	r26, 0xB5	; 181
    2a66:	bf 4f       	sbci	r27, 0xFF	; 255
    2a68:	fe 01       	movw	r30, r28
    2a6a:	e5 5b       	subi	r30, 0xB5	; 181
    2a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6e:	80 81       	ld	r24, Z
    2a70:	91 81       	ldd	r25, Z+1	; 0x01
    2a72:	01 97       	sbiw	r24, 0x01	; 1
    2a74:	11 96       	adiw	r26, 0x01	; 1
    2a76:	9c 93       	st	X, r25
    2a78:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a7a:	fe 01       	movw	r30, r28
    2a7c:	e5 5b       	subi	r30, 0xB5	; 181
    2a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a80:	80 81       	ld	r24, Z
    2a82:	91 81       	ldd	r25, Z+1	; 0x01
    2a84:	00 97       	sbiw	r24, 0x00	; 0
    2a86:	d1 f6       	brne	.-76     	; 0x2a3c <HSTEPPER_voidRotate+0x648>
    2a88:	27 c0       	rjmp	.+78     	; 0x2ad8 <HSTEPPER_voidRotate+0x6e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a8a:	8e 01       	movw	r16, r28
    2a8c:	05 5b       	subi	r16, 0xB5	; 181
    2a8e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a90:	fe 01       	movw	r30, r28
    2a92:	e3 5b       	subi	r30, 0xB3	; 179
    2a94:	ff 4f       	sbci	r31, 0xFF	; 255
    2a96:	60 81       	ld	r22, Z
    2a98:	71 81       	ldd	r23, Z+1	; 0x01
    2a9a:	82 81       	ldd	r24, Z+2	; 0x02
    2a9c:	93 81       	ldd	r25, Z+3	; 0x03
    2a9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa2:	dc 01       	movw	r26, r24
    2aa4:	cb 01       	movw	r24, r22
    2aa6:	f8 01       	movw	r30, r16
    2aa8:	91 83       	std	Z+1, r25	; 0x01
    2aaa:	80 83       	st	Z, r24
    2aac:	de 01       	movw	r26, r28
    2aae:	a9 5b       	subi	r26, 0xB9	; 185
    2ab0:	bf 4f       	sbci	r27, 0xFF	; 255
    2ab2:	fe 01       	movw	r30, r28
    2ab4:	e5 5b       	subi	r30, 0xB5	; 181
    2ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab8:	80 81       	ld	r24, Z
    2aba:	91 81       	ldd	r25, Z+1	; 0x01
    2abc:	8d 93       	st	X+, r24
    2abe:	9c 93       	st	X, r25
    2ac0:	fe 01       	movw	r30, r28
    2ac2:	e9 5b       	subi	r30, 0xB9	; 185
    2ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac6:	80 81       	ld	r24, Z
    2ac8:	91 81       	ldd	r25, Z+1	; 0x01
    2aca:	01 97       	sbiw	r24, 0x01	; 1
    2acc:	f1 f7       	brne	.-4      	; 0x2aca <HSTEPPER_voidRotate+0x6d6>
    2ace:	fe 01       	movw	r30, r28
    2ad0:	e9 5b       	subi	r30, 0xB9	; 185
    2ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad4:	91 83       	std	Z+1, r25	; 0x01
    2ad6:	80 83       	st	Z, r24
			_delay_ms(10);
			
			MDIO_voidSetPinValue(Copy_u8MotorPortId,Copy_u8FirstPinId,  DIO_HIGH);
    2ad8:	fe 01       	movw	r30, r28
    2ada:	e8 58       	subi	r30, 0x88	; 136
    2adc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ade:	de 01       	movw	r26, r28
    2ae0:	a7 58       	subi	r26, 0x87	; 135
    2ae2:	bf 4f       	sbci	r27, 0xFF	; 255
    2ae4:	80 81       	ld	r24, Z
    2ae6:	6c 91       	ld	r22, X
    2ae8:	41 e0       	ldi	r20, 0x01	; 1
    2aea:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(Copy_u8MotorPortId,Local_u8SecondPinID,DIO_HIGH);
    2aee:	fe 01       	movw	r30, r28
    2af0:	e8 58       	subi	r30, 0x88	; 136
    2af2:	ff 4f       	sbci	r31, 0xFF	; 255
    2af4:	de 01       	movw	r26, r28
    2af6:	ad 58       	subi	r26, 0x8D	; 141
    2af8:	bf 4f       	sbci	r27, 0xFF	; 255
    2afa:	80 81       	ld	r24, Z
    2afc:	6c 91       	ld	r22, X
    2afe:	41 e0       	ldi	r20, 0x01	; 1
    2b00:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(Copy_u8MotorPortId,Local_u8ThirdPinID, DIO_HIGH);
    2b04:	fe 01       	movw	r30, r28
    2b06:	e8 58       	subi	r30, 0x88	; 136
    2b08:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0a:	de 01       	movw	r26, r28
    2b0c:	ae 58       	subi	r26, 0x8E	; 142
    2b0e:	bf 4f       	sbci	r27, 0xFF	; 255
    2b10:	80 81       	ld	r24, Z
    2b12:	6c 91       	ld	r22, X
    2b14:	41 e0       	ldi	r20, 0x01	; 1
    2b16:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(Copy_u8MotorPortId,Local_u8FourthPinID,DIO_LOW);
    2b1a:	fe 01       	movw	r30, r28
    2b1c:	e8 58       	subi	r30, 0x88	; 136
    2b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b20:	de 01       	movw	r26, r28
    2b22:	af 58       	subi	r26, 0x8F	; 143
    2b24:	bf 4f       	sbci	r27, 0xFF	; 255
    2b26:	80 81       	ld	r24, Z
    2b28:	6c 91       	ld	r22, X
    2b2a:	40 e0       	ldi	r20, 0x00	; 0
    2b2c:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
    2b30:	fe 01       	movw	r30, r28
    2b32:	ed 5b       	subi	r30, 0xBD	; 189
    2b34:	ff 4f       	sbci	r31, 0xFF	; 255
    2b36:	80 e0       	ldi	r24, 0x00	; 0
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	a0 e2       	ldi	r26, 0x20	; 32
    2b3c:	b1 e4       	ldi	r27, 0x41	; 65
    2b3e:	80 83       	st	Z, r24
    2b40:	91 83       	std	Z+1, r25	; 0x01
    2b42:	a2 83       	std	Z+2, r26	; 0x02
    2b44:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b46:	8e 01       	movw	r16, r28
    2b48:	01 5c       	subi	r16, 0xC1	; 193
    2b4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b4c:	fe 01       	movw	r30, r28
    2b4e:	ed 5b       	subi	r30, 0xBD	; 189
    2b50:	ff 4f       	sbci	r31, 0xFF	; 255
    2b52:	60 81       	ld	r22, Z
    2b54:	71 81       	ldd	r23, Z+1	; 0x01
    2b56:	82 81       	ldd	r24, Z+2	; 0x02
    2b58:	93 81       	ldd	r25, Z+3	; 0x03
    2b5a:	20 e0       	ldi	r18, 0x00	; 0
    2b5c:	30 e0       	ldi	r19, 0x00	; 0
    2b5e:	4a ef       	ldi	r20, 0xFA	; 250
    2b60:	54 e4       	ldi	r21, 0x44	; 68
    2b62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b66:	dc 01       	movw	r26, r24
    2b68:	cb 01       	movw	r24, r22
    2b6a:	f8 01       	movw	r30, r16
    2b6c:	80 83       	st	Z, r24
    2b6e:	91 83       	std	Z+1, r25	; 0x01
    2b70:	a2 83       	std	Z+2, r26	; 0x02
    2b72:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b74:	fe 01       	movw	r30, r28
    2b76:	ff 96       	adiw	r30, 0x3f	; 63
    2b78:	60 81       	ld	r22, Z
    2b7a:	71 81       	ldd	r23, Z+1	; 0x01
    2b7c:	82 81       	ldd	r24, Z+2	; 0x02
    2b7e:	93 81       	ldd	r25, Z+3	; 0x03
    2b80:	20 e0       	ldi	r18, 0x00	; 0
    2b82:	30 e0       	ldi	r19, 0x00	; 0
    2b84:	40 e8       	ldi	r20, 0x80	; 128
    2b86:	5f e3       	ldi	r21, 0x3F	; 63
    2b88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b8c:	88 23       	and	r24, r24
    2b8e:	2c f4       	brge	.+10     	; 0x2b9a <HSTEPPER_voidRotate+0x7a6>
		__ticks = 1;
    2b90:	81 e0       	ldi	r24, 0x01	; 1
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	9e af       	std	Y+62, r25	; 0x3e
    2b96:	8d af       	std	Y+61, r24	; 0x3d
    2b98:	46 c0       	rjmp	.+140    	; 0x2c26 <HSTEPPER_voidRotate+0x832>
	else if (__tmp > 65535)
    2b9a:	fe 01       	movw	r30, r28
    2b9c:	ff 96       	adiw	r30, 0x3f	; 63
    2b9e:	60 81       	ld	r22, Z
    2ba0:	71 81       	ldd	r23, Z+1	; 0x01
    2ba2:	82 81       	ldd	r24, Z+2	; 0x02
    2ba4:	93 81       	ldd	r25, Z+3	; 0x03
    2ba6:	20 e0       	ldi	r18, 0x00	; 0
    2ba8:	3f ef       	ldi	r19, 0xFF	; 255
    2baa:	4f e7       	ldi	r20, 0x7F	; 127
    2bac:	57 e4       	ldi	r21, 0x47	; 71
    2bae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bb2:	18 16       	cp	r1, r24
    2bb4:	64 f5       	brge	.+88     	; 0x2c0e <HSTEPPER_voidRotate+0x81a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bb6:	fe 01       	movw	r30, r28
    2bb8:	ed 5b       	subi	r30, 0xBD	; 189
    2bba:	ff 4f       	sbci	r31, 0xFF	; 255
    2bbc:	60 81       	ld	r22, Z
    2bbe:	71 81       	ldd	r23, Z+1	; 0x01
    2bc0:	82 81       	ldd	r24, Z+2	; 0x02
    2bc2:	93 81       	ldd	r25, Z+3	; 0x03
    2bc4:	20 e0       	ldi	r18, 0x00	; 0
    2bc6:	30 e0       	ldi	r19, 0x00	; 0
    2bc8:	40 e2       	ldi	r20, 0x20	; 32
    2bca:	51 e4       	ldi	r21, 0x41	; 65
    2bcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd0:	dc 01       	movw	r26, r24
    2bd2:	cb 01       	movw	r24, r22
    2bd4:	bc 01       	movw	r22, r24
    2bd6:	cd 01       	movw	r24, r26
    2bd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bdc:	dc 01       	movw	r26, r24
    2bde:	cb 01       	movw	r24, r22
    2be0:	9e af       	std	Y+62, r25	; 0x3e
    2be2:	8d af       	std	Y+61, r24	; 0x3d
    2be4:	0f c0       	rjmp	.+30     	; 0x2c04 <HSTEPPER_voidRotate+0x810>
    2be6:	88 ec       	ldi	r24, 0xC8	; 200
    2be8:	90 e0       	ldi	r25, 0x00	; 0
    2bea:	9c af       	std	Y+60, r25	; 0x3c
    2bec:	8b af       	std	Y+59, r24	; 0x3b
    2bee:	8b ad       	ldd	r24, Y+59	; 0x3b
    2bf0:	9c ad       	ldd	r25, Y+60	; 0x3c
    2bf2:	01 97       	sbiw	r24, 0x01	; 1
    2bf4:	f1 f7       	brne	.-4      	; 0x2bf2 <HSTEPPER_voidRotate+0x7fe>
    2bf6:	9c af       	std	Y+60, r25	; 0x3c
    2bf8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bfa:	8d ad       	ldd	r24, Y+61	; 0x3d
    2bfc:	9e ad       	ldd	r25, Y+62	; 0x3e
    2bfe:	01 97       	sbiw	r24, 0x01	; 1
    2c00:	9e af       	std	Y+62, r25	; 0x3e
    2c02:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c04:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c06:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c08:	00 97       	sbiw	r24, 0x00	; 0
    2c0a:	69 f7       	brne	.-38     	; 0x2be6 <HSTEPPER_voidRotate+0x7f2>
    2c0c:	16 c0       	rjmp	.+44     	; 0x2c3a <HSTEPPER_voidRotate+0x846>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c0e:	fe 01       	movw	r30, r28
    2c10:	ff 96       	adiw	r30, 0x3f	; 63
    2c12:	60 81       	ld	r22, Z
    2c14:	71 81       	ldd	r23, Z+1	; 0x01
    2c16:	82 81       	ldd	r24, Z+2	; 0x02
    2c18:	93 81       	ldd	r25, Z+3	; 0x03
    2c1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c1e:	dc 01       	movw	r26, r24
    2c20:	cb 01       	movw	r24, r22
    2c22:	9e af       	std	Y+62, r25	; 0x3e
    2c24:	8d af       	std	Y+61, r24	; 0x3d
    2c26:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c28:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c2a:	9a af       	std	Y+58, r25	; 0x3a
    2c2c:	89 af       	std	Y+57, r24	; 0x39
    2c2e:	89 ad       	ldd	r24, Y+57	; 0x39
    2c30:	9a ad       	ldd	r25, Y+58	; 0x3a
    2c32:	01 97       	sbiw	r24, 0x01	; 1
    2c34:	f1 f7       	brne	.-4      	; 0x2c32 <HSTEPPER_voidRotate+0x83e>
    2c36:	9a af       	std	Y+58, r25	; 0x3a
    2c38:	89 af       	std	Y+57, r24	; 0x39
	
	
	switch(Copy_u8Direction)
	{
		case CLOCKWISE:
		for(Local_u16Counter = 0; Local_u16Counter < Local_U16Revolution; Local_u16Counter++)
    2c3a:	de 01       	movw	r26, r28
    2c3c:	aa 58       	subi	r26, 0x8A	; 138
    2c3e:	bf 4f       	sbci	r27, 0xFF	; 255
    2c40:	fe 01       	movw	r30, r28
    2c42:	ea 58       	subi	r30, 0x8A	; 138
    2c44:	ff 4f       	sbci	r31, 0xFF	; 255
    2c46:	80 81       	ld	r24, Z
    2c48:	91 81       	ldd	r25, Z+1	; 0x01
    2c4a:	01 96       	adiw	r24, 0x01	; 1
    2c4c:	8d 93       	st	X+, r24
    2c4e:	9c 93       	st	X, r25
    2c50:	fe 01       	movw	r30, r28
    2c52:	ea 58       	subi	r30, 0x8A	; 138
    2c54:	ff 4f       	sbci	r31, 0xFF	; 255
    2c56:	de 01       	movw	r26, r28
    2c58:	ac 58       	subi	r26, 0x8C	; 140
    2c5a:	bf 4f       	sbci	r27, 0xFF	; 255
    2c5c:	20 81       	ld	r18, Z
    2c5e:	31 81       	ldd	r19, Z+1	; 0x01
    2c60:	8d 91       	ld	r24, X+
    2c62:	9c 91       	ld	r25, X
    2c64:	11 97       	sbiw	r26, 0x01	; 1
    2c66:	28 17       	cp	r18, r24
    2c68:	39 07       	cpc	r19, r25
    2c6a:	08 f4       	brcc	.+2      	; 0x2c6e <HSTEPPER_voidRotate+0x87a>
    2c6c:	98 cc       	rjmp	.-1744   	; 0x259e <HSTEPPER_voidRotate+0x1aa>
    2c6e:	98 c2       	rjmp	.+1328   	; 0x31a0 <HSTEPPER_voidRotate+0xdac>
			MDIO_voidSetPinValue(Copy_u8MotorPortId,Local_u8FourthPinID,DIO_LOW);
			_delay_ms(10);
		}
		break;
		case COUNTERCLOCKWISE:
		for(Local_u16Counter = 0; Local_u16Counter < Local_U16Revolution; Local_u16Counter++)
    2c70:	fe 01       	movw	r30, r28
    2c72:	ea 58       	subi	r30, 0x8A	; 138
    2c74:	ff 4f       	sbci	r31, 0xFF	; 255
    2c76:	11 82       	std	Z+1, r1	; 0x01
    2c78:	10 82       	st	Z, r1
    2c7a:	83 c2       	rjmp	.+1286   	; 0x3182 <HSTEPPER_voidRotate+0xd8e>
		{
			MDIO_voidSetPinValue(Copy_u8MotorPortId,Copy_u8FirstPinId,  DIO_HIGH);
    2c7c:	fe 01       	movw	r30, r28
    2c7e:	e8 58       	subi	r30, 0x88	; 136
    2c80:	ff 4f       	sbci	r31, 0xFF	; 255
    2c82:	de 01       	movw	r26, r28
    2c84:	a7 58       	subi	r26, 0x87	; 135
    2c86:	bf 4f       	sbci	r27, 0xFF	; 255
    2c88:	80 81       	ld	r24, Z
    2c8a:	6c 91       	ld	r22, X
    2c8c:	41 e0       	ldi	r20, 0x01	; 1
    2c8e:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(Copy_u8MotorPortId,Local_u8SecondPinID,DIO_HIGH);
    2c92:	fe 01       	movw	r30, r28
    2c94:	e8 58       	subi	r30, 0x88	; 136
    2c96:	ff 4f       	sbci	r31, 0xFF	; 255
    2c98:	de 01       	movw	r26, r28
    2c9a:	ad 58       	subi	r26, 0x8D	; 141
    2c9c:	bf 4f       	sbci	r27, 0xFF	; 255
    2c9e:	80 81       	ld	r24, Z
    2ca0:	6c 91       	ld	r22, X
    2ca2:	41 e0       	ldi	r20, 0x01	; 1
    2ca4:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(Copy_u8MotorPortId,Local_u8ThirdPinID, DIO_HIGH);
    2ca8:	fe 01       	movw	r30, r28
    2caa:	e8 58       	subi	r30, 0x88	; 136
    2cac:	ff 4f       	sbci	r31, 0xFF	; 255
    2cae:	de 01       	movw	r26, r28
    2cb0:	ae 58       	subi	r26, 0x8E	; 142
    2cb2:	bf 4f       	sbci	r27, 0xFF	; 255
    2cb4:	80 81       	ld	r24, Z
    2cb6:	6c 91       	ld	r22, X
    2cb8:	41 e0       	ldi	r20, 0x01	; 1
    2cba:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(Copy_u8MotorPortId,Local_u8FourthPinID,DIO_LOW);
    2cbe:	fe 01       	movw	r30, r28
    2cc0:	e8 58       	subi	r30, 0x88	; 136
    2cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc4:	de 01       	movw	r26, r28
    2cc6:	af 58       	subi	r26, 0x8F	; 143
    2cc8:	bf 4f       	sbci	r27, 0xFF	; 255
    2cca:	80 81       	ld	r24, Z
    2ccc:	6c 91       	ld	r22, X
    2cce:	40 e0       	ldi	r20, 0x00	; 0
    2cd0:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
    2cd4:	80 e0       	ldi	r24, 0x00	; 0
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	a0 e2       	ldi	r26, 0x20	; 32
    2cda:	b1 e4       	ldi	r27, 0x41	; 65
    2cdc:	8d ab       	std	Y+53, r24	; 0x35
    2cde:	9e ab       	std	Y+54, r25	; 0x36
    2ce0:	af ab       	std	Y+55, r26	; 0x37
    2ce2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ce4:	6d a9       	ldd	r22, Y+53	; 0x35
    2ce6:	7e a9       	ldd	r23, Y+54	; 0x36
    2ce8:	8f a9       	ldd	r24, Y+55	; 0x37
    2cea:	98 ad       	ldd	r25, Y+56	; 0x38
    2cec:	20 e0       	ldi	r18, 0x00	; 0
    2cee:	30 e0       	ldi	r19, 0x00	; 0
    2cf0:	4a ef       	ldi	r20, 0xFA	; 250
    2cf2:	54 e4       	ldi	r21, 0x44	; 68
    2cf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cf8:	dc 01       	movw	r26, r24
    2cfa:	cb 01       	movw	r24, r22
    2cfc:	89 ab       	std	Y+49, r24	; 0x31
    2cfe:	9a ab       	std	Y+50, r25	; 0x32
    2d00:	ab ab       	std	Y+51, r26	; 0x33
    2d02:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2d04:	69 a9       	ldd	r22, Y+49	; 0x31
    2d06:	7a a9       	ldd	r23, Y+50	; 0x32
    2d08:	8b a9       	ldd	r24, Y+51	; 0x33
    2d0a:	9c a9       	ldd	r25, Y+52	; 0x34
    2d0c:	20 e0       	ldi	r18, 0x00	; 0
    2d0e:	30 e0       	ldi	r19, 0x00	; 0
    2d10:	40 e8       	ldi	r20, 0x80	; 128
    2d12:	5f e3       	ldi	r21, 0x3F	; 63
    2d14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d18:	88 23       	and	r24, r24
    2d1a:	2c f4       	brge	.+10     	; 0x2d26 <HSTEPPER_voidRotate+0x932>
		__ticks = 1;
    2d1c:	81 e0       	ldi	r24, 0x01	; 1
    2d1e:	90 e0       	ldi	r25, 0x00	; 0
    2d20:	98 ab       	std	Y+48, r25	; 0x30
    2d22:	8f a7       	std	Y+47, r24	; 0x2f
    2d24:	3f c0       	rjmp	.+126    	; 0x2da4 <HSTEPPER_voidRotate+0x9b0>
	else if (__tmp > 65535)
    2d26:	69 a9       	ldd	r22, Y+49	; 0x31
    2d28:	7a a9       	ldd	r23, Y+50	; 0x32
    2d2a:	8b a9       	ldd	r24, Y+51	; 0x33
    2d2c:	9c a9       	ldd	r25, Y+52	; 0x34
    2d2e:	20 e0       	ldi	r18, 0x00	; 0
    2d30:	3f ef       	ldi	r19, 0xFF	; 255
    2d32:	4f e7       	ldi	r20, 0x7F	; 127
    2d34:	57 e4       	ldi	r21, 0x47	; 71
    2d36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d3a:	18 16       	cp	r1, r24
    2d3c:	4c f5       	brge	.+82     	; 0x2d90 <HSTEPPER_voidRotate+0x99c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d3e:	6d a9       	ldd	r22, Y+53	; 0x35
    2d40:	7e a9       	ldd	r23, Y+54	; 0x36
    2d42:	8f a9       	ldd	r24, Y+55	; 0x37
    2d44:	98 ad       	ldd	r25, Y+56	; 0x38
    2d46:	20 e0       	ldi	r18, 0x00	; 0
    2d48:	30 e0       	ldi	r19, 0x00	; 0
    2d4a:	40 e2       	ldi	r20, 0x20	; 32
    2d4c:	51 e4       	ldi	r21, 0x41	; 65
    2d4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d52:	dc 01       	movw	r26, r24
    2d54:	cb 01       	movw	r24, r22
    2d56:	bc 01       	movw	r22, r24
    2d58:	cd 01       	movw	r24, r26
    2d5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d5e:	dc 01       	movw	r26, r24
    2d60:	cb 01       	movw	r24, r22
    2d62:	98 ab       	std	Y+48, r25	; 0x30
    2d64:	8f a7       	std	Y+47, r24	; 0x2f
    2d66:	0f c0       	rjmp	.+30     	; 0x2d86 <HSTEPPER_voidRotate+0x992>
    2d68:	88 ec       	ldi	r24, 0xC8	; 200
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	9e a7       	std	Y+46, r25	; 0x2e
    2d6e:	8d a7       	std	Y+45, r24	; 0x2d
    2d70:	8d a5       	ldd	r24, Y+45	; 0x2d
    2d72:	9e a5       	ldd	r25, Y+46	; 0x2e
    2d74:	01 97       	sbiw	r24, 0x01	; 1
    2d76:	f1 f7       	brne	.-4      	; 0x2d74 <HSTEPPER_voidRotate+0x980>
    2d78:	9e a7       	std	Y+46, r25	; 0x2e
    2d7a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d7c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d7e:	98 a9       	ldd	r25, Y+48	; 0x30
    2d80:	01 97       	sbiw	r24, 0x01	; 1
    2d82:	98 ab       	std	Y+48, r25	; 0x30
    2d84:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d86:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d88:	98 a9       	ldd	r25, Y+48	; 0x30
    2d8a:	00 97       	sbiw	r24, 0x00	; 0
    2d8c:	69 f7       	brne	.-38     	; 0x2d68 <HSTEPPER_voidRotate+0x974>
    2d8e:	14 c0       	rjmp	.+40     	; 0x2db8 <HSTEPPER_voidRotate+0x9c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d90:	69 a9       	ldd	r22, Y+49	; 0x31
    2d92:	7a a9       	ldd	r23, Y+50	; 0x32
    2d94:	8b a9       	ldd	r24, Y+51	; 0x33
    2d96:	9c a9       	ldd	r25, Y+52	; 0x34
    2d98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d9c:	dc 01       	movw	r26, r24
    2d9e:	cb 01       	movw	r24, r22
    2da0:	98 ab       	std	Y+48, r25	; 0x30
    2da2:	8f a7       	std	Y+47, r24	; 0x2f
    2da4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2da6:	98 a9       	ldd	r25, Y+48	; 0x30
    2da8:	9c a7       	std	Y+44, r25	; 0x2c
    2daa:	8b a7       	std	Y+43, r24	; 0x2b
    2dac:	8b a5       	ldd	r24, Y+43	; 0x2b
    2dae:	9c a5       	ldd	r25, Y+44	; 0x2c
    2db0:	01 97       	sbiw	r24, 0x01	; 1
    2db2:	f1 f7       	brne	.-4      	; 0x2db0 <HSTEPPER_voidRotate+0x9bc>
    2db4:	9c a7       	std	Y+44, r25	; 0x2c
    2db6:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(10);
			
			MDIO_voidSetPinValue(Copy_u8MotorPortId,Copy_u8FirstPinId,  DIO_HIGH);
    2db8:	fe 01       	movw	r30, r28
    2dba:	e8 58       	subi	r30, 0x88	; 136
    2dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dbe:	de 01       	movw	r26, r28
    2dc0:	a7 58       	subi	r26, 0x87	; 135
    2dc2:	bf 4f       	sbci	r27, 0xFF	; 255
    2dc4:	80 81       	ld	r24, Z
    2dc6:	6c 91       	ld	r22, X
    2dc8:	41 e0       	ldi	r20, 0x01	; 1
    2dca:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(Copy_u8MotorPortId,Local_u8SecondPinID,DIO_HIGH);
    2dce:	fe 01       	movw	r30, r28
    2dd0:	e8 58       	subi	r30, 0x88	; 136
    2dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd4:	de 01       	movw	r26, r28
    2dd6:	ad 58       	subi	r26, 0x8D	; 141
    2dd8:	bf 4f       	sbci	r27, 0xFF	; 255
    2dda:	80 81       	ld	r24, Z
    2ddc:	6c 91       	ld	r22, X
    2dde:	41 e0       	ldi	r20, 0x01	; 1
    2de0:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(Copy_u8MotorPortId,Local_u8ThirdPinID, DIO_LOW);
    2de4:	fe 01       	movw	r30, r28
    2de6:	e8 58       	subi	r30, 0x88	; 136
    2de8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dea:	de 01       	movw	r26, r28
    2dec:	ae 58       	subi	r26, 0x8E	; 142
    2dee:	bf 4f       	sbci	r27, 0xFF	; 255
    2df0:	80 81       	ld	r24, Z
    2df2:	6c 91       	ld	r22, X
    2df4:	40 e0       	ldi	r20, 0x00	; 0
    2df6:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(Copy_u8MotorPortId,Local_u8FourthPinID,DIO_HIGH);
    2dfa:	fe 01       	movw	r30, r28
    2dfc:	e8 58       	subi	r30, 0x88	; 136
    2dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2e00:	de 01       	movw	r26, r28
    2e02:	af 58       	subi	r26, 0x8F	; 143
    2e04:	bf 4f       	sbci	r27, 0xFF	; 255
    2e06:	80 81       	ld	r24, Z
    2e08:	6c 91       	ld	r22, X
    2e0a:	41 e0       	ldi	r20, 0x01	; 1
    2e0c:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
    2e10:	80 e0       	ldi	r24, 0x00	; 0
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	a0 e2       	ldi	r26, 0x20	; 32
    2e16:	b1 e4       	ldi	r27, 0x41	; 65
    2e18:	8f a3       	std	Y+39, r24	; 0x27
    2e1a:	98 a7       	std	Y+40, r25	; 0x28
    2e1c:	a9 a7       	std	Y+41, r26	; 0x29
    2e1e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e20:	6f a1       	ldd	r22, Y+39	; 0x27
    2e22:	78 a5       	ldd	r23, Y+40	; 0x28
    2e24:	89 a5       	ldd	r24, Y+41	; 0x29
    2e26:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e28:	20 e0       	ldi	r18, 0x00	; 0
    2e2a:	30 e0       	ldi	r19, 0x00	; 0
    2e2c:	4a ef       	ldi	r20, 0xFA	; 250
    2e2e:	54 e4       	ldi	r21, 0x44	; 68
    2e30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e34:	dc 01       	movw	r26, r24
    2e36:	cb 01       	movw	r24, r22
    2e38:	8b a3       	std	Y+35, r24	; 0x23
    2e3a:	9c a3       	std	Y+36, r25	; 0x24
    2e3c:	ad a3       	std	Y+37, r26	; 0x25
    2e3e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2e40:	6b a1       	ldd	r22, Y+35	; 0x23
    2e42:	7c a1       	ldd	r23, Y+36	; 0x24
    2e44:	8d a1       	ldd	r24, Y+37	; 0x25
    2e46:	9e a1       	ldd	r25, Y+38	; 0x26
    2e48:	20 e0       	ldi	r18, 0x00	; 0
    2e4a:	30 e0       	ldi	r19, 0x00	; 0
    2e4c:	40 e8       	ldi	r20, 0x80	; 128
    2e4e:	5f e3       	ldi	r21, 0x3F	; 63
    2e50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e54:	88 23       	and	r24, r24
    2e56:	2c f4       	brge	.+10     	; 0x2e62 <HSTEPPER_voidRotate+0xa6e>
		__ticks = 1;
    2e58:	81 e0       	ldi	r24, 0x01	; 1
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	9a a3       	std	Y+34, r25	; 0x22
    2e5e:	89 a3       	std	Y+33, r24	; 0x21
    2e60:	3f c0       	rjmp	.+126    	; 0x2ee0 <HSTEPPER_voidRotate+0xaec>
	else if (__tmp > 65535)
    2e62:	6b a1       	ldd	r22, Y+35	; 0x23
    2e64:	7c a1       	ldd	r23, Y+36	; 0x24
    2e66:	8d a1       	ldd	r24, Y+37	; 0x25
    2e68:	9e a1       	ldd	r25, Y+38	; 0x26
    2e6a:	20 e0       	ldi	r18, 0x00	; 0
    2e6c:	3f ef       	ldi	r19, 0xFF	; 255
    2e6e:	4f e7       	ldi	r20, 0x7F	; 127
    2e70:	57 e4       	ldi	r21, 0x47	; 71
    2e72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e76:	18 16       	cp	r1, r24
    2e78:	4c f5       	brge	.+82     	; 0x2ecc <HSTEPPER_voidRotate+0xad8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e7a:	6f a1       	ldd	r22, Y+39	; 0x27
    2e7c:	78 a5       	ldd	r23, Y+40	; 0x28
    2e7e:	89 a5       	ldd	r24, Y+41	; 0x29
    2e80:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e82:	20 e0       	ldi	r18, 0x00	; 0
    2e84:	30 e0       	ldi	r19, 0x00	; 0
    2e86:	40 e2       	ldi	r20, 0x20	; 32
    2e88:	51 e4       	ldi	r21, 0x41	; 65
    2e8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e8e:	dc 01       	movw	r26, r24
    2e90:	cb 01       	movw	r24, r22
    2e92:	bc 01       	movw	r22, r24
    2e94:	cd 01       	movw	r24, r26
    2e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e9a:	dc 01       	movw	r26, r24
    2e9c:	cb 01       	movw	r24, r22
    2e9e:	9a a3       	std	Y+34, r25	; 0x22
    2ea0:	89 a3       	std	Y+33, r24	; 0x21
    2ea2:	0f c0       	rjmp	.+30     	; 0x2ec2 <HSTEPPER_voidRotate+0xace>
    2ea4:	88 ec       	ldi	r24, 0xC8	; 200
    2ea6:	90 e0       	ldi	r25, 0x00	; 0
    2ea8:	98 a3       	std	Y+32, r25	; 0x20
    2eaa:	8f 8f       	std	Y+31, r24	; 0x1f
    2eac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2eae:	98 a1       	ldd	r25, Y+32	; 0x20
    2eb0:	01 97       	sbiw	r24, 0x01	; 1
    2eb2:	f1 f7       	brne	.-4      	; 0x2eb0 <HSTEPPER_voidRotate+0xabc>
    2eb4:	98 a3       	std	Y+32, r25	; 0x20
    2eb6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eb8:	89 a1       	ldd	r24, Y+33	; 0x21
    2eba:	9a a1       	ldd	r25, Y+34	; 0x22
    2ebc:	01 97       	sbiw	r24, 0x01	; 1
    2ebe:	9a a3       	std	Y+34, r25	; 0x22
    2ec0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ec2:	89 a1       	ldd	r24, Y+33	; 0x21
    2ec4:	9a a1       	ldd	r25, Y+34	; 0x22
    2ec6:	00 97       	sbiw	r24, 0x00	; 0
    2ec8:	69 f7       	brne	.-38     	; 0x2ea4 <HSTEPPER_voidRotate+0xab0>
    2eca:	14 c0       	rjmp	.+40     	; 0x2ef4 <HSTEPPER_voidRotate+0xb00>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ecc:	6b a1       	ldd	r22, Y+35	; 0x23
    2ece:	7c a1       	ldd	r23, Y+36	; 0x24
    2ed0:	8d a1       	ldd	r24, Y+37	; 0x25
    2ed2:	9e a1       	ldd	r25, Y+38	; 0x26
    2ed4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed8:	dc 01       	movw	r26, r24
    2eda:	cb 01       	movw	r24, r22
    2edc:	9a a3       	std	Y+34, r25	; 0x22
    2ede:	89 a3       	std	Y+33, r24	; 0x21
    2ee0:	89 a1       	ldd	r24, Y+33	; 0x21
    2ee2:	9a a1       	ldd	r25, Y+34	; 0x22
    2ee4:	9e 8f       	std	Y+30, r25	; 0x1e
    2ee6:	8d 8f       	std	Y+29, r24	; 0x1d
    2ee8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2eea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2eec:	01 97       	sbiw	r24, 0x01	; 1
    2eee:	f1 f7       	brne	.-4      	; 0x2eec <HSTEPPER_voidRotate+0xaf8>
    2ef0:	9e 8f       	std	Y+30, r25	; 0x1e
    2ef2:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(10);
			
			MDIO_voidSetPinValue(Copy_u8MotorPortId,Copy_u8FirstPinId,  DIO_HIGH);
    2ef4:	fe 01       	movw	r30, r28
    2ef6:	e8 58       	subi	r30, 0x88	; 136
    2ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    2efa:	de 01       	movw	r26, r28
    2efc:	a7 58       	subi	r26, 0x87	; 135
    2efe:	bf 4f       	sbci	r27, 0xFF	; 255
    2f00:	80 81       	ld	r24, Z
    2f02:	6c 91       	ld	r22, X
    2f04:	41 e0       	ldi	r20, 0x01	; 1
    2f06:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(Copy_u8MotorPortId,Local_u8SecondPinID,DIO_LOW);
    2f0a:	fe 01       	movw	r30, r28
    2f0c:	e8 58       	subi	r30, 0x88	; 136
    2f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f10:	de 01       	movw	r26, r28
    2f12:	ad 58       	subi	r26, 0x8D	; 141
    2f14:	bf 4f       	sbci	r27, 0xFF	; 255
    2f16:	80 81       	ld	r24, Z
    2f18:	6c 91       	ld	r22, X
    2f1a:	40 e0       	ldi	r20, 0x00	; 0
    2f1c:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(Copy_u8MotorPortId,Local_u8ThirdPinID, DIO_HIGH);
    2f20:	fe 01       	movw	r30, r28
    2f22:	e8 58       	subi	r30, 0x88	; 136
    2f24:	ff 4f       	sbci	r31, 0xFF	; 255
    2f26:	de 01       	movw	r26, r28
    2f28:	ae 58       	subi	r26, 0x8E	; 142
    2f2a:	bf 4f       	sbci	r27, 0xFF	; 255
    2f2c:	80 81       	ld	r24, Z
    2f2e:	6c 91       	ld	r22, X
    2f30:	41 e0       	ldi	r20, 0x01	; 1
    2f32:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(Copy_u8MotorPortId,Local_u8FourthPinID,DIO_HIGH);
    2f36:	fe 01       	movw	r30, r28
    2f38:	e8 58       	subi	r30, 0x88	; 136
    2f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3c:	de 01       	movw	r26, r28
    2f3e:	af 58       	subi	r26, 0x8F	; 143
    2f40:	bf 4f       	sbci	r27, 0xFF	; 255
    2f42:	80 81       	ld	r24, Z
    2f44:	6c 91       	ld	r22, X
    2f46:	41 e0       	ldi	r20, 0x01	; 1
    2f48:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
    2f4c:	80 e0       	ldi	r24, 0x00	; 0
    2f4e:	90 e0       	ldi	r25, 0x00	; 0
    2f50:	a0 e2       	ldi	r26, 0x20	; 32
    2f52:	b1 e4       	ldi	r27, 0x41	; 65
    2f54:	89 8f       	std	Y+25, r24	; 0x19
    2f56:	9a 8f       	std	Y+26, r25	; 0x1a
    2f58:	ab 8f       	std	Y+27, r26	; 0x1b
    2f5a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f5c:	69 8d       	ldd	r22, Y+25	; 0x19
    2f5e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f60:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f62:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f64:	20 e0       	ldi	r18, 0x00	; 0
    2f66:	30 e0       	ldi	r19, 0x00	; 0
    2f68:	4a ef       	ldi	r20, 0xFA	; 250
    2f6a:	54 e4       	ldi	r21, 0x44	; 68
    2f6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f70:	dc 01       	movw	r26, r24
    2f72:	cb 01       	movw	r24, r22
    2f74:	8d 8b       	std	Y+21, r24	; 0x15
    2f76:	9e 8b       	std	Y+22, r25	; 0x16
    2f78:	af 8b       	std	Y+23, r26	; 0x17
    2f7a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f7c:	6d 89       	ldd	r22, Y+21	; 0x15
    2f7e:	7e 89       	ldd	r23, Y+22	; 0x16
    2f80:	8f 89       	ldd	r24, Y+23	; 0x17
    2f82:	98 8d       	ldd	r25, Y+24	; 0x18
    2f84:	20 e0       	ldi	r18, 0x00	; 0
    2f86:	30 e0       	ldi	r19, 0x00	; 0
    2f88:	40 e8       	ldi	r20, 0x80	; 128
    2f8a:	5f e3       	ldi	r21, 0x3F	; 63
    2f8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f90:	88 23       	and	r24, r24
    2f92:	2c f4       	brge	.+10     	; 0x2f9e <HSTEPPER_voidRotate+0xbaa>
		__ticks = 1;
    2f94:	81 e0       	ldi	r24, 0x01	; 1
    2f96:	90 e0       	ldi	r25, 0x00	; 0
    2f98:	9c 8b       	std	Y+20, r25	; 0x14
    2f9a:	8b 8b       	std	Y+19, r24	; 0x13
    2f9c:	3f c0       	rjmp	.+126    	; 0x301c <HSTEPPER_voidRotate+0xc28>
	else if (__tmp > 65535)
    2f9e:	6d 89       	ldd	r22, Y+21	; 0x15
    2fa0:	7e 89       	ldd	r23, Y+22	; 0x16
    2fa2:	8f 89       	ldd	r24, Y+23	; 0x17
    2fa4:	98 8d       	ldd	r25, Y+24	; 0x18
    2fa6:	20 e0       	ldi	r18, 0x00	; 0
    2fa8:	3f ef       	ldi	r19, 0xFF	; 255
    2faa:	4f e7       	ldi	r20, 0x7F	; 127
    2fac:	57 e4       	ldi	r21, 0x47	; 71
    2fae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fb2:	18 16       	cp	r1, r24
    2fb4:	4c f5       	brge	.+82     	; 0x3008 <HSTEPPER_voidRotate+0xc14>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fb6:	69 8d       	ldd	r22, Y+25	; 0x19
    2fb8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fbc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fbe:	20 e0       	ldi	r18, 0x00	; 0
    2fc0:	30 e0       	ldi	r19, 0x00	; 0
    2fc2:	40 e2       	ldi	r20, 0x20	; 32
    2fc4:	51 e4       	ldi	r21, 0x41	; 65
    2fc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fca:	dc 01       	movw	r26, r24
    2fcc:	cb 01       	movw	r24, r22
    2fce:	bc 01       	movw	r22, r24
    2fd0:	cd 01       	movw	r24, r26
    2fd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd6:	dc 01       	movw	r26, r24
    2fd8:	cb 01       	movw	r24, r22
    2fda:	9c 8b       	std	Y+20, r25	; 0x14
    2fdc:	8b 8b       	std	Y+19, r24	; 0x13
    2fde:	0f c0       	rjmp	.+30     	; 0x2ffe <HSTEPPER_voidRotate+0xc0a>
    2fe0:	88 ec       	ldi	r24, 0xC8	; 200
    2fe2:	90 e0       	ldi	r25, 0x00	; 0
    2fe4:	9a 8b       	std	Y+18, r25	; 0x12
    2fe6:	89 8b       	std	Y+17, r24	; 0x11
    2fe8:	89 89       	ldd	r24, Y+17	; 0x11
    2fea:	9a 89       	ldd	r25, Y+18	; 0x12
    2fec:	01 97       	sbiw	r24, 0x01	; 1
    2fee:	f1 f7       	brne	.-4      	; 0x2fec <HSTEPPER_voidRotate+0xbf8>
    2ff0:	9a 8b       	std	Y+18, r25	; 0x12
    2ff2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ff4:	8b 89       	ldd	r24, Y+19	; 0x13
    2ff6:	9c 89       	ldd	r25, Y+20	; 0x14
    2ff8:	01 97       	sbiw	r24, 0x01	; 1
    2ffa:	9c 8b       	std	Y+20, r25	; 0x14
    2ffc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ffe:	8b 89       	ldd	r24, Y+19	; 0x13
    3000:	9c 89       	ldd	r25, Y+20	; 0x14
    3002:	00 97       	sbiw	r24, 0x00	; 0
    3004:	69 f7       	brne	.-38     	; 0x2fe0 <HSTEPPER_voidRotate+0xbec>
    3006:	14 c0       	rjmp	.+40     	; 0x3030 <HSTEPPER_voidRotate+0xc3c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3008:	6d 89       	ldd	r22, Y+21	; 0x15
    300a:	7e 89       	ldd	r23, Y+22	; 0x16
    300c:	8f 89       	ldd	r24, Y+23	; 0x17
    300e:	98 8d       	ldd	r25, Y+24	; 0x18
    3010:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3014:	dc 01       	movw	r26, r24
    3016:	cb 01       	movw	r24, r22
    3018:	9c 8b       	std	Y+20, r25	; 0x14
    301a:	8b 8b       	std	Y+19, r24	; 0x13
    301c:	8b 89       	ldd	r24, Y+19	; 0x13
    301e:	9c 89       	ldd	r25, Y+20	; 0x14
    3020:	98 8b       	std	Y+16, r25	; 0x10
    3022:	8f 87       	std	Y+15, r24	; 0x0f
    3024:	8f 85       	ldd	r24, Y+15	; 0x0f
    3026:	98 89       	ldd	r25, Y+16	; 0x10
    3028:	01 97       	sbiw	r24, 0x01	; 1
    302a:	f1 f7       	brne	.-4      	; 0x3028 <HSTEPPER_voidRotate+0xc34>
    302c:	98 8b       	std	Y+16, r25	; 0x10
    302e:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(10);
			
			MDIO_voidSetPinValue(Copy_u8MotorPortId,Copy_u8FirstPinId,  DIO_LOW);
    3030:	fe 01       	movw	r30, r28
    3032:	e8 58       	subi	r30, 0x88	; 136
    3034:	ff 4f       	sbci	r31, 0xFF	; 255
    3036:	de 01       	movw	r26, r28
    3038:	a7 58       	subi	r26, 0x87	; 135
    303a:	bf 4f       	sbci	r27, 0xFF	; 255
    303c:	80 81       	ld	r24, Z
    303e:	6c 91       	ld	r22, X
    3040:	40 e0       	ldi	r20, 0x00	; 0
    3042:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(Copy_u8MotorPortId,Local_u8SecondPinID,DIO_HIGH);
    3046:	fe 01       	movw	r30, r28
    3048:	e8 58       	subi	r30, 0x88	; 136
    304a:	ff 4f       	sbci	r31, 0xFF	; 255
    304c:	de 01       	movw	r26, r28
    304e:	ad 58       	subi	r26, 0x8D	; 141
    3050:	bf 4f       	sbci	r27, 0xFF	; 255
    3052:	80 81       	ld	r24, Z
    3054:	6c 91       	ld	r22, X
    3056:	41 e0       	ldi	r20, 0x01	; 1
    3058:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(Copy_u8MotorPortId,Local_u8ThirdPinID, DIO_HIGH);
    305c:	fe 01       	movw	r30, r28
    305e:	e8 58       	subi	r30, 0x88	; 136
    3060:	ff 4f       	sbci	r31, 0xFF	; 255
    3062:	de 01       	movw	r26, r28
    3064:	ae 58       	subi	r26, 0x8E	; 142
    3066:	bf 4f       	sbci	r27, 0xFF	; 255
    3068:	80 81       	ld	r24, Z
    306a:	6c 91       	ld	r22, X
    306c:	41 e0       	ldi	r20, 0x01	; 1
    306e:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(Copy_u8MotorPortId,Local_u8FourthPinID,DIO_HIGH);
    3072:	fe 01       	movw	r30, r28
    3074:	e8 58       	subi	r30, 0x88	; 136
    3076:	ff 4f       	sbci	r31, 0xFF	; 255
    3078:	de 01       	movw	r26, r28
    307a:	af 58       	subi	r26, 0x8F	; 143
    307c:	bf 4f       	sbci	r27, 0xFF	; 255
    307e:	80 81       	ld	r24, Z
    3080:	6c 91       	ld	r22, X
    3082:	41 e0       	ldi	r20, 0x01	; 1
    3084:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
    3088:	80 e0       	ldi	r24, 0x00	; 0
    308a:	90 e0       	ldi	r25, 0x00	; 0
    308c:	a0 e2       	ldi	r26, 0x20	; 32
    308e:	b1 e4       	ldi	r27, 0x41	; 65
    3090:	8b 87       	std	Y+11, r24	; 0x0b
    3092:	9c 87       	std	Y+12, r25	; 0x0c
    3094:	ad 87       	std	Y+13, r26	; 0x0d
    3096:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3098:	6b 85       	ldd	r22, Y+11	; 0x0b
    309a:	7c 85       	ldd	r23, Y+12	; 0x0c
    309c:	8d 85       	ldd	r24, Y+13	; 0x0d
    309e:	9e 85       	ldd	r25, Y+14	; 0x0e
    30a0:	20 e0       	ldi	r18, 0x00	; 0
    30a2:	30 e0       	ldi	r19, 0x00	; 0
    30a4:	4a ef       	ldi	r20, 0xFA	; 250
    30a6:	54 e4       	ldi	r21, 0x44	; 68
    30a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ac:	dc 01       	movw	r26, r24
    30ae:	cb 01       	movw	r24, r22
    30b0:	8f 83       	std	Y+7, r24	; 0x07
    30b2:	98 87       	std	Y+8, r25	; 0x08
    30b4:	a9 87       	std	Y+9, r26	; 0x09
    30b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30b8:	6f 81       	ldd	r22, Y+7	; 0x07
    30ba:	78 85       	ldd	r23, Y+8	; 0x08
    30bc:	89 85       	ldd	r24, Y+9	; 0x09
    30be:	9a 85       	ldd	r25, Y+10	; 0x0a
    30c0:	20 e0       	ldi	r18, 0x00	; 0
    30c2:	30 e0       	ldi	r19, 0x00	; 0
    30c4:	40 e8       	ldi	r20, 0x80	; 128
    30c6:	5f e3       	ldi	r21, 0x3F	; 63
    30c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30cc:	88 23       	and	r24, r24
    30ce:	2c f4       	brge	.+10     	; 0x30da <HSTEPPER_voidRotate+0xce6>
		__ticks = 1;
    30d0:	81 e0       	ldi	r24, 0x01	; 1
    30d2:	90 e0       	ldi	r25, 0x00	; 0
    30d4:	9e 83       	std	Y+6, r25	; 0x06
    30d6:	8d 83       	std	Y+5, r24	; 0x05
    30d8:	3f c0       	rjmp	.+126    	; 0x3158 <HSTEPPER_voidRotate+0xd64>
	else if (__tmp > 65535)
    30da:	6f 81       	ldd	r22, Y+7	; 0x07
    30dc:	78 85       	ldd	r23, Y+8	; 0x08
    30de:	89 85       	ldd	r24, Y+9	; 0x09
    30e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    30e2:	20 e0       	ldi	r18, 0x00	; 0
    30e4:	3f ef       	ldi	r19, 0xFF	; 255
    30e6:	4f e7       	ldi	r20, 0x7F	; 127
    30e8:	57 e4       	ldi	r21, 0x47	; 71
    30ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30ee:	18 16       	cp	r1, r24
    30f0:	4c f5       	brge	.+82     	; 0x3144 <HSTEPPER_voidRotate+0xd50>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    30f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    30f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    30f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    30fa:	20 e0       	ldi	r18, 0x00	; 0
    30fc:	30 e0       	ldi	r19, 0x00	; 0
    30fe:	40 e2       	ldi	r20, 0x20	; 32
    3100:	51 e4       	ldi	r21, 0x41	; 65
    3102:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3106:	dc 01       	movw	r26, r24
    3108:	cb 01       	movw	r24, r22
    310a:	bc 01       	movw	r22, r24
    310c:	cd 01       	movw	r24, r26
    310e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3112:	dc 01       	movw	r26, r24
    3114:	cb 01       	movw	r24, r22
    3116:	9e 83       	std	Y+6, r25	; 0x06
    3118:	8d 83       	std	Y+5, r24	; 0x05
    311a:	0f c0       	rjmp	.+30     	; 0x313a <HSTEPPER_voidRotate+0xd46>
    311c:	88 ec       	ldi	r24, 0xC8	; 200
    311e:	90 e0       	ldi	r25, 0x00	; 0
    3120:	9c 83       	std	Y+4, r25	; 0x04
    3122:	8b 83       	std	Y+3, r24	; 0x03
    3124:	8b 81       	ldd	r24, Y+3	; 0x03
    3126:	9c 81       	ldd	r25, Y+4	; 0x04
    3128:	01 97       	sbiw	r24, 0x01	; 1
    312a:	f1 f7       	brne	.-4      	; 0x3128 <HSTEPPER_voidRotate+0xd34>
    312c:	9c 83       	std	Y+4, r25	; 0x04
    312e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3130:	8d 81       	ldd	r24, Y+5	; 0x05
    3132:	9e 81       	ldd	r25, Y+6	; 0x06
    3134:	01 97       	sbiw	r24, 0x01	; 1
    3136:	9e 83       	std	Y+6, r25	; 0x06
    3138:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    313a:	8d 81       	ldd	r24, Y+5	; 0x05
    313c:	9e 81       	ldd	r25, Y+6	; 0x06
    313e:	00 97       	sbiw	r24, 0x00	; 0
    3140:	69 f7       	brne	.-38     	; 0x311c <HSTEPPER_voidRotate+0xd28>
    3142:	14 c0       	rjmp	.+40     	; 0x316c <HSTEPPER_voidRotate+0xd78>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3144:	6f 81       	ldd	r22, Y+7	; 0x07
    3146:	78 85       	ldd	r23, Y+8	; 0x08
    3148:	89 85       	ldd	r24, Y+9	; 0x09
    314a:	9a 85       	ldd	r25, Y+10	; 0x0a
    314c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3150:	dc 01       	movw	r26, r24
    3152:	cb 01       	movw	r24, r22
    3154:	9e 83       	std	Y+6, r25	; 0x06
    3156:	8d 83       	std	Y+5, r24	; 0x05
    3158:	8d 81       	ldd	r24, Y+5	; 0x05
    315a:	9e 81       	ldd	r25, Y+6	; 0x06
    315c:	9a 83       	std	Y+2, r25	; 0x02
    315e:	89 83       	std	Y+1, r24	; 0x01
    3160:	89 81       	ldd	r24, Y+1	; 0x01
    3162:	9a 81       	ldd	r25, Y+2	; 0x02
    3164:	01 97       	sbiw	r24, 0x01	; 1
    3166:	f1 f7       	brne	.-4      	; 0x3164 <HSTEPPER_voidRotate+0xd70>
    3168:	9a 83       	std	Y+2, r25	; 0x02
    316a:	89 83       	std	Y+1, r24	; 0x01
			MDIO_voidSetPinValue(Copy_u8MotorPortId,Local_u8FourthPinID,DIO_LOW);
			_delay_ms(10);
		}
		break;
		case COUNTERCLOCKWISE:
		for(Local_u16Counter = 0; Local_u16Counter < Local_U16Revolution; Local_u16Counter++)
    316c:	de 01       	movw	r26, r28
    316e:	aa 58       	subi	r26, 0x8A	; 138
    3170:	bf 4f       	sbci	r27, 0xFF	; 255
    3172:	fe 01       	movw	r30, r28
    3174:	ea 58       	subi	r30, 0x8A	; 138
    3176:	ff 4f       	sbci	r31, 0xFF	; 255
    3178:	80 81       	ld	r24, Z
    317a:	91 81       	ldd	r25, Z+1	; 0x01
    317c:	01 96       	adiw	r24, 0x01	; 1
    317e:	8d 93       	st	X+, r24
    3180:	9c 93       	st	X, r25
    3182:	fe 01       	movw	r30, r28
    3184:	ea 58       	subi	r30, 0x8A	; 138
    3186:	ff 4f       	sbci	r31, 0xFF	; 255
    3188:	de 01       	movw	r26, r28
    318a:	ac 58       	subi	r26, 0x8C	; 140
    318c:	bf 4f       	sbci	r27, 0xFF	; 255
    318e:	20 81       	ld	r18, Z
    3190:	31 81       	ldd	r19, Z+1	; 0x01
    3192:	8d 91       	ld	r24, X+
    3194:	9c 91       	ld	r25, X
    3196:	11 97       	sbiw	r26, 0x01	; 1
    3198:	28 17       	cp	r18, r24
    319a:	39 07       	cpc	r19, r25
    319c:	08 f4       	brcc	.+2      	; 0x31a0 <HSTEPPER_voidRotate+0xdac>
    319e:	6e cd       	rjmp	.-1316   	; 0x2c7c <HSTEPPER_voidRotate+0x888>
		break;
		default :
		
		break;	
	}	
}
    31a0:	c2 58       	subi	r28, 0x82	; 130
    31a2:	df 4f       	sbci	r29, 0xFF	; 255
    31a4:	0f b6       	in	r0, 0x3f	; 63
    31a6:	f8 94       	cli
    31a8:	de bf       	out	0x3e, r29	; 62
    31aa:	0f be       	out	0x3f, r0	; 63
    31ac:	cd bf       	out	0x3d, r28	; 61
    31ae:	cf 91       	pop	r28
    31b0:	df 91       	pop	r29
    31b2:	1f 91       	pop	r17
    31b4:	0f 91       	pop	r16
    31b6:	08 95       	ret

000031b8 <HSSD_voidDisplayNumber>:
 * Arguments   : PORT 																						  *
 * 				 Number Display															 					  *
 * return      : void																					      *
 *============================================================================================================*/
void HSSD_voidDisplayNumber (u8 Copy_u8SSDPortId, u8 Copy_u8Number)
{
    31b8:	df 93       	push	r29
    31ba:	cf 93       	push	r28
    31bc:	00 d0       	rcall	.+0      	; 0x31be <HSSD_voidDisplayNumber+0x6>
    31be:	00 d0       	rcall	.+0      	; 0x31c0 <HSSD_voidDisplayNumber+0x8>
    31c0:	cd b7       	in	r28, 0x3d	; 61
    31c2:	de b7       	in	r29, 0x3e	; 62
    31c4:	89 83       	std	Y+1, r24	; 0x01
    31c6:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidSetPortDirection( Copy_u8SSDPortId, 0xFF);
    31c8:	89 81       	ldd	r24, Y+1	; 0x01
    31ca:	6f ef       	ldi	r22, 0xFF	; 255
    31cc:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <MDIO_voidSetPortDirection>

	switch(Copy_u8Number)
    31d0:	8a 81       	ldd	r24, Y+2	; 0x02
    31d2:	28 2f       	mov	r18, r24
    31d4:	30 e0       	ldi	r19, 0x00	; 0
    31d6:	3c 83       	std	Y+4, r19	; 0x04
    31d8:	2b 83       	std	Y+3, r18	; 0x03
    31da:	8b 81       	ldd	r24, Y+3	; 0x03
    31dc:	9c 81       	ldd	r25, Y+4	; 0x04
    31de:	84 30       	cpi	r24, 0x04	; 4
    31e0:	91 05       	cpc	r25, r1
    31e2:	09 f4       	brne	.+2      	; 0x31e6 <HSSD_voidDisplayNumber+0x2e>
    31e4:	55 c0       	rjmp	.+170    	; 0x3290 <HSSD_voidDisplayNumber+0xd8>
    31e6:	2b 81       	ldd	r18, Y+3	; 0x03
    31e8:	3c 81       	ldd	r19, Y+4	; 0x04
    31ea:	25 30       	cpi	r18, 0x05	; 5
    31ec:	31 05       	cpc	r19, r1
    31ee:	dc f4       	brge	.+54     	; 0x3226 <HSSD_voidDisplayNumber+0x6e>
    31f0:	8b 81       	ldd	r24, Y+3	; 0x03
    31f2:	9c 81       	ldd	r25, Y+4	; 0x04
    31f4:	81 30       	cpi	r24, 0x01	; 1
    31f6:	91 05       	cpc	r25, r1
    31f8:	09 f4       	brne	.+2      	; 0x31fc <HSSD_voidDisplayNumber+0x44>
    31fa:	3b c0       	rjmp	.+118    	; 0x3272 <HSSD_voidDisplayNumber+0xba>
    31fc:	2b 81       	ldd	r18, Y+3	; 0x03
    31fe:	3c 81       	ldd	r19, Y+4	; 0x04
    3200:	22 30       	cpi	r18, 0x02	; 2
    3202:	31 05       	cpc	r19, r1
    3204:	2c f4       	brge	.+10     	; 0x3210 <HSSD_voidDisplayNumber+0x58>
    3206:	8b 81       	ldd	r24, Y+3	; 0x03
    3208:	9c 81       	ldd	r25, Y+4	; 0x04
    320a:	00 97       	sbiw	r24, 0x00	; 0
    320c:	69 f1       	breq	.+90     	; 0x3268 <HSSD_voidDisplayNumber+0xb0>
    320e:	5d c0       	rjmp	.+186    	; 0x32ca <HSSD_voidDisplayNumber+0x112>
    3210:	2b 81       	ldd	r18, Y+3	; 0x03
    3212:	3c 81       	ldd	r19, Y+4	; 0x04
    3214:	22 30       	cpi	r18, 0x02	; 2
    3216:	31 05       	cpc	r19, r1
    3218:	89 f1       	breq	.+98     	; 0x327c <HSSD_voidDisplayNumber+0xc4>
    321a:	8b 81       	ldd	r24, Y+3	; 0x03
    321c:	9c 81       	ldd	r25, Y+4	; 0x04
    321e:	83 30       	cpi	r24, 0x03	; 3
    3220:	91 05       	cpc	r25, r1
    3222:	89 f1       	breq	.+98     	; 0x3286 <HSSD_voidDisplayNumber+0xce>
    3224:	52 c0       	rjmp	.+164    	; 0x32ca <HSSD_voidDisplayNumber+0x112>
    3226:	2b 81       	ldd	r18, Y+3	; 0x03
    3228:	3c 81       	ldd	r19, Y+4	; 0x04
    322a:	27 30       	cpi	r18, 0x07	; 7
    322c:	31 05       	cpc	r19, r1
    322e:	09 f4       	brne	.+2      	; 0x3232 <HSSD_voidDisplayNumber+0x7a>
    3230:	3e c0       	rjmp	.+124    	; 0x32ae <HSSD_voidDisplayNumber+0xf6>
    3232:	8b 81       	ldd	r24, Y+3	; 0x03
    3234:	9c 81       	ldd	r25, Y+4	; 0x04
    3236:	88 30       	cpi	r24, 0x08	; 8
    3238:	91 05       	cpc	r25, r1
    323a:	5c f4       	brge	.+22     	; 0x3252 <HSSD_voidDisplayNumber+0x9a>
    323c:	2b 81       	ldd	r18, Y+3	; 0x03
    323e:	3c 81       	ldd	r19, Y+4	; 0x04
    3240:	25 30       	cpi	r18, 0x05	; 5
    3242:	31 05       	cpc	r19, r1
    3244:	51 f1       	breq	.+84     	; 0x329a <HSSD_voidDisplayNumber+0xe2>
    3246:	8b 81       	ldd	r24, Y+3	; 0x03
    3248:	9c 81       	ldd	r25, Y+4	; 0x04
    324a:	86 30       	cpi	r24, 0x06	; 6
    324c:	91 05       	cpc	r25, r1
    324e:	51 f1       	breq	.+84     	; 0x32a4 <HSSD_voidDisplayNumber+0xec>
    3250:	3c c0       	rjmp	.+120    	; 0x32ca <HSSD_voidDisplayNumber+0x112>
    3252:	2b 81       	ldd	r18, Y+3	; 0x03
    3254:	3c 81       	ldd	r19, Y+4	; 0x04
    3256:	28 30       	cpi	r18, 0x08	; 8
    3258:	31 05       	cpc	r19, r1
    325a:	71 f1       	breq	.+92     	; 0x32b8 <HSSD_voidDisplayNumber+0x100>
    325c:	8b 81       	ldd	r24, Y+3	; 0x03
    325e:	9c 81       	ldd	r25, Y+4	; 0x04
    3260:	89 30       	cpi	r24, 0x09	; 9
    3262:	91 05       	cpc	r25, r1
    3264:	71 f1       	breq	.+92     	; 0x32c2 <HSSD_voidDisplayNumber+0x10a>
    3266:	31 c0       	rjmp	.+98     	; 0x32ca <HSSD_voidDisplayNumber+0x112>
	{
	case 0:
		MDIO_voidSetPortValue(Copy_u8SSDPortId,0b00111111);
    3268:	89 81       	ldd	r24, Y+1	; 0x01
    326a:	6f e3       	ldi	r22, 0x3F	; 63
    326c:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <MDIO_voidSetPortValue>
    3270:	2c c0       	rjmp	.+88     	; 0x32ca <HSSD_voidDisplayNumber+0x112>
		break;
	case 1:
		MDIO_voidSetPortValue(Copy_u8SSDPortId,0b00000110);
    3272:	89 81       	ldd	r24, Y+1	; 0x01
    3274:	66 e0       	ldi	r22, 0x06	; 6
    3276:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <MDIO_voidSetPortValue>
    327a:	27 c0       	rjmp	.+78     	; 0x32ca <HSSD_voidDisplayNumber+0x112>
		break;
	case 2:
		MDIO_voidSetPortValue(Copy_u8SSDPortId,0b01011011);
    327c:	89 81       	ldd	r24, Y+1	; 0x01
    327e:	6b e5       	ldi	r22, 0x5B	; 91
    3280:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <MDIO_voidSetPortValue>
    3284:	22 c0       	rjmp	.+68     	; 0x32ca <HSSD_voidDisplayNumber+0x112>
		break;
	case 3:
		MDIO_voidSetPortValue(Copy_u8SSDPortId,0b01001111);
    3286:	89 81       	ldd	r24, Y+1	; 0x01
    3288:	6f e4       	ldi	r22, 0x4F	; 79
    328a:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <MDIO_voidSetPortValue>
    328e:	1d c0       	rjmp	.+58     	; 0x32ca <HSSD_voidDisplayNumber+0x112>
		break;
	case 4:
		MDIO_voidSetPortValue(Copy_u8SSDPortId,0b01100110);
    3290:	89 81       	ldd	r24, Y+1	; 0x01
    3292:	66 e6       	ldi	r22, 0x66	; 102
    3294:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <MDIO_voidSetPortValue>
    3298:	18 c0       	rjmp	.+48     	; 0x32ca <HSSD_voidDisplayNumber+0x112>
		break;
	case 5:
		MDIO_voidSetPortValue(Copy_u8SSDPortId,0b01101101);
    329a:	89 81       	ldd	r24, Y+1	; 0x01
    329c:	6d e6       	ldi	r22, 0x6D	; 109
    329e:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <MDIO_voidSetPortValue>
    32a2:	13 c0       	rjmp	.+38     	; 0x32ca <HSSD_voidDisplayNumber+0x112>
		break;
	case 6:
		MDIO_voidSetPortValue(Copy_u8SSDPortId,0b01111101);
    32a4:	89 81       	ldd	r24, Y+1	; 0x01
    32a6:	6d e7       	ldi	r22, 0x7D	; 125
    32a8:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <MDIO_voidSetPortValue>
    32ac:	0e c0       	rjmp	.+28     	; 0x32ca <HSSD_voidDisplayNumber+0x112>
		break;
	case 7:
		MDIO_voidSetPortValue(Copy_u8SSDPortId,0b00000111);
    32ae:	89 81       	ldd	r24, Y+1	; 0x01
    32b0:	67 e0       	ldi	r22, 0x07	; 7
    32b2:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <MDIO_voidSetPortValue>
    32b6:	09 c0       	rjmp	.+18     	; 0x32ca <HSSD_voidDisplayNumber+0x112>
		break;
	case 8:
		MDIO_voidSetPortValue(Copy_u8SSDPortId,0b01111111);
    32b8:	89 81       	ldd	r24, Y+1	; 0x01
    32ba:	6f e7       	ldi	r22, 0x7F	; 127
    32bc:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <MDIO_voidSetPortValue>
    32c0:	04 c0       	rjmp	.+8      	; 0x32ca <HSSD_voidDisplayNumber+0x112>
		break;
	case 9:
		MDIO_voidSetPortValue(Copy_u8SSDPortId,0b01101111);
    32c2:	89 81       	ldd	r24, Y+1	; 0x01
    32c4:	6f e6       	ldi	r22, 0x6F	; 111
    32c6:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <MDIO_voidSetPortValue>
		break;
	default:

		break;
	}
}
    32ca:	0f 90       	pop	r0
    32cc:	0f 90       	pop	r0
    32ce:	0f 90       	pop	r0
    32d0:	0f 90       	pop	r0
    32d2:	cf 91       	pop	r28
    32d4:	df 91       	pop	r29
    32d6:	08 95       	ret

000032d8 <HTEMP_voidInit>:
 * Description : Set initialization of TEMP Sensor								*
 * Arguments   : void			 												*
 * return      : void															*
 *==============================================================================*/
void HTEMP_voidInit(void)
{
    32d8:	df 93       	push	r29
    32da:	cf 93       	push	r28
    32dc:	cd b7       	in	r28, 0x3d	; 61
    32de:	de b7       	in	r29, 0x3e	; 62
	MADC_voidInit();
    32e0:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <MADC_voidInit>
}
    32e4:	cf 91       	pop	r28
    32e6:	df 91       	pop	r29
    32e8:	08 95       	ret

000032ea <HTEMP_u8GetAnalogTempreatureDegree>:
 * Description : Read value of TEMP Sensor										*
 * Arguments   : Channel Number			 										*
 * return      : TEMP Value														*
 *==============================================================================*/
u8 HTEMP_u8GetAnalogTempreatureDegree (u8 Copy_u8ChannelNum)
{
    32ea:	df 93       	push	r29
    32ec:	cf 93       	push	r28
    32ee:	00 d0       	rcall	.+0      	; 0x32f0 <HTEMP_u8GetAnalogTempreatureDegree+0x6>
    32f0:	00 d0       	rcall	.+0      	; 0x32f2 <HTEMP_u8GetAnalogTempreatureDegree+0x8>
    32f2:	cd b7       	in	r28, 0x3d	; 61
    32f4:	de b7       	in	r29, 0x3e	; 62
    32f6:	8c 83       	std	Y+4, r24	; 0x04
	MADC_voidAdcStartConversion(Copy_u8ChannelNum);
    32f8:	8c 81       	ldd	r24, Y+4	; 0x04
    32fa:	0e 94 49 10 	call	0x2092	; 0x2092 <MADC_voidAdcStartConversion>
	u16 Local_u16Adc_value = MADC_u16GetDigitalValue();
    32fe:	0e 94 33 10 	call	0x2066	; 0x2066 <MADC_u16GetDigitalValue>
    3302:	9b 83       	std	Y+3, r25	; 0x03
    3304:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Lm35_value = (((Local_u16Adc_value*500UL)/1023));
    3306:	8a 81       	ldd	r24, Y+2	; 0x02
    3308:	9b 81       	ldd	r25, Y+3	; 0x03
    330a:	cc 01       	movw	r24, r24
    330c:	a0 e0       	ldi	r26, 0x00	; 0
    330e:	b0 e0       	ldi	r27, 0x00	; 0
    3310:	24 ef       	ldi	r18, 0xF4	; 244
    3312:	31 e0       	ldi	r19, 0x01	; 1
    3314:	40 e0       	ldi	r20, 0x00	; 0
    3316:	50 e0       	ldi	r21, 0x00	; 0
    3318:	bc 01       	movw	r22, r24
    331a:	cd 01       	movw	r24, r26
    331c:	0e 94 15 21 	call	0x422a	; 0x422a <__mulsi3>
    3320:	dc 01       	movw	r26, r24
    3322:	cb 01       	movw	r24, r22
    3324:	2f ef       	ldi	r18, 0xFF	; 255
    3326:	33 e0       	ldi	r19, 0x03	; 3
    3328:	40 e0       	ldi	r20, 0x00	; 0
    332a:	50 e0       	ldi	r21, 0x00	; 0
    332c:	bc 01       	movw	r22, r24
    332e:	cd 01       	movw	r24, r26
    3330:	0e 94 34 21 	call	0x4268	; 0x4268 <__udivmodsi4>
    3334:	da 01       	movw	r26, r20
    3336:	c9 01       	movw	r24, r18
    3338:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8Lm35_value;
    333a:	89 81       	ldd	r24, Y+1	; 0x01
}
    333c:	0f 90       	pop	r0
    333e:	0f 90       	pop	r0
    3340:	0f 90       	pop	r0
    3342:	0f 90       	pop	r0
    3344:	cf 91       	pop	r28
    3346:	df 91       	pop	r29
    3348:	08 95       	ret

0000334a <HLED_voidTurnOn>:
 * Arguments   : PORT 																						  *
 * 				 PIN															 							  *
 * return      : void																					      *
 *============================================================================================================*/
void HLED_voidTurnOn (u8 Copy_u8LedPortId, u8 Copy_u8LedPinId)
{
    334a:	df 93       	push	r29
    334c:	cf 93       	push	r28
    334e:	00 d0       	rcall	.+0      	; 0x3350 <HLED_voidTurnOn+0x6>
    3350:	cd b7       	in	r28, 0x3d	; 61
    3352:	de b7       	in	r29, 0x3e	; 62
    3354:	89 83       	std	Y+1, r24	; 0x01
    3356:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidSetPinDirection ( Copy_u8LedPortId, Copy_u8LedPinId ,DIO_OUTPUT);
    3358:	89 81       	ldd	r24, Y+1	; 0x01
    335a:	6a 81       	ldd	r22, Y+2	; 0x02
    335c:	41 e0       	ldi	r20, 0x01	; 1
    335e:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <MDIO_voidSetPinDirection>
	MDIO_voidSetPinValue     (Copy_u8LedPortId, Copy_u8LedPinId , DIO_HIGH);
    3362:	89 81       	ldd	r24, Y+1	; 0x01
    3364:	6a 81       	ldd	r22, Y+2	; 0x02
    3366:	41 e0       	ldi	r20, 0x01	; 1
    3368:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
}
    336c:	0f 90       	pop	r0
    336e:	0f 90       	pop	r0
    3370:	cf 91       	pop	r28
    3372:	df 91       	pop	r29
    3374:	08 95       	ret

00003376 <HLED_voidTurnOff>:
 * Arguments   : PORT 																						  *
 * 				 PIN															 							  *
 * return      : void																					      *
 *============================================================================================================*/
void HLED_voidTurnOff (u8 Copy_u8LedPortId, u8 Copy_u8LedPinId)
{
    3376:	df 93       	push	r29
    3378:	cf 93       	push	r28
    337a:	00 d0       	rcall	.+0      	; 0x337c <HLED_voidTurnOff+0x6>
    337c:	cd b7       	in	r28, 0x3d	; 61
    337e:	de b7       	in	r29, 0x3e	; 62
    3380:	89 83       	std	Y+1, r24	; 0x01
    3382:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidSetPinDirection ( Copy_u8LedPortId, Copy_u8LedPinId ,DIO_OUTPUT);
    3384:	89 81       	ldd	r24, Y+1	; 0x01
    3386:	6a 81       	ldd	r22, Y+2	; 0x02
    3388:	41 e0       	ldi	r20, 0x01	; 1
    338a:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <MDIO_voidSetPinDirection>
	MDIO_voidSetPinValue     (Copy_u8LedPortId, Copy_u8LedPinId , DIO_LOW);
    338e:	89 81       	ldd	r24, Y+1	; 0x01
    3390:	6a 81       	ldd	r22, Y+2	; 0x02
    3392:	40 e0       	ldi	r20, 0x00	; 0
    3394:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
}
    3398:	0f 90       	pop	r0
    339a:	0f 90       	pop	r0
    339c:	cf 91       	pop	r28
    339e:	df 91       	pop	r29
    33a0:	08 95       	ret

000033a2 <HLDR_voidInit>:
 * Description : Set initialization of LDR Sensor								*
 * Arguments   : void			 												*
 * return      : void															*
 *==============================================================================*/
void HLDR_voidInit(void)
{
    33a2:	df 93       	push	r29
    33a4:	cf 93       	push	r28
    33a6:	cd b7       	in	r28, 0x3d	; 61
    33a8:	de b7       	in	r29, 0x3e	; 62
	MADC_voidInit();
    33aa:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <MADC_voidInit>
}
    33ae:	cf 91       	pop	r28
    33b0:	df 91       	pop	r29
    33b2:	08 95       	ret

000033b4 <HTEMP_u16GetAnalogLDRValue>:
 * Description : Read value of LDR Sensor										*
 * Arguments   : Channel Number			 										*
 * return      : LDR Value														*
 *==============================================================================*/
u16 HTEMP_u16GetAnalogLDRValue (u8 Copy_u8ChannelNum)
{
    33b4:	df 93       	push	r29
    33b6:	cf 93       	push	r28
    33b8:	00 d0       	rcall	.+0      	; 0x33ba <HTEMP_u16GetAnalogLDRValue+0x6>
    33ba:	00 d0       	rcall	.+0      	; 0x33bc <HTEMP_u16GetAnalogLDRValue+0x8>
    33bc:	0f 92       	push	r0
    33be:	cd b7       	in	r28, 0x3d	; 61
    33c0:	de b7       	in	r29, 0x3e	; 62
    33c2:	8d 83       	std	Y+5, r24	; 0x05
	MADC_voidAdcStartConversion(Copy_u8ChannelNum);
    33c4:	8d 81       	ldd	r24, Y+5	; 0x05
    33c6:	0e 94 49 10 	call	0x2092	; 0x2092 <MADC_voidAdcStartConversion>
	u16 Local_u16Adc_value = MADC_u16GetDigitalValue();
    33ca:	0e 94 33 10 	call	0x2066	; 0x2066 <MADC_u16GetDigitalValue>
    33ce:	9c 83       	std	Y+4, r25	; 0x04
    33d0:	8b 83       	std	Y+3, r24	; 0x03
	u16 Local_u16LDR_value = (((Local_u16Adc_value*100UL)/1023));
    33d2:	8b 81       	ldd	r24, Y+3	; 0x03
    33d4:	9c 81       	ldd	r25, Y+4	; 0x04
    33d6:	cc 01       	movw	r24, r24
    33d8:	a0 e0       	ldi	r26, 0x00	; 0
    33da:	b0 e0       	ldi	r27, 0x00	; 0
    33dc:	24 e6       	ldi	r18, 0x64	; 100
    33de:	30 e0       	ldi	r19, 0x00	; 0
    33e0:	40 e0       	ldi	r20, 0x00	; 0
    33e2:	50 e0       	ldi	r21, 0x00	; 0
    33e4:	bc 01       	movw	r22, r24
    33e6:	cd 01       	movw	r24, r26
    33e8:	0e 94 15 21 	call	0x422a	; 0x422a <__mulsi3>
    33ec:	dc 01       	movw	r26, r24
    33ee:	cb 01       	movw	r24, r22
    33f0:	2f ef       	ldi	r18, 0xFF	; 255
    33f2:	33 e0       	ldi	r19, 0x03	; 3
    33f4:	40 e0       	ldi	r20, 0x00	; 0
    33f6:	50 e0       	ldi	r21, 0x00	; 0
    33f8:	bc 01       	movw	r22, r24
    33fa:	cd 01       	movw	r24, r26
    33fc:	0e 94 34 21 	call	0x4268	; 0x4268 <__udivmodsi4>
    3400:	da 01       	movw	r26, r20
    3402:	c9 01       	movw	r24, r18
    3404:	9a 83       	std	Y+2, r25	; 0x02
    3406:	89 83       	std	Y+1, r24	; 0x01
	return Local_u16LDR_value;
    3408:	89 81       	ldd	r24, Y+1	; 0x01
    340a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    340c:	0f 90       	pop	r0
    340e:	0f 90       	pop	r0
    3410:	0f 90       	pop	r0
    3412:	0f 90       	pop	r0
    3414:	0f 90       	pop	r0
    3416:	cf 91       	pop	r28
    3418:	df 91       	pop	r29
    341a:	08 95       	ret

0000341c <HLCD_voidInit>:
 * Description : Set initialization direction of LCD							*
 * Arguments   : void			 												*
 * return      : void															*
 *==============================================================================*/
void HLCD_voidInit(void)
{
    341c:	df 93       	push	r29
    341e:	cf 93       	push	r28
    3420:	cd b7       	in	r28, 0x3d	; 61
    3422:	de b7       	in	r29, 0x3e	; 62
    3424:	2e 97       	sbiw	r28, 0x0e	; 14
    3426:	0f b6       	in	r0, 0x3f	; 63
    3428:	f8 94       	cli
    342a:	de bf       	out	0x3e, r29	; 62
    342c:	0f be       	out	0x3f, r0	; 63
    342e:	cd bf       	out	0x3d, r28	; 61
	MDIO_voidSetPinDirection(LCD_DATA_PORT,LCD_EN_PIN,DIO_OUTPUT);
    3430:	80 e0       	ldi	r24, 0x00	; 0
    3432:	65 e0       	ldi	r22, 0x05	; 5
    3434:	41 e0       	ldi	r20, 0x01	; 1
    3436:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(LCD_DATA_PORT,LCD_RS_PIN,DIO_OUTPUT);
    343a:	80 e0       	ldi	r24, 0x00	; 0
    343c:	64 e0       	ldi	r22, 0x04	; 4
    343e:	41 e0       	ldi	r20, 0x01	; 1
    3440:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <MDIO_voidSetPinDirection>
	#if (LCD_MODE == _8_BIT_MODE)
	MDIO_voidSetPortDirection(LCD_DATA_PORT,0xFF);
	_delay_ms(100);
	HLCD_voidSendCommand(0x38);			/*select 8-bit Mode*/
	#elif (LCD_MODE == _4_BIT_MODE)
	MDIO_voidSetPinDirection(LCD_DATA_PORT,LCD_DATA_PIN_4,DIO_OUTPUT);
    3444:	80 e0       	ldi	r24, 0x00	; 0
    3446:	60 e0       	ldi	r22, 0x00	; 0
    3448:	41 e0       	ldi	r20, 0x01	; 1
    344a:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(LCD_DATA_PORT,LCD_DATA_PIN_5,DIO_OUTPUT);
    344e:	80 e0       	ldi	r24, 0x00	; 0
    3450:	61 e0       	ldi	r22, 0x01	; 1
    3452:	41 e0       	ldi	r20, 0x01	; 1
    3454:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(LCD_DATA_PORT,LCD_DATA_PIN_6,DIO_OUTPUT);
    3458:	80 e0       	ldi	r24, 0x00	; 0
    345a:	62 e0       	ldi	r22, 0x02	; 2
    345c:	41 e0       	ldi	r20, 0x01	; 1
    345e:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(LCD_DATA_PORT,LCD_DATA_PIN_7,DIO_OUTPUT);
    3462:	80 e0       	ldi	r24, 0x00	; 0
    3464:	63 e0       	ldi	r22, 0x03	; 3
    3466:	41 e0       	ldi	r20, 0x01	; 1
    3468:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <MDIO_voidSetPinDirection>
    346c:	80 e0       	ldi	r24, 0x00	; 0
    346e:	90 e0       	ldi	r25, 0x00	; 0
    3470:	a8 ec       	ldi	r26, 0xC8	; 200
    3472:	b2 e4       	ldi	r27, 0x42	; 66
    3474:	8b 87       	std	Y+11, r24	; 0x0b
    3476:	9c 87       	std	Y+12, r25	; 0x0c
    3478:	ad 87       	std	Y+13, r26	; 0x0d
    347a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    347c:	6b 85       	ldd	r22, Y+11	; 0x0b
    347e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3480:	8d 85       	ldd	r24, Y+13	; 0x0d
    3482:	9e 85       	ldd	r25, Y+14	; 0x0e
    3484:	20 e0       	ldi	r18, 0x00	; 0
    3486:	30 e0       	ldi	r19, 0x00	; 0
    3488:	4a ef       	ldi	r20, 0xFA	; 250
    348a:	54 e4       	ldi	r21, 0x44	; 68
    348c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3490:	dc 01       	movw	r26, r24
    3492:	cb 01       	movw	r24, r22
    3494:	8f 83       	std	Y+7, r24	; 0x07
    3496:	98 87       	std	Y+8, r25	; 0x08
    3498:	a9 87       	std	Y+9, r26	; 0x09
    349a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    349c:	6f 81       	ldd	r22, Y+7	; 0x07
    349e:	78 85       	ldd	r23, Y+8	; 0x08
    34a0:	89 85       	ldd	r24, Y+9	; 0x09
    34a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    34a4:	20 e0       	ldi	r18, 0x00	; 0
    34a6:	30 e0       	ldi	r19, 0x00	; 0
    34a8:	40 e8       	ldi	r20, 0x80	; 128
    34aa:	5f e3       	ldi	r21, 0x3F	; 63
    34ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34b0:	88 23       	and	r24, r24
    34b2:	2c f4       	brge	.+10     	; 0x34be <HLCD_voidInit+0xa2>
		__ticks = 1;
    34b4:	81 e0       	ldi	r24, 0x01	; 1
    34b6:	90 e0       	ldi	r25, 0x00	; 0
    34b8:	9e 83       	std	Y+6, r25	; 0x06
    34ba:	8d 83       	std	Y+5, r24	; 0x05
    34bc:	3f c0       	rjmp	.+126    	; 0x353c <HLCD_voidInit+0x120>
	else if (__tmp > 65535)
    34be:	6f 81       	ldd	r22, Y+7	; 0x07
    34c0:	78 85       	ldd	r23, Y+8	; 0x08
    34c2:	89 85       	ldd	r24, Y+9	; 0x09
    34c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    34c6:	20 e0       	ldi	r18, 0x00	; 0
    34c8:	3f ef       	ldi	r19, 0xFF	; 255
    34ca:	4f e7       	ldi	r20, 0x7F	; 127
    34cc:	57 e4       	ldi	r21, 0x47	; 71
    34ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34d2:	18 16       	cp	r1, r24
    34d4:	4c f5       	brge	.+82     	; 0x3528 <HLCD_voidInit+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    34d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    34da:	8d 85       	ldd	r24, Y+13	; 0x0d
    34dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    34de:	20 e0       	ldi	r18, 0x00	; 0
    34e0:	30 e0       	ldi	r19, 0x00	; 0
    34e2:	40 e2       	ldi	r20, 0x20	; 32
    34e4:	51 e4       	ldi	r21, 0x41	; 65
    34e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ea:	dc 01       	movw	r26, r24
    34ec:	cb 01       	movw	r24, r22
    34ee:	bc 01       	movw	r22, r24
    34f0:	cd 01       	movw	r24, r26
    34f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34f6:	dc 01       	movw	r26, r24
    34f8:	cb 01       	movw	r24, r22
    34fa:	9e 83       	std	Y+6, r25	; 0x06
    34fc:	8d 83       	std	Y+5, r24	; 0x05
    34fe:	0f c0       	rjmp	.+30     	; 0x351e <HLCD_voidInit+0x102>
    3500:	88 ec       	ldi	r24, 0xC8	; 200
    3502:	90 e0       	ldi	r25, 0x00	; 0
    3504:	9c 83       	std	Y+4, r25	; 0x04
    3506:	8b 83       	std	Y+3, r24	; 0x03
    3508:	8b 81       	ldd	r24, Y+3	; 0x03
    350a:	9c 81       	ldd	r25, Y+4	; 0x04
    350c:	01 97       	sbiw	r24, 0x01	; 1
    350e:	f1 f7       	brne	.-4      	; 0x350c <HLCD_voidInit+0xf0>
    3510:	9c 83       	std	Y+4, r25	; 0x04
    3512:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3514:	8d 81       	ldd	r24, Y+5	; 0x05
    3516:	9e 81       	ldd	r25, Y+6	; 0x06
    3518:	01 97       	sbiw	r24, 0x01	; 1
    351a:	9e 83       	std	Y+6, r25	; 0x06
    351c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    351e:	8d 81       	ldd	r24, Y+5	; 0x05
    3520:	9e 81       	ldd	r25, Y+6	; 0x06
    3522:	00 97       	sbiw	r24, 0x00	; 0
    3524:	69 f7       	brne	.-38     	; 0x3500 <HLCD_voidInit+0xe4>
    3526:	14 c0       	rjmp	.+40     	; 0x3550 <HLCD_voidInit+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3528:	6f 81       	ldd	r22, Y+7	; 0x07
    352a:	78 85       	ldd	r23, Y+8	; 0x08
    352c:	89 85       	ldd	r24, Y+9	; 0x09
    352e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3534:	dc 01       	movw	r26, r24
    3536:	cb 01       	movw	r24, r22
    3538:	9e 83       	std	Y+6, r25	; 0x06
    353a:	8d 83       	std	Y+5, r24	; 0x05
    353c:	8d 81       	ldd	r24, Y+5	; 0x05
    353e:	9e 81       	ldd	r25, Y+6	; 0x06
    3540:	9a 83       	std	Y+2, r25	; 0x02
    3542:	89 83       	std	Y+1, r24	; 0x01
    3544:	89 81       	ldd	r24, Y+1	; 0x01
    3546:	9a 81       	ldd	r25, Y+2	; 0x02
    3548:	01 97       	sbiw	r24, 0x01	; 1
    354a:	f1 f7       	brne	.-4      	; 0x3548 <HLCD_voidInit+0x12c>
    354c:	9a 83       	std	Y+2, r25	; 0x02
    354e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
	HLCD_voidSendCommand(0x33);		   /*select 4-bit Mode*/
    3550:	83 e3       	ldi	r24, 0x33	; 51
    3552:	0e 94 c6 1a 	call	0x358c	; 0x358c <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0x32);
    3556:	82 e3       	ldi	r24, 0x32	; 50
    3558:	0e 94 c6 1a 	call	0x358c	; 0x358c <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0x28);
    355c:	88 e2       	ldi	r24, 0x28	; 40
    355e:	0e 94 c6 1a 	call	0x358c	; 0x358c <HLCD_voidSendCommand>
	#endif
	
	HLCD_voidSendCommand(0x0C);		/*TURN LCD DISPLAY		  */	
    3562:	8c e0       	ldi	r24, 0x0C	; 12
    3564:	0e 94 c6 1a 	call	0x358c	; 0x358c <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0x02);		/*RETURN HOME			  */
    3568:	82 e0       	ldi	r24, 0x02	; 2
    356a:	0e 94 c6 1a 	call	0x358c	; 0x358c <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0x01);		/*CLEAR	LCD DISPLAY		  */
    356e:	81 e0       	ldi	r24, 0x01	; 1
    3570:	0e 94 c6 1a 	call	0x358c	; 0x358c <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0x06);		/*MOVE FROM LEFT TO RIGHT */
    3574:	86 e0       	ldi	r24, 0x06	; 6
    3576:	0e 94 c6 1a 	call	0x358c	; 0x358c <HLCD_voidSendCommand>
}
    357a:	2e 96       	adiw	r28, 0x0e	; 14
    357c:	0f b6       	in	r0, 0x3f	; 63
    357e:	f8 94       	cli
    3580:	de bf       	out	0x3e, r29	; 62
    3582:	0f be       	out	0x3f, r0	; 63
    3584:	cd bf       	out	0x3d, r28	; 61
    3586:	cf 91       	pop	r28
    3588:	df 91       	pop	r29
    358a:	08 95       	ret

0000358c <HLCD_voidSendCommand>:
 * Description : Send Command to LCD											*
 * Arguments   : Command : takes Command 										*
 * return      : void															*
 *==============================================================================*/
void HLCD_voidSendCommand(u8 Copy_u8Cmd)
{
    358c:	df 93       	push	r29
    358e:	cf 93       	push	r28
    3590:	cd b7       	in	r28, 0x3d	; 61
    3592:	de b7       	in	r29, 0x3e	; 62
    3594:	ab 97       	sbiw	r28, 0x2b	; 43
    3596:	0f b6       	in	r0, 0x3f	; 63
    3598:	f8 94       	cli
    359a:	de bf       	out	0x3e, r29	; 62
    359c:	0f be       	out	0x3f, r0	; 63
    359e:	cd bf       	out	0x3d, r28	; 61
    35a0:	8b a7       	std	Y+43, r24	; 0x2b
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_EN_PIN,DIO_LOW);
	_delay_ms(5);
	
	#elif (LCD_MODE == _4_BIT_MODE)
	//to select command register
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_RS_PIN,DIO_LOW);
    35a2:	80 e0       	ldi	r24, 0x00	; 0
    35a4:	64 e0       	ldi	r22, 0x04	; 4
    35a6:	40 e0       	ldi	r20, 0x00	; 0
    35a8:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PIN_4, GET_BIT(Copy_u8Cmd,4));
    35ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    35ae:	82 95       	swap	r24
    35b0:	8f 70       	andi	r24, 0x0F	; 15
    35b2:	98 2f       	mov	r25, r24
    35b4:	91 70       	andi	r25, 0x01	; 1
    35b6:	80 e0       	ldi	r24, 0x00	; 0
    35b8:	60 e0       	ldi	r22, 0x00	; 0
    35ba:	49 2f       	mov	r20, r25
    35bc:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PIN_5, GET_BIT(Copy_u8Cmd,5));
    35c0:	8b a5       	ldd	r24, Y+43	; 0x2b
    35c2:	82 95       	swap	r24
    35c4:	86 95       	lsr	r24
    35c6:	87 70       	andi	r24, 0x07	; 7
    35c8:	98 2f       	mov	r25, r24
    35ca:	91 70       	andi	r25, 0x01	; 1
    35cc:	80 e0       	ldi	r24, 0x00	; 0
    35ce:	61 e0       	ldi	r22, 0x01	; 1
    35d0:	49 2f       	mov	r20, r25
    35d2:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PIN_6, GET_BIT(Copy_u8Cmd,6));
    35d6:	8b a5       	ldd	r24, Y+43	; 0x2b
    35d8:	82 95       	swap	r24
    35da:	86 95       	lsr	r24
    35dc:	86 95       	lsr	r24
    35de:	83 70       	andi	r24, 0x03	; 3
    35e0:	98 2f       	mov	r25, r24
    35e2:	91 70       	andi	r25, 0x01	; 1
    35e4:	80 e0       	ldi	r24, 0x00	; 0
    35e6:	62 e0       	ldi	r22, 0x02	; 2
    35e8:	49 2f       	mov	r20, r25
    35ea:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PIN_7, GET_BIT(Copy_u8Cmd,7));
    35ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    35f0:	98 2f       	mov	r25, r24
    35f2:	99 1f       	adc	r25, r25
    35f4:	99 27       	eor	r25, r25
    35f6:	99 1f       	adc	r25, r25
    35f8:	80 e0       	ldi	r24, 0x00	; 0
    35fa:	63 e0       	ldi	r22, 0x03	; 3
    35fc:	49 2f       	mov	r20, r25
    35fe:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>

	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_EN_PIN,DIO_HIGH); //EN
    3602:	80 e0       	ldi	r24, 0x00	; 0
    3604:	65 e0       	ldi	r22, 0x05	; 5
    3606:	41 e0       	ldi	r20, 0x01	; 1
    3608:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
    360c:	80 e0       	ldi	r24, 0x00	; 0
    360e:	90 e0       	ldi	r25, 0x00	; 0
    3610:	a0 e8       	ldi	r26, 0x80	; 128
    3612:	bf e3       	ldi	r27, 0x3F	; 63
    3614:	8f a3       	std	Y+39, r24	; 0x27
    3616:	98 a7       	std	Y+40, r25	; 0x28
    3618:	a9 a7       	std	Y+41, r26	; 0x29
    361a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    361c:	6f a1       	ldd	r22, Y+39	; 0x27
    361e:	78 a5       	ldd	r23, Y+40	; 0x28
    3620:	89 a5       	ldd	r24, Y+41	; 0x29
    3622:	9a a5       	ldd	r25, Y+42	; 0x2a
    3624:	20 e0       	ldi	r18, 0x00	; 0
    3626:	30 e0       	ldi	r19, 0x00	; 0
    3628:	4a ef       	ldi	r20, 0xFA	; 250
    362a:	54 e4       	ldi	r21, 0x44	; 68
    362c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3630:	dc 01       	movw	r26, r24
    3632:	cb 01       	movw	r24, r22
    3634:	8b a3       	std	Y+35, r24	; 0x23
    3636:	9c a3       	std	Y+36, r25	; 0x24
    3638:	ad a3       	std	Y+37, r26	; 0x25
    363a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    363c:	6b a1       	ldd	r22, Y+35	; 0x23
    363e:	7c a1       	ldd	r23, Y+36	; 0x24
    3640:	8d a1       	ldd	r24, Y+37	; 0x25
    3642:	9e a1       	ldd	r25, Y+38	; 0x26
    3644:	20 e0       	ldi	r18, 0x00	; 0
    3646:	30 e0       	ldi	r19, 0x00	; 0
    3648:	40 e8       	ldi	r20, 0x80	; 128
    364a:	5f e3       	ldi	r21, 0x3F	; 63
    364c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3650:	88 23       	and	r24, r24
    3652:	2c f4       	brge	.+10     	; 0x365e <HLCD_voidSendCommand+0xd2>
		__ticks = 1;
    3654:	81 e0       	ldi	r24, 0x01	; 1
    3656:	90 e0       	ldi	r25, 0x00	; 0
    3658:	9a a3       	std	Y+34, r25	; 0x22
    365a:	89 a3       	std	Y+33, r24	; 0x21
    365c:	3f c0       	rjmp	.+126    	; 0x36dc <HLCD_voidSendCommand+0x150>
	else if (__tmp > 65535)
    365e:	6b a1       	ldd	r22, Y+35	; 0x23
    3660:	7c a1       	ldd	r23, Y+36	; 0x24
    3662:	8d a1       	ldd	r24, Y+37	; 0x25
    3664:	9e a1       	ldd	r25, Y+38	; 0x26
    3666:	20 e0       	ldi	r18, 0x00	; 0
    3668:	3f ef       	ldi	r19, 0xFF	; 255
    366a:	4f e7       	ldi	r20, 0x7F	; 127
    366c:	57 e4       	ldi	r21, 0x47	; 71
    366e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3672:	18 16       	cp	r1, r24
    3674:	4c f5       	brge	.+82     	; 0x36c8 <HLCD_voidSendCommand+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3676:	6f a1       	ldd	r22, Y+39	; 0x27
    3678:	78 a5       	ldd	r23, Y+40	; 0x28
    367a:	89 a5       	ldd	r24, Y+41	; 0x29
    367c:	9a a5       	ldd	r25, Y+42	; 0x2a
    367e:	20 e0       	ldi	r18, 0x00	; 0
    3680:	30 e0       	ldi	r19, 0x00	; 0
    3682:	40 e2       	ldi	r20, 0x20	; 32
    3684:	51 e4       	ldi	r21, 0x41	; 65
    3686:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    368a:	dc 01       	movw	r26, r24
    368c:	cb 01       	movw	r24, r22
    368e:	bc 01       	movw	r22, r24
    3690:	cd 01       	movw	r24, r26
    3692:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3696:	dc 01       	movw	r26, r24
    3698:	cb 01       	movw	r24, r22
    369a:	9a a3       	std	Y+34, r25	; 0x22
    369c:	89 a3       	std	Y+33, r24	; 0x21
    369e:	0f c0       	rjmp	.+30     	; 0x36be <HLCD_voidSendCommand+0x132>
    36a0:	88 ec       	ldi	r24, 0xC8	; 200
    36a2:	90 e0       	ldi	r25, 0x00	; 0
    36a4:	98 a3       	std	Y+32, r25	; 0x20
    36a6:	8f 8f       	std	Y+31, r24	; 0x1f
    36a8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    36aa:	98 a1       	ldd	r25, Y+32	; 0x20
    36ac:	01 97       	sbiw	r24, 0x01	; 1
    36ae:	f1 f7       	brne	.-4      	; 0x36ac <HLCD_voidSendCommand+0x120>
    36b0:	98 a3       	std	Y+32, r25	; 0x20
    36b2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36b4:	89 a1       	ldd	r24, Y+33	; 0x21
    36b6:	9a a1       	ldd	r25, Y+34	; 0x22
    36b8:	01 97       	sbiw	r24, 0x01	; 1
    36ba:	9a a3       	std	Y+34, r25	; 0x22
    36bc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36be:	89 a1       	ldd	r24, Y+33	; 0x21
    36c0:	9a a1       	ldd	r25, Y+34	; 0x22
    36c2:	00 97       	sbiw	r24, 0x00	; 0
    36c4:	69 f7       	brne	.-38     	; 0x36a0 <HLCD_voidSendCommand+0x114>
    36c6:	14 c0       	rjmp	.+40     	; 0x36f0 <HLCD_voidSendCommand+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36c8:	6b a1       	ldd	r22, Y+35	; 0x23
    36ca:	7c a1       	ldd	r23, Y+36	; 0x24
    36cc:	8d a1       	ldd	r24, Y+37	; 0x25
    36ce:	9e a1       	ldd	r25, Y+38	; 0x26
    36d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36d4:	dc 01       	movw	r26, r24
    36d6:	cb 01       	movw	r24, r22
    36d8:	9a a3       	std	Y+34, r25	; 0x22
    36da:	89 a3       	std	Y+33, r24	; 0x21
    36dc:	89 a1       	ldd	r24, Y+33	; 0x21
    36de:	9a a1       	ldd	r25, Y+34	; 0x22
    36e0:	9e 8f       	std	Y+30, r25	; 0x1e
    36e2:	8d 8f       	std	Y+29, r24	; 0x1d
    36e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    36e6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    36e8:	01 97       	sbiw	r24, 0x01	; 1
    36ea:	f1 f7       	brne	.-4      	; 0x36e8 <HLCD_voidSendCommand+0x15c>
    36ec:	9e 8f       	std	Y+30, r25	; 0x1e
    36ee:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_EN_PIN,DIO_LOW);
    36f0:	80 e0       	ldi	r24, 0x00	; 0
    36f2:	65 e0       	ldi	r22, 0x05	; 5
    36f4:	40 e0       	ldi	r20, 0x00	; 0
    36f6:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
	
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PIN_4, GET_BIT(Copy_u8Cmd,0));
    36fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    36fc:	98 2f       	mov	r25, r24
    36fe:	91 70       	andi	r25, 0x01	; 1
    3700:	80 e0       	ldi	r24, 0x00	; 0
    3702:	60 e0       	ldi	r22, 0x00	; 0
    3704:	49 2f       	mov	r20, r25
    3706:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PIN_5, GET_BIT(Copy_u8Cmd,1));
    370a:	8b a5       	ldd	r24, Y+43	; 0x2b
    370c:	86 95       	lsr	r24
    370e:	98 2f       	mov	r25, r24
    3710:	91 70       	andi	r25, 0x01	; 1
    3712:	80 e0       	ldi	r24, 0x00	; 0
    3714:	61 e0       	ldi	r22, 0x01	; 1
    3716:	49 2f       	mov	r20, r25
    3718:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PIN_6, GET_BIT(Copy_u8Cmd,2));
    371c:	8b a5       	ldd	r24, Y+43	; 0x2b
    371e:	86 95       	lsr	r24
    3720:	86 95       	lsr	r24
    3722:	98 2f       	mov	r25, r24
    3724:	91 70       	andi	r25, 0x01	; 1
    3726:	80 e0       	ldi	r24, 0x00	; 0
    3728:	62 e0       	ldi	r22, 0x02	; 2
    372a:	49 2f       	mov	r20, r25
    372c:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PIN_7, GET_BIT(Copy_u8Cmd,3));
    3730:	8b a5       	ldd	r24, Y+43	; 0x2b
    3732:	86 95       	lsr	r24
    3734:	86 95       	lsr	r24
    3736:	86 95       	lsr	r24
    3738:	98 2f       	mov	r25, r24
    373a:	91 70       	andi	r25, 0x01	; 1
    373c:	80 e0       	ldi	r24, 0x00	; 0
    373e:	63 e0       	ldi	r22, 0x03	; 3
    3740:	49 2f       	mov	r20, r25
    3742:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
	
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_EN_PIN,DIO_HIGH); //EN
    3746:	80 e0       	ldi	r24, 0x00	; 0
    3748:	65 e0       	ldi	r22, 0x05	; 5
    374a:	41 e0       	ldi	r20, 0x01	; 1
    374c:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
    3750:	80 e0       	ldi	r24, 0x00	; 0
    3752:	90 e0       	ldi	r25, 0x00	; 0
    3754:	a0 e8       	ldi	r26, 0x80	; 128
    3756:	bf e3       	ldi	r27, 0x3F	; 63
    3758:	89 8f       	std	Y+25, r24	; 0x19
    375a:	9a 8f       	std	Y+26, r25	; 0x1a
    375c:	ab 8f       	std	Y+27, r26	; 0x1b
    375e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3760:	69 8d       	ldd	r22, Y+25	; 0x19
    3762:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3764:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3766:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3768:	20 e0       	ldi	r18, 0x00	; 0
    376a:	30 e0       	ldi	r19, 0x00	; 0
    376c:	4a ef       	ldi	r20, 0xFA	; 250
    376e:	54 e4       	ldi	r21, 0x44	; 68
    3770:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3774:	dc 01       	movw	r26, r24
    3776:	cb 01       	movw	r24, r22
    3778:	8d 8b       	std	Y+21, r24	; 0x15
    377a:	9e 8b       	std	Y+22, r25	; 0x16
    377c:	af 8b       	std	Y+23, r26	; 0x17
    377e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3780:	6d 89       	ldd	r22, Y+21	; 0x15
    3782:	7e 89       	ldd	r23, Y+22	; 0x16
    3784:	8f 89       	ldd	r24, Y+23	; 0x17
    3786:	98 8d       	ldd	r25, Y+24	; 0x18
    3788:	20 e0       	ldi	r18, 0x00	; 0
    378a:	30 e0       	ldi	r19, 0x00	; 0
    378c:	40 e8       	ldi	r20, 0x80	; 128
    378e:	5f e3       	ldi	r21, 0x3F	; 63
    3790:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3794:	88 23       	and	r24, r24
    3796:	2c f4       	brge	.+10     	; 0x37a2 <HLCD_voidSendCommand+0x216>
		__ticks = 1;
    3798:	81 e0       	ldi	r24, 0x01	; 1
    379a:	90 e0       	ldi	r25, 0x00	; 0
    379c:	9c 8b       	std	Y+20, r25	; 0x14
    379e:	8b 8b       	std	Y+19, r24	; 0x13
    37a0:	3f c0       	rjmp	.+126    	; 0x3820 <HLCD_voidSendCommand+0x294>
	else if (__tmp > 65535)
    37a2:	6d 89       	ldd	r22, Y+21	; 0x15
    37a4:	7e 89       	ldd	r23, Y+22	; 0x16
    37a6:	8f 89       	ldd	r24, Y+23	; 0x17
    37a8:	98 8d       	ldd	r25, Y+24	; 0x18
    37aa:	20 e0       	ldi	r18, 0x00	; 0
    37ac:	3f ef       	ldi	r19, 0xFF	; 255
    37ae:	4f e7       	ldi	r20, 0x7F	; 127
    37b0:	57 e4       	ldi	r21, 0x47	; 71
    37b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    37b6:	18 16       	cp	r1, r24
    37b8:	4c f5       	brge	.+82     	; 0x380c <HLCD_voidSendCommand+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37ba:	69 8d       	ldd	r22, Y+25	; 0x19
    37bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    37be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37c2:	20 e0       	ldi	r18, 0x00	; 0
    37c4:	30 e0       	ldi	r19, 0x00	; 0
    37c6:	40 e2       	ldi	r20, 0x20	; 32
    37c8:	51 e4       	ldi	r21, 0x41	; 65
    37ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ce:	dc 01       	movw	r26, r24
    37d0:	cb 01       	movw	r24, r22
    37d2:	bc 01       	movw	r22, r24
    37d4:	cd 01       	movw	r24, r26
    37d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37da:	dc 01       	movw	r26, r24
    37dc:	cb 01       	movw	r24, r22
    37de:	9c 8b       	std	Y+20, r25	; 0x14
    37e0:	8b 8b       	std	Y+19, r24	; 0x13
    37e2:	0f c0       	rjmp	.+30     	; 0x3802 <HLCD_voidSendCommand+0x276>
    37e4:	88 ec       	ldi	r24, 0xC8	; 200
    37e6:	90 e0       	ldi	r25, 0x00	; 0
    37e8:	9a 8b       	std	Y+18, r25	; 0x12
    37ea:	89 8b       	std	Y+17, r24	; 0x11
    37ec:	89 89       	ldd	r24, Y+17	; 0x11
    37ee:	9a 89       	ldd	r25, Y+18	; 0x12
    37f0:	01 97       	sbiw	r24, 0x01	; 1
    37f2:	f1 f7       	brne	.-4      	; 0x37f0 <HLCD_voidSendCommand+0x264>
    37f4:	9a 8b       	std	Y+18, r25	; 0x12
    37f6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37f8:	8b 89       	ldd	r24, Y+19	; 0x13
    37fa:	9c 89       	ldd	r25, Y+20	; 0x14
    37fc:	01 97       	sbiw	r24, 0x01	; 1
    37fe:	9c 8b       	std	Y+20, r25	; 0x14
    3800:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3802:	8b 89       	ldd	r24, Y+19	; 0x13
    3804:	9c 89       	ldd	r25, Y+20	; 0x14
    3806:	00 97       	sbiw	r24, 0x00	; 0
    3808:	69 f7       	brne	.-38     	; 0x37e4 <HLCD_voidSendCommand+0x258>
    380a:	14 c0       	rjmp	.+40     	; 0x3834 <HLCD_voidSendCommand+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    380c:	6d 89       	ldd	r22, Y+21	; 0x15
    380e:	7e 89       	ldd	r23, Y+22	; 0x16
    3810:	8f 89       	ldd	r24, Y+23	; 0x17
    3812:	98 8d       	ldd	r25, Y+24	; 0x18
    3814:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3818:	dc 01       	movw	r26, r24
    381a:	cb 01       	movw	r24, r22
    381c:	9c 8b       	std	Y+20, r25	; 0x14
    381e:	8b 8b       	std	Y+19, r24	; 0x13
    3820:	8b 89       	ldd	r24, Y+19	; 0x13
    3822:	9c 89       	ldd	r25, Y+20	; 0x14
    3824:	98 8b       	std	Y+16, r25	; 0x10
    3826:	8f 87       	std	Y+15, r24	; 0x0f
    3828:	8f 85       	ldd	r24, Y+15	; 0x0f
    382a:	98 89       	ldd	r25, Y+16	; 0x10
    382c:	01 97       	sbiw	r24, 0x01	; 1
    382e:	f1 f7       	brne	.-4      	; 0x382c <HLCD_voidSendCommand+0x2a0>
    3830:	98 8b       	std	Y+16, r25	; 0x10
    3832:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_EN_PIN,DIO_LOW);
    3834:	80 e0       	ldi	r24, 0x00	; 0
    3836:	65 e0       	ldi	r22, 0x05	; 5
    3838:	40 e0       	ldi	r20, 0x00	; 0
    383a:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
    383e:	80 e0       	ldi	r24, 0x00	; 0
    3840:	90 e0       	ldi	r25, 0x00	; 0
    3842:	a0 ea       	ldi	r26, 0xA0	; 160
    3844:	b0 e4       	ldi	r27, 0x40	; 64
    3846:	8b 87       	std	Y+11, r24	; 0x0b
    3848:	9c 87       	std	Y+12, r25	; 0x0c
    384a:	ad 87       	std	Y+13, r26	; 0x0d
    384c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    384e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3850:	7c 85       	ldd	r23, Y+12	; 0x0c
    3852:	8d 85       	ldd	r24, Y+13	; 0x0d
    3854:	9e 85       	ldd	r25, Y+14	; 0x0e
    3856:	20 e0       	ldi	r18, 0x00	; 0
    3858:	30 e0       	ldi	r19, 0x00	; 0
    385a:	4a ef       	ldi	r20, 0xFA	; 250
    385c:	54 e4       	ldi	r21, 0x44	; 68
    385e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3862:	dc 01       	movw	r26, r24
    3864:	cb 01       	movw	r24, r22
    3866:	8f 83       	std	Y+7, r24	; 0x07
    3868:	98 87       	std	Y+8, r25	; 0x08
    386a:	a9 87       	std	Y+9, r26	; 0x09
    386c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    386e:	6f 81       	ldd	r22, Y+7	; 0x07
    3870:	78 85       	ldd	r23, Y+8	; 0x08
    3872:	89 85       	ldd	r24, Y+9	; 0x09
    3874:	9a 85       	ldd	r25, Y+10	; 0x0a
    3876:	20 e0       	ldi	r18, 0x00	; 0
    3878:	30 e0       	ldi	r19, 0x00	; 0
    387a:	40 e8       	ldi	r20, 0x80	; 128
    387c:	5f e3       	ldi	r21, 0x3F	; 63
    387e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3882:	88 23       	and	r24, r24
    3884:	2c f4       	brge	.+10     	; 0x3890 <HLCD_voidSendCommand+0x304>
		__ticks = 1;
    3886:	81 e0       	ldi	r24, 0x01	; 1
    3888:	90 e0       	ldi	r25, 0x00	; 0
    388a:	9e 83       	std	Y+6, r25	; 0x06
    388c:	8d 83       	std	Y+5, r24	; 0x05
    388e:	3f c0       	rjmp	.+126    	; 0x390e <HLCD_voidSendCommand+0x382>
	else if (__tmp > 65535)
    3890:	6f 81       	ldd	r22, Y+7	; 0x07
    3892:	78 85       	ldd	r23, Y+8	; 0x08
    3894:	89 85       	ldd	r24, Y+9	; 0x09
    3896:	9a 85       	ldd	r25, Y+10	; 0x0a
    3898:	20 e0       	ldi	r18, 0x00	; 0
    389a:	3f ef       	ldi	r19, 0xFF	; 255
    389c:	4f e7       	ldi	r20, 0x7F	; 127
    389e:	57 e4       	ldi	r21, 0x47	; 71
    38a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38a4:	18 16       	cp	r1, r24
    38a6:	4c f5       	brge	.+82     	; 0x38fa <HLCD_voidSendCommand+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    38aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    38ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    38ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    38b0:	20 e0       	ldi	r18, 0x00	; 0
    38b2:	30 e0       	ldi	r19, 0x00	; 0
    38b4:	40 e2       	ldi	r20, 0x20	; 32
    38b6:	51 e4       	ldi	r21, 0x41	; 65
    38b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38bc:	dc 01       	movw	r26, r24
    38be:	cb 01       	movw	r24, r22
    38c0:	bc 01       	movw	r22, r24
    38c2:	cd 01       	movw	r24, r26
    38c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38c8:	dc 01       	movw	r26, r24
    38ca:	cb 01       	movw	r24, r22
    38cc:	9e 83       	std	Y+6, r25	; 0x06
    38ce:	8d 83       	std	Y+5, r24	; 0x05
    38d0:	0f c0       	rjmp	.+30     	; 0x38f0 <HLCD_voidSendCommand+0x364>
    38d2:	88 ec       	ldi	r24, 0xC8	; 200
    38d4:	90 e0       	ldi	r25, 0x00	; 0
    38d6:	9c 83       	std	Y+4, r25	; 0x04
    38d8:	8b 83       	std	Y+3, r24	; 0x03
    38da:	8b 81       	ldd	r24, Y+3	; 0x03
    38dc:	9c 81       	ldd	r25, Y+4	; 0x04
    38de:	01 97       	sbiw	r24, 0x01	; 1
    38e0:	f1 f7       	brne	.-4      	; 0x38de <HLCD_voidSendCommand+0x352>
    38e2:	9c 83       	std	Y+4, r25	; 0x04
    38e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38e6:	8d 81       	ldd	r24, Y+5	; 0x05
    38e8:	9e 81       	ldd	r25, Y+6	; 0x06
    38ea:	01 97       	sbiw	r24, 0x01	; 1
    38ec:	9e 83       	std	Y+6, r25	; 0x06
    38ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38f0:	8d 81       	ldd	r24, Y+5	; 0x05
    38f2:	9e 81       	ldd	r25, Y+6	; 0x06
    38f4:	00 97       	sbiw	r24, 0x00	; 0
    38f6:	69 f7       	brne	.-38     	; 0x38d2 <HLCD_voidSendCommand+0x346>
    38f8:	14 c0       	rjmp	.+40     	; 0x3922 <HLCD_voidSendCommand+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38fa:	6f 81       	ldd	r22, Y+7	; 0x07
    38fc:	78 85       	ldd	r23, Y+8	; 0x08
    38fe:	89 85       	ldd	r24, Y+9	; 0x09
    3900:	9a 85       	ldd	r25, Y+10	; 0x0a
    3902:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3906:	dc 01       	movw	r26, r24
    3908:	cb 01       	movw	r24, r22
    390a:	9e 83       	std	Y+6, r25	; 0x06
    390c:	8d 83       	std	Y+5, r24	; 0x05
    390e:	8d 81       	ldd	r24, Y+5	; 0x05
    3910:	9e 81       	ldd	r25, Y+6	; 0x06
    3912:	9a 83       	std	Y+2, r25	; 0x02
    3914:	89 83       	std	Y+1, r24	; 0x01
    3916:	89 81       	ldd	r24, Y+1	; 0x01
    3918:	9a 81       	ldd	r25, Y+2	; 0x02
    391a:	01 97       	sbiw	r24, 0x01	; 1
    391c:	f1 f7       	brne	.-4      	; 0x391a <HLCD_voidSendCommand+0x38e>
    391e:	9a 83       	std	Y+2, r25	; 0x02
    3920:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	#endif
}
    3922:	ab 96       	adiw	r28, 0x2b	; 43
    3924:	0f b6       	in	r0, 0x3f	; 63
    3926:	f8 94       	cli
    3928:	de bf       	out	0x3e, r29	; 62
    392a:	0f be       	out	0x3f, r0	; 63
    392c:	cd bf       	out	0x3d, r28	; 61
    392e:	cf 91       	pop	r28
    3930:	df 91       	pop	r29
    3932:	08 95       	ret

00003934 <HLCD_voidSendData>:
 * Description : Send Char to LCD												*
 * Arguments   : Char : takes Char		 										*
 * return      : void															*
 *==============================================================================*/
void HLCD_voidSendData(u8 Copy_u8Data)
{
    3934:	df 93       	push	r29
    3936:	cf 93       	push	r28
    3938:	cd b7       	in	r28, 0x3d	; 61
    393a:	de b7       	in	r29, 0x3e	; 62
    393c:	ab 97       	sbiw	r28, 0x2b	; 43
    393e:	0f b6       	in	r0, 0x3f	; 63
    3940:	f8 94       	cli
    3942:	de bf       	out	0x3e, r29	; 62
    3944:	0f be       	out	0x3f, r0	; 63
    3946:	cd bf       	out	0x3d, r28	; 61
    3948:	8b a7       	std	Y+43, r24	; 0x2b
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_EN_PIN,DIO_LOW);
	_delay_ms(5);
	
	#elif (LCD_MODE == _4_BIT_MODE)
	//to select command register
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_RS_PIN,DIO_HIGH);
    394a:	80 e0       	ldi	r24, 0x00	; 0
    394c:	64 e0       	ldi	r22, 0x04	; 4
    394e:	41 e0       	ldi	r20, 0x01	; 1
    3950:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PIN_4, GET_BIT(Copy_u8Data,4));
    3954:	8b a5       	ldd	r24, Y+43	; 0x2b
    3956:	82 95       	swap	r24
    3958:	8f 70       	andi	r24, 0x0F	; 15
    395a:	98 2f       	mov	r25, r24
    395c:	91 70       	andi	r25, 0x01	; 1
    395e:	80 e0       	ldi	r24, 0x00	; 0
    3960:	60 e0       	ldi	r22, 0x00	; 0
    3962:	49 2f       	mov	r20, r25
    3964:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PIN_5, GET_BIT(Copy_u8Data,5));
    3968:	8b a5       	ldd	r24, Y+43	; 0x2b
    396a:	82 95       	swap	r24
    396c:	86 95       	lsr	r24
    396e:	87 70       	andi	r24, 0x07	; 7
    3970:	98 2f       	mov	r25, r24
    3972:	91 70       	andi	r25, 0x01	; 1
    3974:	80 e0       	ldi	r24, 0x00	; 0
    3976:	61 e0       	ldi	r22, 0x01	; 1
    3978:	49 2f       	mov	r20, r25
    397a:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PIN_6, GET_BIT(Copy_u8Data,6));
    397e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3980:	82 95       	swap	r24
    3982:	86 95       	lsr	r24
    3984:	86 95       	lsr	r24
    3986:	83 70       	andi	r24, 0x03	; 3
    3988:	98 2f       	mov	r25, r24
    398a:	91 70       	andi	r25, 0x01	; 1
    398c:	80 e0       	ldi	r24, 0x00	; 0
    398e:	62 e0       	ldi	r22, 0x02	; 2
    3990:	49 2f       	mov	r20, r25
    3992:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PIN_7, GET_BIT(Copy_u8Data,7));
    3996:	8b a5       	ldd	r24, Y+43	; 0x2b
    3998:	98 2f       	mov	r25, r24
    399a:	99 1f       	adc	r25, r25
    399c:	99 27       	eor	r25, r25
    399e:	99 1f       	adc	r25, r25
    39a0:	80 e0       	ldi	r24, 0x00	; 0
    39a2:	63 e0       	ldi	r22, 0x03	; 3
    39a4:	49 2f       	mov	r20, r25
    39a6:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>

	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_EN_PIN,DIO_HIGH); //EN
    39aa:	80 e0       	ldi	r24, 0x00	; 0
    39ac:	65 e0       	ldi	r22, 0x05	; 5
    39ae:	41 e0       	ldi	r20, 0x01	; 1
    39b0:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
    39b4:	80 e0       	ldi	r24, 0x00	; 0
    39b6:	90 e0       	ldi	r25, 0x00	; 0
    39b8:	a0 e8       	ldi	r26, 0x80	; 128
    39ba:	bf e3       	ldi	r27, 0x3F	; 63
    39bc:	8f a3       	std	Y+39, r24	; 0x27
    39be:	98 a7       	std	Y+40, r25	; 0x28
    39c0:	a9 a7       	std	Y+41, r26	; 0x29
    39c2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39c4:	6f a1       	ldd	r22, Y+39	; 0x27
    39c6:	78 a5       	ldd	r23, Y+40	; 0x28
    39c8:	89 a5       	ldd	r24, Y+41	; 0x29
    39ca:	9a a5       	ldd	r25, Y+42	; 0x2a
    39cc:	20 e0       	ldi	r18, 0x00	; 0
    39ce:	30 e0       	ldi	r19, 0x00	; 0
    39d0:	4a ef       	ldi	r20, 0xFA	; 250
    39d2:	54 e4       	ldi	r21, 0x44	; 68
    39d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39d8:	dc 01       	movw	r26, r24
    39da:	cb 01       	movw	r24, r22
    39dc:	8b a3       	std	Y+35, r24	; 0x23
    39de:	9c a3       	std	Y+36, r25	; 0x24
    39e0:	ad a3       	std	Y+37, r26	; 0x25
    39e2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    39e4:	6b a1       	ldd	r22, Y+35	; 0x23
    39e6:	7c a1       	ldd	r23, Y+36	; 0x24
    39e8:	8d a1       	ldd	r24, Y+37	; 0x25
    39ea:	9e a1       	ldd	r25, Y+38	; 0x26
    39ec:	20 e0       	ldi	r18, 0x00	; 0
    39ee:	30 e0       	ldi	r19, 0x00	; 0
    39f0:	40 e8       	ldi	r20, 0x80	; 128
    39f2:	5f e3       	ldi	r21, 0x3F	; 63
    39f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    39f8:	88 23       	and	r24, r24
    39fa:	2c f4       	brge	.+10     	; 0x3a06 <HLCD_voidSendData+0xd2>
		__ticks = 1;
    39fc:	81 e0       	ldi	r24, 0x01	; 1
    39fe:	90 e0       	ldi	r25, 0x00	; 0
    3a00:	9a a3       	std	Y+34, r25	; 0x22
    3a02:	89 a3       	std	Y+33, r24	; 0x21
    3a04:	3f c0       	rjmp	.+126    	; 0x3a84 <HLCD_voidSendData+0x150>
	else if (__tmp > 65535)
    3a06:	6b a1       	ldd	r22, Y+35	; 0x23
    3a08:	7c a1       	ldd	r23, Y+36	; 0x24
    3a0a:	8d a1       	ldd	r24, Y+37	; 0x25
    3a0c:	9e a1       	ldd	r25, Y+38	; 0x26
    3a0e:	20 e0       	ldi	r18, 0x00	; 0
    3a10:	3f ef       	ldi	r19, 0xFF	; 255
    3a12:	4f e7       	ldi	r20, 0x7F	; 127
    3a14:	57 e4       	ldi	r21, 0x47	; 71
    3a16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a1a:	18 16       	cp	r1, r24
    3a1c:	4c f5       	brge	.+82     	; 0x3a70 <HLCD_voidSendData+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a1e:	6f a1       	ldd	r22, Y+39	; 0x27
    3a20:	78 a5       	ldd	r23, Y+40	; 0x28
    3a22:	89 a5       	ldd	r24, Y+41	; 0x29
    3a24:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a26:	20 e0       	ldi	r18, 0x00	; 0
    3a28:	30 e0       	ldi	r19, 0x00	; 0
    3a2a:	40 e2       	ldi	r20, 0x20	; 32
    3a2c:	51 e4       	ldi	r21, 0x41	; 65
    3a2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a32:	dc 01       	movw	r26, r24
    3a34:	cb 01       	movw	r24, r22
    3a36:	bc 01       	movw	r22, r24
    3a38:	cd 01       	movw	r24, r26
    3a3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a3e:	dc 01       	movw	r26, r24
    3a40:	cb 01       	movw	r24, r22
    3a42:	9a a3       	std	Y+34, r25	; 0x22
    3a44:	89 a3       	std	Y+33, r24	; 0x21
    3a46:	0f c0       	rjmp	.+30     	; 0x3a66 <HLCD_voidSendData+0x132>
    3a48:	88 ec       	ldi	r24, 0xC8	; 200
    3a4a:	90 e0       	ldi	r25, 0x00	; 0
    3a4c:	98 a3       	std	Y+32, r25	; 0x20
    3a4e:	8f 8f       	std	Y+31, r24	; 0x1f
    3a50:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3a52:	98 a1       	ldd	r25, Y+32	; 0x20
    3a54:	01 97       	sbiw	r24, 0x01	; 1
    3a56:	f1 f7       	brne	.-4      	; 0x3a54 <HLCD_voidSendData+0x120>
    3a58:	98 a3       	std	Y+32, r25	; 0x20
    3a5a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a5c:	89 a1       	ldd	r24, Y+33	; 0x21
    3a5e:	9a a1       	ldd	r25, Y+34	; 0x22
    3a60:	01 97       	sbiw	r24, 0x01	; 1
    3a62:	9a a3       	std	Y+34, r25	; 0x22
    3a64:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a66:	89 a1       	ldd	r24, Y+33	; 0x21
    3a68:	9a a1       	ldd	r25, Y+34	; 0x22
    3a6a:	00 97       	sbiw	r24, 0x00	; 0
    3a6c:	69 f7       	brne	.-38     	; 0x3a48 <HLCD_voidSendData+0x114>
    3a6e:	14 c0       	rjmp	.+40     	; 0x3a98 <HLCD_voidSendData+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a70:	6b a1       	ldd	r22, Y+35	; 0x23
    3a72:	7c a1       	ldd	r23, Y+36	; 0x24
    3a74:	8d a1       	ldd	r24, Y+37	; 0x25
    3a76:	9e a1       	ldd	r25, Y+38	; 0x26
    3a78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a7c:	dc 01       	movw	r26, r24
    3a7e:	cb 01       	movw	r24, r22
    3a80:	9a a3       	std	Y+34, r25	; 0x22
    3a82:	89 a3       	std	Y+33, r24	; 0x21
    3a84:	89 a1       	ldd	r24, Y+33	; 0x21
    3a86:	9a a1       	ldd	r25, Y+34	; 0x22
    3a88:	9e 8f       	std	Y+30, r25	; 0x1e
    3a8a:	8d 8f       	std	Y+29, r24	; 0x1d
    3a8c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a8e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3a90:	01 97       	sbiw	r24, 0x01	; 1
    3a92:	f1 f7       	brne	.-4      	; 0x3a90 <HLCD_voidSendData+0x15c>
    3a94:	9e 8f       	std	Y+30, r25	; 0x1e
    3a96:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_EN_PIN,DIO_LOW);
    3a98:	80 e0       	ldi	r24, 0x00	; 0
    3a9a:	65 e0       	ldi	r22, 0x05	; 5
    3a9c:	40 e0       	ldi	r20, 0x00	; 0
    3a9e:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
	
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PIN_4, GET_BIT(Copy_u8Data,0));
    3aa2:	8b a5       	ldd	r24, Y+43	; 0x2b
    3aa4:	98 2f       	mov	r25, r24
    3aa6:	91 70       	andi	r25, 0x01	; 1
    3aa8:	80 e0       	ldi	r24, 0x00	; 0
    3aaa:	60 e0       	ldi	r22, 0x00	; 0
    3aac:	49 2f       	mov	r20, r25
    3aae:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PIN_5, GET_BIT(Copy_u8Data,1));
    3ab2:	8b a5       	ldd	r24, Y+43	; 0x2b
    3ab4:	86 95       	lsr	r24
    3ab6:	98 2f       	mov	r25, r24
    3ab8:	91 70       	andi	r25, 0x01	; 1
    3aba:	80 e0       	ldi	r24, 0x00	; 0
    3abc:	61 e0       	ldi	r22, 0x01	; 1
    3abe:	49 2f       	mov	r20, r25
    3ac0:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PIN_6, GET_BIT(Copy_u8Data,2));
    3ac4:	8b a5       	ldd	r24, Y+43	; 0x2b
    3ac6:	86 95       	lsr	r24
    3ac8:	86 95       	lsr	r24
    3aca:	98 2f       	mov	r25, r24
    3acc:	91 70       	andi	r25, 0x01	; 1
    3ace:	80 e0       	ldi	r24, 0x00	; 0
    3ad0:	62 e0       	ldi	r22, 0x02	; 2
    3ad2:	49 2f       	mov	r20, r25
    3ad4:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PIN_7, GET_BIT(Copy_u8Data,3));
    3ad8:	8b a5       	ldd	r24, Y+43	; 0x2b
    3ada:	86 95       	lsr	r24
    3adc:	86 95       	lsr	r24
    3ade:	86 95       	lsr	r24
    3ae0:	98 2f       	mov	r25, r24
    3ae2:	91 70       	andi	r25, 0x01	; 1
    3ae4:	80 e0       	ldi	r24, 0x00	; 0
    3ae6:	63 e0       	ldi	r22, 0x03	; 3
    3ae8:	49 2f       	mov	r20, r25
    3aea:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
	
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_EN_PIN,DIO_HIGH); //EN
    3aee:	80 e0       	ldi	r24, 0x00	; 0
    3af0:	65 e0       	ldi	r22, 0x05	; 5
    3af2:	41 e0       	ldi	r20, 0x01	; 1
    3af4:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
    3af8:	80 e0       	ldi	r24, 0x00	; 0
    3afa:	90 e0       	ldi	r25, 0x00	; 0
    3afc:	a0 e8       	ldi	r26, 0x80	; 128
    3afe:	bf e3       	ldi	r27, 0x3F	; 63
    3b00:	89 8f       	std	Y+25, r24	; 0x19
    3b02:	9a 8f       	std	Y+26, r25	; 0x1a
    3b04:	ab 8f       	std	Y+27, r26	; 0x1b
    3b06:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b08:	69 8d       	ldd	r22, Y+25	; 0x19
    3b0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b10:	20 e0       	ldi	r18, 0x00	; 0
    3b12:	30 e0       	ldi	r19, 0x00	; 0
    3b14:	4a ef       	ldi	r20, 0xFA	; 250
    3b16:	54 e4       	ldi	r21, 0x44	; 68
    3b18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b1c:	dc 01       	movw	r26, r24
    3b1e:	cb 01       	movw	r24, r22
    3b20:	8d 8b       	std	Y+21, r24	; 0x15
    3b22:	9e 8b       	std	Y+22, r25	; 0x16
    3b24:	af 8b       	std	Y+23, r26	; 0x17
    3b26:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3b28:	6d 89       	ldd	r22, Y+21	; 0x15
    3b2a:	7e 89       	ldd	r23, Y+22	; 0x16
    3b2c:	8f 89       	ldd	r24, Y+23	; 0x17
    3b2e:	98 8d       	ldd	r25, Y+24	; 0x18
    3b30:	20 e0       	ldi	r18, 0x00	; 0
    3b32:	30 e0       	ldi	r19, 0x00	; 0
    3b34:	40 e8       	ldi	r20, 0x80	; 128
    3b36:	5f e3       	ldi	r21, 0x3F	; 63
    3b38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b3c:	88 23       	and	r24, r24
    3b3e:	2c f4       	brge	.+10     	; 0x3b4a <HLCD_voidSendData+0x216>
		__ticks = 1;
    3b40:	81 e0       	ldi	r24, 0x01	; 1
    3b42:	90 e0       	ldi	r25, 0x00	; 0
    3b44:	9c 8b       	std	Y+20, r25	; 0x14
    3b46:	8b 8b       	std	Y+19, r24	; 0x13
    3b48:	3f c0       	rjmp	.+126    	; 0x3bc8 <HLCD_voidSendData+0x294>
	else if (__tmp > 65535)
    3b4a:	6d 89       	ldd	r22, Y+21	; 0x15
    3b4c:	7e 89       	ldd	r23, Y+22	; 0x16
    3b4e:	8f 89       	ldd	r24, Y+23	; 0x17
    3b50:	98 8d       	ldd	r25, Y+24	; 0x18
    3b52:	20 e0       	ldi	r18, 0x00	; 0
    3b54:	3f ef       	ldi	r19, 0xFF	; 255
    3b56:	4f e7       	ldi	r20, 0x7F	; 127
    3b58:	57 e4       	ldi	r21, 0x47	; 71
    3b5a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b5e:	18 16       	cp	r1, r24
    3b60:	4c f5       	brge	.+82     	; 0x3bb4 <HLCD_voidSendData+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b62:	69 8d       	ldd	r22, Y+25	; 0x19
    3b64:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b66:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b68:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b6a:	20 e0       	ldi	r18, 0x00	; 0
    3b6c:	30 e0       	ldi	r19, 0x00	; 0
    3b6e:	40 e2       	ldi	r20, 0x20	; 32
    3b70:	51 e4       	ldi	r21, 0x41	; 65
    3b72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b76:	dc 01       	movw	r26, r24
    3b78:	cb 01       	movw	r24, r22
    3b7a:	bc 01       	movw	r22, r24
    3b7c:	cd 01       	movw	r24, r26
    3b7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b82:	dc 01       	movw	r26, r24
    3b84:	cb 01       	movw	r24, r22
    3b86:	9c 8b       	std	Y+20, r25	; 0x14
    3b88:	8b 8b       	std	Y+19, r24	; 0x13
    3b8a:	0f c0       	rjmp	.+30     	; 0x3baa <HLCD_voidSendData+0x276>
    3b8c:	88 ec       	ldi	r24, 0xC8	; 200
    3b8e:	90 e0       	ldi	r25, 0x00	; 0
    3b90:	9a 8b       	std	Y+18, r25	; 0x12
    3b92:	89 8b       	std	Y+17, r24	; 0x11
    3b94:	89 89       	ldd	r24, Y+17	; 0x11
    3b96:	9a 89       	ldd	r25, Y+18	; 0x12
    3b98:	01 97       	sbiw	r24, 0x01	; 1
    3b9a:	f1 f7       	brne	.-4      	; 0x3b98 <HLCD_voidSendData+0x264>
    3b9c:	9a 8b       	std	Y+18, r25	; 0x12
    3b9e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ba0:	8b 89       	ldd	r24, Y+19	; 0x13
    3ba2:	9c 89       	ldd	r25, Y+20	; 0x14
    3ba4:	01 97       	sbiw	r24, 0x01	; 1
    3ba6:	9c 8b       	std	Y+20, r25	; 0x14
    3ba8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3baa:	8b 89       	ldd	r24, Y+19	; 0x13
    3bac:	9c 89       	ldd	r25, Y+20	; 0x14
    3bae:	00 97       	sbiw	r24, 0x00	; 0
    3bb0:	69 f7       	brne	.-38     	; 0x3b8c <HLCD_voidSendData+0x258>
    3bb2:	14 c0       	rjmp	.+40     	; 0x3bdc <HLCD_voidSendData+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bb4:	6d 89       	ldd	r22, Y+21	; 0x15
    3bb6:	7e 89       	ldd	r23, Y+22	; 0x16
    3bb8:	8f 89       	ldd	r24, Y+23	; 0x17
    3bba:	98 8d       	ldd	r25, Y+24	; 0x18
    3bbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bc0:	dc 01       	movw	r26, r24
    3bc2:	cb 01       	movw	r24, r22
    3bc4:	9c 8b       	std	Y+20, r25	; 0x14
    3bc6:	8b 8b       	std	Y+19, r24	; 0x13
    3bc8:	8b 89       	ldd	r24, Y+19	; 0x13
    3bca:	9c 89       	ldd	r25, Y+20	; 0x14
    3bcc:	98 8b       	std	Y+16, r25	; 0x10
    3bce:	8f 87       	std	Y+15, r24	; 0x0f
    3bd0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bd2:	98 89       	ldd	r25, Y+16	; 0x10
    3bd4:	01 97       	sbiw	r24, 0x01	; 1
    3bd6:	f1 f7       	brne	.-4      	; 0x3bd4 <HLCD_voidSendData+0x2a0>
    3bd8:	98 8b       	std	Y+16, r25	; 0x10
    3bda:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_EN_PIN,DIO_LOW);
    3bdc:	80 e0       	ldi	r24, 0x00	; 0
    3bde:	65 e0       	ldi	r22, 0x05	; 5
    3be0:	40 e0       	ldi	r20, 0x00	; 0
    3be2:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
    3be6:	80 e0       	ldi	r24, 0x00	; 0
    3be8:	90 e0       	ldi	r25, 0x00	; 0
    3bea:	a0 ea       	ldi	r26, 0xA0	; 160
    3bec:	b0 e4       	ldi	r27, 0x40	; 64
    3bee:	8b 87       	std	Y+11, r24	; 0x0b
    3bf0:	9c 87       	std	Y+12, r25	; 0x0c
    3bf2:	ad 87       	std	Y+13, r26	; 0x0d
    3bf4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bf6:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bf8:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bfa:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bfc:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bfe:	20 e0       	ldi	r18, 0x00	; 0
    3c00:	30 e0       	ldi	r19, 0x00	; 0
    3c02:	4a ef       	ldi	r20, 0xFA	; 250
    3c04:	54 e4       	ldi	r21, 0x44	; 68
    3c06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c0a:	dc 01       	movw	r26, r24
    3c0c:	cb 01       	movw	r24, r22
    3c0e:	8f 83       	std	Y+7, r24	; 0x07
    3c10:	98 87       	std	Y+8, r25	; 0x08
    3c12:	a9 87       	std	Y+9, r26	; 0x09
    3c14:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c16:	6f 81       	ldd	r22, Y+7	; 0x07
    3c18:	78 85       	ldd	r23, Y+8	; 0x08
    3c1a:	89 85       	ldd	r24, Y+9	; 0x09
    3c1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c1e:	20 e0       	ldi	r18, 0x00	; 0
    3c20:	30 e0       	ldi	r19, 0x00	; 0
    3c22:	40 e8       	ldi	r20, 0x80	; 128
    3c24:	5f e3       	ldi	r21, 0x3F	; 63
    3c26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c2a:	88 23       	and	r24, r24
    3c2c:	2c f4       	brge	.+10     	; 0x3c38 <HLCD_voidSendData+0x304>
		__ticks = 1;
    3c2e:	81 e0       	ldi	r24, 0x01	; 1
    3c30:	90 e0       	ldi	r25, 0x00	; 0
    3c32:	9e 83       	std	Y+6, r25	; 0x06
    3c34:	8d 83       	std	Y+5, r24	; 0x05
    3c36:	3f c0       	rjmp	.+126    	; 0x3cb6 <HLCD_voidSendData+0x382>
	else if (__tmp > 65535)
    3c38:	6f 81       	ldd	r22, Y+7	; 0x07
    3c3a:	78 85       	ldd	r23, Y+8	; 0x08
    3c3c:	89 85       	ldd	r24, Y+9	; 0x09
    3c3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c40:	20 e0       	ldi	r18, 0x00	; 0
    3c42:	3f ef       	ldi	r19, 0xFF	; 255
    3c44:	4f e7       	ldi	r20, 0x7F	; 127
    3c46:	57 e4       	ldi	r21, 0x47	; 71
    3c48:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c4c:	18 16       	cp	r1, r24
    3c4e:	4c f5       	brge	.+82     	; 0x3ca2 <HLCD_voidSendData+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c50:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c52:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c54:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c56:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c58:	20 e0       	ldi	r18, 0x00	; 0
    3c5a:	30 e0       	ldi	r19, 0x00	; 0
    3c5c:	40 e2       	ldi	r20, 0x20	; 32
    3c5e:	51 e4       	ldi	r21, 0x41	; 65
    3c60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c64:	dc 01       	movw	r26, r24
    3c66:	cb 01       	movw	r24, r22
    3c68:	bc 01       	movw	r22, r24
    3c6a:	cd 01       	movw	r24, r26
    3c6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c70:	dc 01       	movw	r26, r24
    3c72:	cb 01       	movw	r24, r22
    3c74:	9e 83       	std	Y+6, r25	; 0x06
    3c76:	8d 83       	std	Y+5, r24	; 0x05
    3c78:	0f c0       	rjmp	.+30     	; 0x3c98 <HLCD_voidSendData+0x364>
    3c7a:	88 ec       	ldi	r24, 0xC8	; 200
    3c7c:	90 e0       	ldi	r25, 0x00	; 0
    3c7e:	9c 83       	std	Y+4, r25	; 0x04
    3c80:	8b 83       	std	Y+3, r24	; 0x03
    3c82:	8b 81       	ldd	r24, Y+3	; 0x03
    3c84:	9c 81       	ldd	r25, Y+4	; 0x04
    3c86:	01 97       	sbiw	r24, 0x01	; 1
    3c88:	f1 f7       	brne	.-4      	; 0x3c86 <HLCD_voidSendData+0x352>
    3c8a:	9c 83       	std	Y+4, r25	; 0x04
    3c8c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c8e:	8d 81       	ldd	r24, Y+5	; 0x05
    3c90:	9e 81       	ldd	r25, Y+6	; 0x06
    3c92:	01 97       	sbiw	r24, 0x01	; 1
    3c94:	9e 83       	std	Y+6, r25	; 0x06
    3c96:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c98:	8d 81       	ldd	r24, Y+5	; 0x05
    3c9a:	9e 81       	ldd	r25, Y+6	; 0x06
    3c9c:	00 97       	sbiw	r24, 0x00	; 0
    3c9e:	69 f7       	brne	.-38     	; 0x3c7a <HLCD_voidSendData+0x346>
    3ca0:	14 c0       	rjmp	.+40     	; 0x3cca <HLCD_voidSendData+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ca2:	6f 81       	ldd	r22, Y+7	; 0x07
    3ca4:	78 85       	ldd	r23, Y+8	; 0x08
    3ca6:	89 85       	ldd	r24, Y+9	; 0x09
    3ca8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3caa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cae:	dc 01       	movw	r26, r24
    3cb0:	cb 01       	movw	r24, r22
    3cb2:	9e 83       	std	Y+6, r25	; 0x06
    3cb4:	8d 83       	std	Y+5, r24	; 0x05
    3cb6:	8d 81       	ldd	r24, Y+5	; 0x05
    3cb8:	9e 81       	ldd	r25, Y+6	; 0x06
    3cba:	9a 83       	std	Y+2, r25	; 0x02
    3cbc:	89 83       	std	Y+1, r24	; 0x01
    3cbe:	89 81       	ldd	r24, Y+1	; 0x01
    3cc0:	9a 81       	ldd	r25, Y+2	; 0x02
    3cc2:	01 97       	sbiw	r24, 0x01	; 1
    3cc4:	f1 f7       	brne	.-4      	; 0x3cc2 <HLCD_voidSendData+0x38e>
    3cc6:	9a 83       	std	Y+2, r25	; 0x02
    3cc8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	#endif
}
    3cca:	ab 96       	adiw	r28, 0x2b	; 43
    3ccc:	0f b6       	in	r0, 0x3f	; 63
    3cce:	f8 94       	cli
    3cd0:	de bf       	out	0x3e, r29	; 62
    3cd2:	0f be       	out	0x3f, r0	; 63
    3cd4:	cd bf       	out	0x3d, r28	; 61
    3cd6:	cf 91       	pop	r28
    3cd8:	df 91       	pop	r29
    3cda:	08 95       	ret

00003cdc <HLCD_voidClearDisplay>:
 * Description : Clear LCD Display												*
 * Arguments   : void						 									*
 * return      : void															*
 *==============================================================================*/
void HLCD_voidClearDisplay(void)
{
    3cdc:	df 93       	push	r29
    3cde:	cf 93       	push	r28
    3ce0:	cd b7       	in	r28, 0x3d	; 61
    3ce2:	de b7       	in	r29, 0x3e	; 62
	HLCD_voidSendCommand(0x01);
    3ce4:	81 e0       	ldi	r24, 0x01	; 1
    3ce6:	0e 94 c6 1a 	call	0x358c	; 0x358c <HLCD_voidSendCommand>
}
    3cea:	cf 91       	pop	r28
    3cec:	df 91       	pop	r29
    3cee:	08 95       	ret

00003cf0 <HLCD_voidSendString>:
 * Description : Send String to LCD												*
 * Arguments   : String : takes String		 									*
 * return      : void															*
 *==============================================================================*/
void HLCD_voidSendString(u8 *Ptr_u8PtrString)
{
    3cf0:	df 93       	push	r29
    3cf2:	cf 93       	push	r28
    3cf4:	00 d0       	rcall	.+0      	; 0x3cf6 <HLCD_voidSendString+0x6>
    3cf6:	cd b7       	in	r28, 0x3d	; 61
    3cf8:	de b7       	in	r29, 0x3e	; 62
    3cfa:	9a 83       	std	Y+2, r25	; 0x02
    3cfc:	89 83       	std	Y+1, r24	; 0x01
    3cfe:	0a c0       	rjmp	.+20     	; 0x3d14 <HLCD_voidSendString+0x24>
	while(*Ptr_u8PtrString != 0)
	{
		HLCD_voidSendData(*Ptr_u8PtrString);
    3d00:	e9 81       	ldd	r30, Y+1	; 0x01
    3d02:	fa 81       	ldd	r31, Y+2	; 0x02
    3d04:	80 81       	ld	r24, Z
    3d06:	0e 94 9a 1c 	call	0x3934	; 0x3934 <HLCD_voidSendData>
		Ptr_u8PtrString++;
    3d0a:	89 81       	ldd	r24, Y+1	; 0x01
    3d0c:	9a 81       	ldd	r25, Y+2	; 0x02
    3d0e:	01 96       	adiw	r24, 0x01	; 1
    3d10:	9a 83       	std	Y+2, r25	; 0x02
    3d12:	89 83       	std	Y+1, r24	; 0x01
 * Arguments   : String : takes String		 									*
 * return      : void															*
 *==============================================================================*/
void HLCD_voidSendString(u8 *Ptr_u8PtrString)
{
	while(*Ptr_u8PtrString != 0)
    3d14:	e9 81       	ldd	r30, Y+1	; 0x01
    3d16:	fa 81       	ldd	r31, Y+2	; 0x02
    3d18:	80 81       	ld	r24, Z
    3d1a:	88 23       	and	r24, r24
    3d1c:	89 f7       	brne	.-30     	; 0x3d00 <HLCD_voidSendString+0x10>
	{
		HLCD_voidSendData(*Ptr_u8PtrString);
		Ptr_u8PtrString++;
	}
}
    3d1e:	0f 90       	pop	r0
    3d20:	0f 90       	pop	r0
    3d22:	cf 91       	pop	r28
    3d24:	df 91       	pop	r29
    3d26:	08 95       	ret

00003d28 <HLCD_voidGoToPosition>:
 * Description : Send Position to LCD											*
 * Arguments   : N.OF ROW AND N.OF COL											*
 * return      : void															*
 *==============================================================================*/
void HLCD_voidGoToPosition(u8 Copy_u8RowNum,u8 Copy_u8ColNum)
{
    3d28:	df 93       	push	r29
    3d2a:	cf 93       	push	r28
    3d2c:	00 d0       	rcall	.+0      	; 0x3d2e <HLCD_voidGoToPosition+0x6>
    3d2e:	00 d0       	rcall	.+0      	; 0x3d30 <HLCD_voidGoToPosition+0x8>
    3d30:	00 d0       	rcall	.+0      	; 0x3d32 <HLCD_voidGoToPosition+0xa>
    3d32:	cd b7       	in	r28, 0x3d	; 61
    3d34:	de b7       	in	r29, 0x3e	; 62
    3d36:	8d 83       	std	Y+5, r24	; 0x05
    3d38:	6e 83       	std	Y+6, r22	; 0x06
	u8 arr[4] ={0x80,0xC0,0x90,0xD0};
    3d3a:	80 e8       	ldi	r24, 0x80	; 128
    3d3c:	89 83       	std	Y+1, r24	; 0x01
    3d3e:	80 ec       	ldi	r24, 0xC0	; 192
    3d40:	8a 83       	std	Y+2, r24	; 0x02
    3d42:	80 e9       	ldi	r24, 0x90	; 144
    3d44:	8b 83       	std	Y+3, r24	; 0x03
    3d46:	80 ed       	ldi	r24, 0xD0	; 208
    3d48:	8c 83       	std	Y+4, r24	; 0x04
	HLCD_voidSendCommand(arr[Copy_u8RowNum] + Copy_u8ColNum);
    3d4a:	8d 81       	ldd	r24, Y+5	; 0x05
    3d4c:	28 2f       	mov	r18, r24
    3d4e:	30 e0       	ldi	r19, 0x00	; 0
    3d50:	ce 01       	movw	r24, r28
    3d52:	01 96       	adiw	r24, 0x01	; 1
    3d54:	fc 01       	movw	r30, r24
    3d56:	e2 0f       	add	r30, r18
    3d58:	f3 1f       	adc	r31, r19
    3d5a:	90 81       	ld	r25, Z
    3d5c:	8e 81       	ldd	r24, Y+6	; 0x06
    3d5e:	89 0f       	add	r24, r25
    3d60:	0e 94 c6 1a 	call	0x358c	; 0x358c <HLCD_voidSendCommand>
}
    3d64:	26 96       	adiw	r28, 0x06	; 6
    3d66:	0f b6       	in	r0, 0x3f	; 63
    3d68:	f8 94       	cli
    3d6a:	de bf       	out	0x3e, r29	; 62
    3d6c:	0f be       	out	0x3f, r0	; 63
    3d6e:	cd bf       	out	0x3d, r28	; 61
    3d70:	cf 91       	pop	r28
    3d72:	df 91       	pop	r29
    3d74:	08 95       	ret

00003d76 <HLCD_voidDisplayNumber>:
 * Description : Send NUMBER to LCD												*
 * Arguments   : NUMBER															*
 * return      : void															*
 *==============================================================================*/
void HLCD_voidDisplayNumber(s32 Copy_s32Number)
{
    3d76:	df 93       	push	r29
    3d78:	cf 93       	push	r28
    3d7a:	cd b7       	in	r28, 0x3d	; 61
    3d7c:	de b7       	in	r29, 0x3e	; 62
    3d7e:	60 97       	sbiw	r28, 0x10	; 16
    3d80:	0f b6       	in	r0, 0x3f	; 63
    3d82:	f8 94       	cli
    3d84:	de bf       	out	0x3e, r29	; 62
    3d86:	0f be       	out	0x3f, r0	; 63
    3d88:	cd bf       	out	0x3d, r28	; 61
    3d8a:	6d 87       	std	Y+13, r22	; 0x0d
    3d8c:	7e 87       	std	Y+14, r23	; 0x0e
    3d8e:	8f 87       	std	Y+15, r24	; 0x0f
    3d90:	98 8b       	std	Y+16, r25	; 0x10
	if(Copy_s32Number == 0)
    3d92:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d94:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d96:	af 85       	ldd	r26, Y+15	; 0x0f
    3d98:	b8 89       	ldd	r27, Y+16	; 0x10
    3d9a:	00 97       	sbiw	r24, 0x00	; 0
    3d9c:	a1 05       	cpc	r26, r1
    3d9e:	b1 05       	cpc	r27, r1
    3da0:	21 f4       	brne	.+8      	; 0x3daa <HLCD_voidDisplayNumber+0x34>
	{
		HLCD_voidSendData('0');
    3da2:	80 e3       	ldi	r24, 0x30	; 48
    3da4:	0e 94 9a 1c 	call	0x3934	; 0x3934 <HLCD_voidSendData>
    3da8:	65 c0       	rjmp	.+202    	; 0x3e74 <HLCD_voidDisplayNumber+0xfe>
	}
	else if(Copy_s32Number > 0  )
    3daa:	8d 85       	ldd	r24, Y+13	; 0x0d
    3dac:	9e 85       	ldd	r25, Y+14	; 0x0e
    3dae:	af 85       	ldd	r26, Y+15	; 0x0f
    3db0:	b8 89       	ldd	r27, Y+16	; 0x10
    3db2:	18 16       	cp	r1, r24
    3db4:	19 06       	cpc	r1, r25
    3db6:	1a 06       	cpc	r1, r26
    3db8:	1b 06       	cpc	r1, r27
    3dba:	0c f0       	brlt	.+2      	; 0x3dbe <HLCD_voidDisplayNumber+0x48>
    3dbc:	5b c0       	rjmp	.+182    	; 0x3e74 <HLCD_voidDisplayNumber+0xfe>
	{
		s8 i=0;
    3dbe:	1a 82       	std	Y+2, r1	; 0x02
	    u8 Copy_u8Remander = 0;
    3dc0:	19 82       	std	Y+1, r1	; 0x01
	    u8 arr[10] = {0};
    3dc2:	8a e0       	ldi	r24, 0x0A	; 10
    3dc4:	fe 01       	movw	r30, r28
    3dc6:	33 96       	adiw	r30, 0x03	; 3
    3dc8:	df 01       	movw	r26, r30
    3dca:	98 2f       	mov	r25, r24
    3dcc:	1d 92       	st	X+, r1
    3dce:	9a 95       	dec	r25
    3dd0:	e9 f7       	brne	.-6      	; 0x3dcc <HLCD_voidDisplayNumber+0x56>
    3dd2:	30 c0       	rjmp	.+96     	; 0x3e34 <HLCD_voidDisplayNumber+0xbe>
	    while(Copy_s32Number != 0)
	    {
	    	Copy_u8Remander = Copy_s32Number % 10;
    3dd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3dd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3dd8:	af 85       	ldd	r26, Y+15	; 0x0f
    3dda:	b8 89       	ldd	r27, Y+16	; 0x10
    3ddc:	2a e0       	ldi	r18, 0x0A	; 10
    3dde:	30 e0       	ldi	r19, 0x00	; 0
    3de0:	40 e0       	ldi	r20, 0x00	; 0
    3de2:	50 e0       	ldi	r21, 0x00	; 0
    3de4:	bc 01       	movw	r22, r24
    3de6:	cd 01       	movw	r24, r26
    3de8:	0e 94 56 21 	call	0x42ac	; 0x42ac <__divmodsi4>
    3dec:	dc 01       	movw	r26, r24
    3dee:	cb 01       	movw	r24, r22
    3df0:	89 83       	std	Y+1, r24	; 0x01
	    	arr[i] = Copy_u8Remander;
    3df2:	8a 81       	ldd	r24, Y+2	; 0x02
    3df4:	28 2f       	mov	r18, r24
    3df6:	33 27       	eor	r19, r19
    3df8:	27 fd       	sbrc	r18, 7
    3dfa:	30 95       	com	r19
    3dfc:	ce 01       	movw	r24, r28
    3dfe:	03 96       	adiw	r24, 0x03	; 3
    3e00:	fc 01       	movw	r30, r24
    3e02:	e2 0f       	add	r30, r18
    3e04:	f3 1f       	adc	r31, r19
    3e06:	89 81       	ldd	r24, Y+1	; 0x01
    3e08:	80 83       	st	Z, r24
	    	i++;
    3e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e0c:	8f 5f       	subi	r24, 0xFF	; 255
    3e0e:	8a 83       	std	Y+2, r24	; 0x02
	    	Copy_s32Number /= 10;
    3e10:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e12:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e14:	af 85       	ldd	r26, Y+15	; 0x0f
    3e16:	b8 89       	ldd	r27, Y+16	; 0x10
    3e18:	2a e0       	ldi	r18, 0x0A	; 10
    3e1a:	30 e0       	ldi	r19, 0x00	; 0
    3e1c:	40 e0       	ldi	r20, 0x00	; 0
    3e1e:	50 e0       	ldi	r21, 0x00	; 0
    3e20:	bc 01       	movw	r22, r24
    3e22:	cd 01       	movw	r24, r26
    3e24:	0e 94 56 21 	call	0x42ac	; 0x42ac <__divmodsi4>
    3e28:	da 01       	movw	r26, r20
    3e2a:	c9 01       	movw	r24, r18
    3e2c:	8d 87       	std	Y+13, r24	; 0x0d
    3e2e:	9e 87       	std	Y+14, r25	; 0x0e
    3e30:	af 87       	std	Y+15, r26	; 0x0f
    3e32:	b8 8b       	std	Y+16, r27	; 0x10
	else if(Copy_s32Number > 0  )
	{
		s8 i=0;
	    u8 Copy_u8Remander = 0;
	    u8 arr[10] = {0};
	    while(Copy_s32Number != 0)
    3e34:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e36:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e38:	af 85       	ldd	r26, Y+15	; 0x0f
    3e3a:	b8 89       	ldd	r27, Y+16	; 0x10
    3e3c:	00 97       	sbiw	r24, 0x00	; 0
    3e3e:	a1 05       	cpc	r26, r1
    3e40:	b1 05       	cpc	r27, r1
    3e42:	41 f6       	brne	.-112    	; 0x3dd4 <HLCD_voidDisplayNumber+0x5e>
	    	Copy_u8Remander = Copy_s32Number % 10;
	    	arr[i] = Copy_u8Remander;
	    	i++;
	    	Copy_s32Number /= 10;
	    }
	    i--;
    3e44:	8a 81       	ldd	r24, Y+2	; 0x02
    3e46:	81 50       	subi	r24, 0x01	; 1
    3e48:	8a 83       	std	Y+2, r24	; 0x02
    3e4a:	11 c0       	rjmp	.+34     	; 0x3e6e <HLCD_voidDisplayNumber+0xf8>
	    while(i >= 0)
	    {
	    	HLCD_voidSendData(arr[i] + 48);
    3e4c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e4e:	28 2f       	mov	r18, r24
    3e50:	33 27       	eor	r19, r19
    3e52:	27 fd       	sbrc	r18, 7
    3e54:	30 95       	com	r19
    3e56:	ce 01       	movw	r24, r28
    3e58:	03 96       	adiw	r24, 0x03	; 3
    3e5a:	fc 01       	movw	r30, r24
    3e5c:	e2 0f       	add	r30, r18
    3e5e:	f3 1f       	adc	r31, r19
    3e60:	80 81       	ld	r24, Z
    3e62:	80 5d       	subi	r24, 0xD0	; 208
    3e64:	0e 94 9a 1c 	call	0x3934	; 0x3934 <HLCD_voidSendData>
	    	i--;	
    3e68:	8a 81       	ldd	r24, Y+2	; 0x02
    3e6a:	81 50       	subi	r24, 0x01	; 1
    3e6c:	8a 83       	std	Y+2, r24	; 0x02
	    	arr[i] = Copy_u8Remander;
	    	i++;
	    	Copy_s32Number /= 10;
	    }
	    i--;
	    while(i >= 0)
    3e6e:	8a 81       	ldd	r24, Y+2	; 0x02
    3e70:	88 23       	and	r24, r24
    3e72:	64 f7       	brge	.-40     	; 0x3e4c <HLCD_voidDisplayNumber+0xd6>
	    	HLCD_voidSendData(arr[i] + 48);
	    	i--;	
	    }
	    
	}
}
    3e74:	60 96       	adiw	r28, 0x10	; 16
    3e76:	0f b6       	in	r0, 0x3f	; 63
    3e78:	f8 94       	cli
    3e7a:	de bf       	out	0x3e, r29	; 62
    3e7c:	0f be       	out	0x3f, r0	; 63
    3e7e:	cd bf       	out	0x3d, r28	; 61
    3e80:	cf 91       	pop	r28
    3e82:	df 91       	pop	r29
    3e84:	08 95       	ret

00003e86 <HLCD_voidDisplaySpecialChar>:
 * Description : Send SpecialChar to LCD																				 *
 * Arguments   : SpecialChar ,	CGRam_index ,N.OF ROW , N.OF COL														 *
 * return      : void																									 *
 *=======================================================================================================================*/
void HLCD_voidDisplaySpecialChar(u8* Ptr_u8PtrChar,u8 CGRam_index,u8 Copy_u8RowNum,u8 Copy_u8ColNum)
{
    3e86:	df 93       	push	r29
    3e88:	cf 93       	push	r28
    3e8a:	cd b7       	in	r28, 0x3d	; 61
    3e8c:	de b7       	in	r29, 0x3e	; 62
    3e8e:	27 97       	sbiw	r28, 0x07	; 7
    3e90:	0f b6       	in	r0, 0x3f	; 63
    3e92:	f8 94       	cli
    3e94:	de bf       	out	0x3e, r29	; 62
    3e96:	0f be       	out	0x3f, r0	; 63
    3e98:	cd bf       	out	0x3d, r28	; 61
    3e9a:	9c 83       	std	Y+4, r25	; 0x04
    3e9c:	8b 83       	std	Y+3, r24	; 0x03
    3e9e:	6d 83       	std	Y+5, r22	; 0x05
    3ea0:	4e 83       	std	Y+6, r20	; 0x06
    3ea2:	2f 83       	std	Y+7, r18	; 0x07
	HLCD_voidGoToPosition( Copy_u8RowNum, Copy_u8ColNum);
    3ea4:	8e 81       	ldd	r24, Y+6	; 0x06
    3ea6:	6f 81       	ldd	r22, Y+7	; 0x07
    3ea8:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <HLCD_voidGoToPosition>
	HLCD_voidSendData(CGRam_index);
    3eac:	8d 81       	ldd	r24, Y+5	; 0x05
    3eae:	0e 94 9a 1c 	call	0x3934	; 0x3934 <HLCD_voidSendData>
	u8 Local_u8address;
	u8 Local_u8Index;
	if (CGRam_index < 8)
    3eb2:	8d 81       	ldd	r24, Y+5	; 0x05
    3eb4:	88 30       	cpi	r24, 0x08	; 8
    3eb6:	18 f5       	brcc	.+70     	; 0x3efe <HLCD_voidDisplaySpecialChar+0x78>
	{
		Local_u8address= CGRam_index * 8;
    3eb8:	8d 81       	ldd	r24, Y+5	; 0x05
    3eba:	88 2f       	mov	r24, r24
    3ebc:	90 e0       	ldi	r25, 0x00	; 0
    3ebe:	88 0f       	add	r24, r24
    3ec0:	99 1f       	adc	r25, r25
    3ec2:	88 0f       	add	r24, r24
    3ec4:	99 1f       	adc	r25, r25
    3ec6:	88 0f       	add	r24, r24
    3ec8:	99 1f       	adc	r25, r25
    3eca:	8a 83       	std	Y+2, r24	; 0x02
		Local_u8address=SET_BIT(Local_u8address,6);
    3ecc:	8a 81       	ldd	r24, Y+2	; 0x02
    3ece:	80 64       	ori	r24, 0x40	; 64
    3ed0:	8a 83       	std	Y+2, r24	; 0x02
		HLCD_voidSendCommand(Local_u8address);
    3ed2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ed4:	0e 94 c6 1a 	call	0x358c	; 0x358c <HLCD_voidSendCommand>
		for(Local_u8Index = 0;Local_u8Index < 8;Local_u8Index++)
    3ed8:	19 82       	std	Y+1, r1	; 0x01
    3eda:	0e c0       	rjmp	.+28     	; 0x3ef8 <HLCD_voidDisplaySpecialChar+0x72>
		{
			HLCD_voidSendData(Ptr_u8PtrChar[Local_u8Index]);
    3edc:	89 81       	ldd	r24, Y+1	; 0x01
    3ede:	28 2f       	mov	r18, r24
    3ee0:	30 e0       	ldi	r19, 0x00	; 0
    3ee2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ee4:	9c 81       	ldd	r25, Y+4	; 0x04
    3ee6:	fc 01       	movw	r30, r24
    3ee8:	e2 0f       	add	r30, r18
    3eea:	f3 1f       	adc	r31, r19
    3eec:	80 81       	ld	r24, Z
    3eee:	0e 94 9a 1c 	call	0x3934	; 0x3934 <HLCD_voidSendData>
	if (CGRam_index < 8)
	{
		Local_u8address= CGRam_index * 8;
		Local_u8address=SET_BIT(Local_u8address,6);
		HLCD_voidSendCommand(Local_u8address);
		for(Local_u8Index = 0;Local_u8Index < 8;Local_u8Index++)
    3ef2:	89 81       	ldd	r24, Y+1	; 0x01
    3ef4:	8f 5f       	subi	r24, 0xFF	; 255
    3ef6:	89 83       	std	Y+1, r24	; 0x01
    3ef8:	89 81       	ldd	r24, Y+1	; 0x01
    3efa:	88 30       	cpi	r24, 0x08	; 8
    3efc:	78 f3       	brcs	.-34     	; 0x3edc <HLCD_voidDisplaySpecialChar+0x56>
		{
			HLCD_voidSendData(Ptr_u8PtrChar[Local_u8Index]);
		}
	}
	HLCD_voidSendCommand(0x02);
    3efe:	82 e0       	ldi	r24, 0x02	; 2
    3f00:	0e 94 c6 1a 	call	0x358c	; 0x358c <HLCD_voidSendCommand>

}
    3f04:	27 96       	adiw	r28, 0x07	; 7
    3f06:	0f b6       	in	r0, 0x3f	; 63
    3f08:	f8 94       	cli
    3f0a:	de bf       	out	0x3e, r29	; 62
    3f0c:	0f be       	out	0x3f, r0	; 63
    3f0e:	cd bf       	out	0x3d, r28	; 61
    3f10:	cf 91       	pop	r28
    3f12:	df 91       	pop	r29
    3f14:	08 95       	ret

00003f16 <HKEYPAD_voidInit>:
 * Description : Set initialization direction of KEYPAD							*
 * Arguments   : void			 												*
 * return      : void															*
 *==============================================================================*/
void HKEYPAD_voidInit(void)
{
    3f16:	df 93       	push	r29
    3f18:	cf 93       	push	r28
    3f1a:	cd b7       	in	r28, 0x3d	; 61
    3f1c:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidSetPinDirection(KEYPAD_ROW_PORT,KEYPAD_R0,DIO_OUTPUT);
    3f1e:	80 e0       	ldi	r24, 0x00	; 0
    3f20:	64 e0       	ldi	r22, 0x04	; 4
    3f22:	41 e0       	ldi	r20, 0x01	; 1
    3f24:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(KEYPAD_ROW_PORT,KEYPAD_R1,DIO_OUTPUT);
    3f28:	80 e0       	ldi	r24, 0x00	; 0
    3f2a:	65 e0       	ldi	r22, 0x05	; 5
    3f2c:	41 e0       	ldi	r20, 0x01	; 1
    3f2e:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(KEYPAD_ROW_PORT,KEYPAD_R2,DIO_OUTPUT);
    3f32:	80 e0       	ldi	r24, 0x00	; 0
    3f34:	66 e0       	ldi	r22, 0x06	; 6
    3f36:	41 e0       	ldi	r20, 0x01	; 1
    3f38:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(KEYPAD_ROW_PORT,KEYPAD_R3,DIO_OUTPUT);
    3f3c:	80 e0       	ldi	r24, 0x00	; 0
    3f3e:	67 e0       	ldi	r22, 0x07	; 7
    3f40:	41 e0       	ldi	r20, 0x01	; 1
    3f42:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <MDIO_voidSetPinDirection>
	
	MDIO_voidSetPinValue(KEYPAD_ROW_PORT,KEYPAD_R0,DIO_HIGH);
    3f46:	80 e0       	ldi	r24, 0x00	; 0
    3f48:	64 e0       	ldi	r22, 0x04	; 4
    3f4a:	41 e0       	ldi	r20, 0x01	; 1
    3f4c:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(KEYPAD_ROW_PORT,KEYPAD_R1,DIO_HIGH);
    3f50:	80 e0       	ldi	r24, 0x00	; 0
    3f52:	65 e0       	ldi	r22, 0x05	; 5
    3f54:	41 e0       	ldi	r20, 0x01	; 1
    3f56:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(KEYPAD_ROW_PORT,KEYPAD_R2,DIO_HIGH);
    3f5a:	80 e0       	ldi	r24, 0x00	; 0
    3f5c:	66 e0       	ldi	r22, 0x06	; 6
    3f5e:	41 e0       	ldi	r20, 0x01	; 1
    3f60:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(KEYPAD_ROW_PORT,KEYPAD_R3,DIO_HIGH);
    3f64:	80 e0       	ldi	r24, 0x00	; 0
    3f66:	67 e0       	ldi	r22, 0x07	; 7
    3f68:	41 e0       	ldi	r20, 0x01	; 1
    3f6a:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
	
	MDIO_voidSetPinDirection(KEYPAD_COL_PORT,KEYPAD_C0,DIO_INPUT);
    3f6e:	82 e0       	ldi	r24, 0x02	; 2
    3f70:	62 e0       	ldi	r22, 0x02	; 2
    3f72:	40 e0       	ldi	r20, 0x00	; 0
    3f74:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(KEYPAD_COL_PORT,KEYPAD_C1,DIO_INPUT);
    3f78:	82 e0       	ldi	r24, 0x02	; 2
    3f7a:	63 e0       	ldi	r22, 0x03	; 3
    3f7c:	40 e0       	ldi	r20, 0x00	; 0
    3f7e:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(KEYPAD_COL_PORT,KEYPAD_C2,DIO_INPUT);
    3f82:	82 e0       	ldi	r24, 0x02	; 2
    3f84:	64 e0       	ldi	r22, 0x04	; 4
    3f86:	40 e0       	ldi	r20, 0x00	; 0
    3f88:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(KEYPAD_COL_PORT,KEYPAD_C3,DIO_INPUT);
    3f8c:	82 e0       	ldi	r24, 0x02	; 2
    3f8e:	65 e0       	ldi	r22, 0x05	; 5
    3f90:	40 e0       	ldi	r20, 0x00	; 0
    3f92:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <MDIO_voidSetPinDirection>
}
    3f96:	cf 91       	pop	r28
    3f98:	df 91       	pop	r29
    3f9a:	08 95       	ret

00003f9c <HKEYPAD_u8GetPressedKey>:
 * Description : value of keypad												*
 * Arguments   : void					 										*
 * return      : value of keypad												*
 *==============================================================================*/
u8 HKEYPAD_u8GetPressedKey (void)
{
    3f9c:	df 93       	push	r29
    3f9e:	cf 93       	push	r28
    3fa0:	cd b7       	in	r28, 0x3d	; 61
    3fa2:	de b7       	in	r29, 0x3e	; 62
    3fa4:	62 97       	sbiw	r28, 0x12	; 18
    3fa6:	0f b6       	in	r0, 0x3f	; 63
    3fa8:	f8 94       	cli
    3faa:	de bf       	out	0x3e, r29	; 62
    3fac:	0f be       	out	0x3f, r0	; 63
    3fae:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Reading = 0;
    3fb0:	1a 8a       	std	Y+18, r1	; 0x12
	u8 Local_u8Row = 0;
    3fb2:	19 8a       	std	Y+17, r1	; 0x11
	u8 Local_u8Col = 0;
    3fb4:	18 8a       	std	Y+16, r1	; 0x10

	u8 Local_value = RELEASED;
    3fb6:	81 e0       	ldi	r24, 0x01	; 1
    3fb8:	8f 87       	std	Y+15, r24	; 0x0f
	for (Local_u8Row = KEYPAD_R0 ; Local_u8Row <= KEYPAD_R3 ; Local_u8Row++)
    3fba:	84 e0       	ldi	r24, 0x04	; 4
    3fbc:	89 8b       	std	Y+17, r24	; 0x11
    3fbe:	b8 c0       	rjmp	.+368    	; 0x4130 <HKEYPAD_u8GetPressedKey+0x194>
	{
		MDIO_voidSetPinValue(KEYPAD_ROW_PORT,Local_u8Row,DIO_LOW);
    3fc0:	80 e0       	ldi	r24, 0x00	; 0
    3fc2:	69 89       	ldd	r22, Y+17	; 0x11
    3fc4:	40 e0       	ldi	r20, 0x00	; 0
    3fc6:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
		for (Local_u8Col = KEYPAD_C0 ; Local_u8Col <= KEYPAD_C3 ; Local_u8Col++)
    3fca:	82 e0       	ldi	r24, 0x02	; 2
    3fcc:	88 8b       	std	Y+16, r24	; 0x10
    3fce:	a4 c0       	rjmp	.+328    	; 0x4118 <HKEYPAD_u8GetPressedKey+0x17c>
		{
			Local_value = MDIO_u8GetPinValue(KEYPAD_COL_PORT,Local_u8Col);
    3fd0:	82 e0       	ldi	r24, 0x02	; 2
    3fd2:	68 89       	ldd	r22, Y+16	; 0x10
    3fd4:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <MDIO_u8GetPinValue>
    3fd8:	8f 87       	std	Y+15, r24	; 0x0f
			if(Local_value == PRESSED)
    3fda:	8f 85       	ldd	r24, Y+15	; 0x0f
    3fdc:	88 23       	and	r24, r24
    3fde:	09 f0       	breq	.+2      	; 0x3fe2 <HKEYPAD_u8GetPressedKey+0x46>
    3fe0:	98 c0       	rjmp	.+304    	; 0x4112 <HKEYPAD_u8GetPressedKey+0x176>
    3fe2:	80 e0       	ldi	r24, 0x00	; 0
    3fe4:	90 e0       	ldi	r25, 0x00	; 0
    3fe6:	a0 ef       	ldi	r26, 0xF0	; 240
    3fe8:	b2 e4       	ldi	r27, 0x42	; 66
    3fea:	8b 87       	std	Y+11, r24	; 0x0b
    3fec:	9c 87       	std	Y+12, r25	; 0x0c
    3fee:	ad 87       	std	Y+13, r26	; 0x0d
    3ff0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ff2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ff4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ff6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ff8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ffa:	20 e0       	ldi	r18, 0x00	; 0
    3ffc:	30 e0       	ldi	r19, 0x00	; 0
    3ffe:	4a ef       	ldi	r20, 0xFA	; 250
    4000:	54 e4       	ldi	r21, 0x44	; 68
    4002:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4006:	dc 01       	movw	r26, r24
    4008:	cb 01       	movw	r24, r22
    400a:	8f 83       	std	Y+7, r24	; 0x07
    400c:	98 87       	std	Y+8, r25	; 0x08
    400e:	a9 87       	std	Y+9, r26	; 0x09
    4010:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4012:	6f 81       	ldd	r22, Y+7	; 0x07
    4014:	78 85       	ldd	r23, Y+8	; 0x08
    4016:	89 85       	ldd	r24, Y+9	; 0x09
    4018:	9a 85       	ldd	r25, Y+10	; 0x0a
    401a:	20 e0       	ldi	r18, 0x00	; 0
    401c:	30 e0       	ldi	r19, 0x00	; 0
    401e:	40 e8       	ldi	r20, 0x80	; 128
    4020:	5f e3       	ldi	r21, 0x3F	; 63
    4022:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4026:	88 23       	and	r24, r24
    4028:	2c f4       	brge	.+10     	; 0x4034 <HKEYPAD_u8GetPressedKey+0x98>
		__ticks = 1;
    402a:	81 e0       	ldi	r24, 0x01	; 1
    402c:	90 e0       	ldi	r25, 0x00	; 0
    402e:	9e 83       	std	Y+6, r25	; 0x06
    4030:	8d 83       	std	Y+5, r24	; 0x05
    4032:	3f c0       	rjmp	.+126    	; 0x40b2 <HKEYPAD_u8GetPressedKey+0x116>
	else if (__tmp > 65535)
    4034:	6f 81       	ldd	r22, Y+7	; 0x07
    4036:	78 85       	ldd	r23, Y+8	; 0x08
    4038:	89 85       	ldd	r24, Y+9	; 0x09
    403a:	9a 85       	ldd	r25, Y+10	; 0x0a
    403c:	20 e0       	ldi	r18, 0x00	; 0
    403e:	3f ef       	ldi	r19, 0xFF	; 255
    4040:	4f e7       	ldi	r20, 0x7F	; 127
    4042:	57 e4       	ldi	r21, 0x47	; 71
    4044:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4048:	18 16       	cp	r1, r24
    404a:	4c f5       	brge	.+82     	; 0x409e <HKEYPAD_u8GetPressedKey+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    404c:	6b 85       	ldd	r22, Y+11	; 0x0b
    404e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4050:	8d 85       	ldd	r24, Y+13	; 0x0d
    4052:	9e 85       	ldd	r25, Y+14	; 0x0e
    4054:	20 e0       	ldi	r18, 0x00	; 0
    4056:	30 e0       	ldi	r19, 0x00	; 0
    4058:	40 e2       	ldi	r20, 0x20	; 32
    405a:	51 e4       	ldi	r21, 0x41	; 65
    405c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4060:	dc 01       	movw	r26, r24
    4062:	cb 01       	movw	r24, r22
    4064:	bc 01       	movw	r22, r24
    4066:	cd 01       	movw	r24, r26
    4068:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    406c:	dc 01       	movw	r26, r24
    406e:	cb 01       	movw	r24, r22
    4070:	9e 83       	std	Y+6, r25	; 0x06
    4072:	8d 83       	std	Y+5, r24	; 0x05
    4074:	0f c0       	rjmp	.+30     	; 0x4094 <HKEYPAD_u8GetPressedKey+0xf8>
    4076:	88 ec       	ldi	r24, 0xC8	; 200
    4078:	90 e0       	ldi	r25, 0x00	; 0
    407a:	9c 83       	std	Y+4, r25	; 0x04
    407c:	8b 83       	std	Y+3, r24	; 0x03
    407e:	8b 81       	ldd	r24, Y+3	; 0x03
    4080:	9c 81       	ldd	r25, Y+4	; 0x04
    4082:	01 97       	sbiw	r24, 0x01	; 1
    4084:	f1 f7       	brne	.-4      	; 0x4082 <HKEYPAD_u8GetPressedKey+0xe6>
    4086:	9c 83       	std	Y+4, r25	; 0x04
    4088:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    408a:	8d 81       	ldd	r24, Y+5	; 0x05
    408c:	9e 81       	ldd	r25, Y+6	; 0x06
    408e:	01 97       	sbiw	r24, 0x01	; 1
    4090:	9e 83       	std	Y+6, r25	; 0x06
    4092:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4094:	8d 81       	ldd	r24, Y+5	; 0x05
    4096:	9e 81       	ldd	r25, Y+6	; 0x06
    4098:	00 97       	sbiw	r24, 0x00	; 0
    409a:	69 f7       	brne	.-38     	; 0x4076 <HKEYPAD_u8GetPressedKey+0xda>
    409c:	14 c0       	rjmp	.+40     	; 0x40c6 <HKEYPAD_u8GetPressedKey+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    409e:	6f 81       	ldd	r22, Y+7	; 0x07
    40a0:	78 85       	ldd	r23, Y+8	; 0x08
    40a2:	89 85       	ldd	r24, Y+9	; 0x09
    40a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    40a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40aa:	dc 01       	movw	r26, r24
    40ac:	cb 01       	movw	r24, r22
    40ae:	9e 83       	std	Y+6, r25	; 0x06
    40b0:	8d 83       	std	Y+5, r24	; 0x05
    40b2:	8d 81       	ldd	r24, Y+5	; 0x05
    40b4:	9e 81       	ldd	r25, Y+6	; 0x06
    40b6:	9a 83       	std	Y+2, r25	; 0x02
    40b8:	89 83       	std	Y+1, r24	; 0x01
    40ba:	89 81       	ldd	r24, Y+1	; 0x01
    40bc:	9a 81       	ldd	r25, Y+2	; 0x02
    40be:	01 97       	sbiw	r24, 0x01	; 1
    40c0:	f1 f7       	brne	.-4      	; 0x40be <HKEYPAD_u8GetPressedKey+0x122>
    40c2:	9a 83       	std	Y+2, r25	; 0x02
    40c4:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(120);
				Local_value = MDIO_u8GetPinValue(KEYPAD_COL_PORT,Local_u8Col);
    40c6:	82 e0       	ldi	r24, 0x02	; 2
    40c8:	68 89       	ldd	r22, Y+16	; 0x10
    40ca:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <MDIO_u8GetPinValue>
    40ce:	8f 87       	std	Y+15, r24	; 0x0f
				if(Local_value == PRESSED)
    40d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    40d2:	88 23       	and	r24, r24
    40d4:	f1 f4       	brne	.+60     	; 0x4112 <HKEYPAD_u8GetPressedKey+0x176>
				{
					while(MDIO_u8GetPinValue(KEYPAD_COL_PORT,Local_u8Col) == PRESSED);
    40d6:	82 e0       	ldi	r24, 0x02	; 2
    40d8:	68 89       	ldd	r22, Y+16	; 0x10
    40da:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <MDIO_u8GetPinValue>
    40de:	88 23       	and	r24, r24
    40e0:	d1 f3       	breq	.-12     	; 0x40d6 <HKEYPAD_u8GetPressedKey+0x13a>
					Local_u8Reading = arr[Local_u8Row - KEYPAD_R0][Local_u8Col - KEYPAD_C0];
    40e2:	89 89       	ldd	r24, Y+17	; 0x11
    40e4:	88 2f       	mov	r24, r24
    40e6:	90 e0       	ldi	r25, 0x00	; 0
    40e8:	ac 01       	movw	r20, r24
    40ea:	44 50       	subi	r20, 0x04	; 4
    40ec:	50 40       	sbci	r21, 0x00	; 0
    40ee:	88 89       	ldd	r24, Y+16	; 0x10
    40f0:	88 2f       	mov	r24, r24
    40f2:	90 e0       	ldi	r25, 0x00	; 0
    40f4:	9c 01       	movw	r18, r24
    40f6:	22 50       	subi	r18, 0x02	; 2
    40f8:	30 40       	sbci	r19, 0x00	; 0
    40fa:	ca 01       	movw	r24, r20
    40fc:	88 0f       	add	r24, r24
    40fe:	99 1f       	adc	r25, r25
    4100:	88 0f       	add	r24, r24
    4102:	99 1f       	adc	r25, r25
    4104:	82 0f       	add	r24, r18
    4106:	93 1f       	adc	r25, r19
    4108:	fc 01       	movw	r30, r24
    410a:	e8 59       	subi	r30, 0x98	; 152
    410c:	ff 4f       	sbci	r31, 0xFF	; 255
    410e:	80 81       	ld	r24, Z
    4110:	8a 8b       	std	Y+18, r24	; 0x12

	u8 Local_value = RELEASED;
	for (Local_u8Row = KEYPAD_R0 ; Local_u8Row <= KEYPAD_R3 ; Local_u8Row++)
	{
		MDIO_voidSetPinValue(KEYPAD_ROW_PORT,Local_u8Row,DIO_LOW);
		for (Local_u8Col = KEYPAD_C0 ; Local_u8Col <= KEYPAD_C3 ; Local_u8Col++)
    4112:	88 89       	ldd	r24, Y+16	; 0x10
    4114:	8f 5f       	subi	r24, 0xFF	; 255
    4116:	88 8b       	std	Y+16, r24	; 0x10
    4118:	88 89       	ldd	r24, Y+16	; 0x10
    411a:	86 30       	cpi	r24, 0x06	; 6
    411c:	08 f4       	brcc	.+2      	; 0x4120 <HKEYPAD_u8GetPressedKey+0x184>
    411e:	58 cf       	rjmp	.-336    	; 0x3fd0 <HKEYPAD_u8GetPressedKey+0x34>
					while(MDIO_u8GetPinValue(KEYPAD_COL_PORT,Local_u8Col) == PRESSED);
					Local_u8Reading = arr[Local_u8Row - KEYPAD_R0][Local_u8Col - KEYPAD_C0];
				}
			}
		}
		MDIO_voidSetPinValue(KEYPAD_ROW_PORT,Local_u8Row,DIO_HIGH);
    4120:	80 e0       	ldi	r24, 0x00	; 0
    4122:	69 89       	ldd	r22, Y+17	; 0x11
    4124:	41 e0       	ldi	r20, 0x01	; 1
    4126:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
	u8 Local_u8Reading = 0;
	u8 Local_u8Row = 0;
	u8 Local_u8Col = 0;

	u8 Local_value = RELEASED;
	for (Local_u8Row = KEYPAD_R0 ; Local_u8Row <= KEYPAD_R3 ; Local_u8Row++)
    412a:	89 89       	ldd	r24, Y+17	; 0x11
    412c:	8f 5f       	subi	r24, 0xFF	; 255
    412e:	89 8b       	std	Y+17, r24	; 0x11
    4130:	89 89       	ldd	r24, Y+17	; 0x11
    4132:	88 30       	cpi	r24, 0x08	; 8
    4134:	08 f4       	brcc	.+2      	; 0x4138 <HKEYPAD_u8GetPressedKey+0x19c>
    4136:	44 cf       	rjmp	.-376    	; 0x3fc0 <HKEYPAD_u8GetPressedKey+0x24>
				}
			}
		}
		MDIO_voidSetPinValue(KEYPAD_ROW_PORT,Local_u8Row,DIO_HIGH);
	}
	return Local_u8Reading ;
    4138:	8a 89       	ldd	r24, Y+18	; 0x12
}
    413a:	62 96       	adiw	r28, 0x12	; 18
    413c:	0f b6       	in	r0, 0x3f	; 63
    413e:	f8 94       	cli
    4140:	de bf       	out	0x3e, r29	; 62
    4142:	0f be       	out	0x3f, r0	; 63
    4144:	cd bf       	out	0x3d, r28	; 61
    4146:	cf 91       	pop	r28
    4148:	df 91       	pop	r29
    414a:	08 95       	ret

0000414c <HDIP_u8GetPressedKey>:
 * Arguments   : PORT 																						  *
 * 				 PIN															 							  *
 * return      : SWITCH VALUE																			      *
 *============================================================================================================*/
u8 HDIP_u8GetPressedKey  (u8 Copy_u8PortId , u8 Copy_u8PinId)
{
    414c:	df 93       	push	r29
    414e:	cf 93       	push	r28
    4150:	00 d0       	rcall	.+0      	; 0x4152 <HDIP_u8GetPressedKey+0x6>
    4152:	0f 92       	push	r0
    4154:	cd b7       	in	r28, 0x3d	; 61
    4156:	de b7       	in	r29, 0x3e	; 62
    4158:	8a 83       	std	Y+2, r24	; 0x02
    415a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8VALUE = MDIO_u8GetPinValue( Copy_u8PortId , Copy_u8PinId);
    415c:	8a 81       	ldd	r24, Y+2	; 0x02
    415e:	6b 81       	ldd	r22, Y+3	; 0x03
    4160:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <MDIO_u8GetPinValue>
    4164:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8VALUE;
    4166:	89 81       	ldd	r24, Y+1	; 0x01
}
    4168:	0f 90       	pop	r0
    416a:	0f 90       	pop	r0
    416c:	0f 90       	pop	r0
    416e:	cf 91       	pop	r28
    4170:	df 91       	pop	r29
    4172:	08 95       	ret

00004174 <HDIP_u8GetPressedKeys>:
 * Arguments   : PORT 																						  *
 * 				 N. OF PINs															 						  *
 * return      : SWITCHS VALUE																			      *
 *============================================================================================================*/
u8 HDIP_u8GetPressedKeys (u8 Copy_u8PortId, u8 Copy_u8NumberOfPortPins)
{
    4174:	df 93       	push	r29
    4176:	cf 93       	push	r28
    4178:	00 d0       	rcall	.+0      	; 0x417a <HDIP_u8GetPressedKeys+0x6>
    417a:	0f 92       	push	r0
    417c:	cd b7       	in	r28, 0x3d	; 61
    417e:	de b7       	in	r29, 0x3e	; 62
    4180:	89 83       	std	Y+1, r24	; 0x01
    4182:	6a 83       	std	Y+2, r22	; 0x02
	/*         */ 
}
    4184:	0f 90       	pop	r0
    4186:	0f 90       	pop	r0
    4188:	0f 90       	pop	r0
    418a:	cf 91       	pop	r28
    418c:	df 91       	pop	r29
    418e:	08 95       	ret

00004190 <HDCMOTOR_voidRotateMotor>:
 * Description : Set DIRECTION OF DCMOTOR , RUN it																											         *
 * Arguments   : MotorPort, MotorPinNo1,MotorPinNo2, MotorDirection			 																						 *
 * return      : void																																				 *
 *===================================================================================================================================================================*/
void HDCMOTOR_voidRotateMotor (u8 Copy_u8MotorPort1, u8 Copy_u8MotorPinNo1,u8 Copy_u8MotorPort2, u8 Copy_u8MotorPinNo2, u8 Copy_u8MotorDirection)
{
    4190:	0f 93       	push	r16
    4192:	df 93       	push	r29
    4194:	cf 93       	push	r28
    4196:	cd b7       	in	r28, 0x3d	; 61
    4198:	de b7       	in	r29, 0x3e	; 62
    419a:	27 97       	sbiw	r28, 0x07	; 7
    419c:	0f b6       	in	r0, 0x3f	; 63
    419e:	f8 94       	cli
    41a0:	de bf       	out	0x3e, r29	; 62
    41a2:	0f be       	out	0x3f, r0	; 63
    41a4:	cd bf       	out	0x3d, r28	; 61
    41a6:	89 83       	std	Y+1, r24	; 0x01
    41a8:	6a 83       	std	Y+2, r22	; 0x02
    41aa:	4b 83       	std	Y+3, r20	; 0x03
    41ac:	2c 83       	std	Y+4, r18	; 0x04
    41ae:	0d 83       	std	Y+5, r16	; 0x05
	MDIO_voidSetPinDirection(Copy_u8MotorPort1,Copy_u8MotorPinNo1,DIO_OUTPUT);
    41b0:	89 81       	ldd	r24, Y+1	; 0x01
    41b2:	6a 81       	ldd	r22, Y+2	; 0x02
    41b4:	41 e0       	ldi	r20, 0x01	; 1
    41b6:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(Copy_u8MotorPort2,Copy_u8MotorPinNo2,DIO_OUTPUT);
    41ba:	8b 81       	ldd	r24, Y+3	; 0x03
    41bc:	6c 81       	ldd	r22, Y+4	; 0x04
    41be:	41 e0       	ldi	r20, 0x01	; 1
    41c0:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <MDIO_voidSetPinDirection>
	
	switch(Copy_u8MotorDirection)
    41c4:	8d 81       	ldd	r24, Y+5	; 0x05
    41c6:	28 2f       	mov	r18, r24
    41c8:	30 e0       	ldi	r19, 0x00	; 0
    41ca:	3f 83       	std	Y+7, r19	; 0x07
    41cc:	2e 83       	std	Y+6, r18	; 0x06
    41ce:	8e 81       	ldd	r24, Y+6	; 0x06
    41d0:	9f 81       	ldd	r25, Y+7	; 0x07
    41d2:	00 97       	sbiw	r24, 0x00	; 0
    41d4:	31 f0       	breq	.+12     	; 0x41e2 <HDCMOTOR_voidRotateMotor+0x52>
    41d6:	2e 81       	ldd	r18, Y+6	; 0x06
    41d8:	3f 81       	ldd	r19, Y+7	; 0x07
    41da:	21 30       	cpi	r18, 0x01	; 1
    41dc:	31 05       	cpc	r19, r1
    41de:	61 f0       	breq	.+24     	; 0x41f8 <HDCMOTOR_voidRotateMotor+0x68>
    41e0:	15 c0       	rjmp	.+42     	; 0x420c <HDCMOTOR_voidRotateMotor+0x7c>
	{
		case CLOCKWISE:
		MDIO_voidSetPinValue(Copy_u8MotorPort1,Copy_u8MotorPinNo1,DIO_HIGH);
    41e2:	89 81       	ldd	r24, Y+1	; 0x01
    41e4:	6a 81       	ldd	r22, Y+2	; 0x02
    41e6:	41 e0       	ldi	r20, 0x01	; 1
    41e8:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(Copy_u8MotorPort2,Copy_u8MotorPinNo2,DIO_LOW);
    41ec:	8b 81       	ldd	r24, Y+3	; 0x03
    41ee:	6c 81       	ldd	r22, Y+4	; 0x04
    41f0:	40 e0       	ldi	r20, 0x00	; 0
    41f2:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
    41f6:	0a c0       	rjmp	.+20     	; 0x420c <HDCMOTOR_voidRotateMotor+0x7c>
		break;
		case COUNTERCLOCKWISE:
		MDIO_voidSetPinValue(Copy_u8MotorPort1,Copy_u8MotorPinNo1,DIO_LOW);
    41f8:	89 81       	ldd	r24, Y+1	; 0x01
    41fa:	6a 81       	ldd	r22, Y+2	; 0x02
    41fc:	40 e0       	ldi	r20, 0x00	; 0
    41fe:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(Copy_u8MotorPort2,Copy_u8MotorPinNo2,DIO_HIGH);
    4202:	8b 81       	ldd	r24, Y+3	; 0x03
    4204:	6c 81       	ldd	r22, Y+4	; 0x04
    4206:	41 e0       	ldi	r20, 0x01	; 1
    4208:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
		break;
		default :
		
		break;	
	}	
}
    420c:	27 96       	adiw	r28, 0x07	; 7
    420e:	0f b6       	in	r0, 0x3f	; 63
    4210:	f8 94       	cli
    4212:	de bf       	out	0x3e, r29	; 62
    4214:	0f be       	out	0x3f, r0	; 63
    4216:	cd bf       	out	0x3d, r28	; 61
    4218:	cf 91       	pop	r28
    421a:	df 91       	pop	r29
    421c:	0f 91       	pop	r16
    421e:	08 95       	ret

00004220 <main>:



void main (void)
{
    4220:	df 93       	push	r29
    4222:	cf 93       	push	r28
    4224:	cd b7       	in	r28, 0x3d	; 61
    4226:	de b7       	in	r29, 0x3e	; 62
    4228:	ff cf       	rjmp	.-2      	; 0x4228 <main+0x8>

0000422a <__mulsi3>:
    422a:	62 9f       	mul	r22, r18
    422c:	d0 01       	movw	r26, r0
    422e:	73 9f       	mul	r23, r19
    4230:	f0 01       	movw	r30, r0
    4232:	82 9f       	mul	r24, r18
    4234:	e0 0d       	add	r30, r0
    4236:	f1 1d       	adc	r31, r1
    4238:	64 9f       	mul	r22, r20
    423a:	e0 0d       	add	r30, r0
    423c:	f1 1d       	adc	r31, r1
    423e:	92 9f       	mul	r25, r18
    4240:	f0 0d       	add	r31, r0
    4242:	83 9f       	mul	r24, r19
    4244:	f0 0d       	add	r31, r0
    4246:	74 9f       	mul	r23, r20
    4248:	f0 0d       	add	r31, r0
    424a:	65 9f       	mul	r22, r21
    424c:	f0 0d       	add	r31, r0
    424e:	99 27       	eor	r25, r25
    4250:	72 9f       	mul	r23, r18
    4252:	b0 0d       	add	r27, r0
    4254:	e1 1d       	adc	r30, r1
    4256:	f9 1f       	adc	r31, r25
    4258:	63 9f       	mul	r22, r19
    425a:	b0 0d       	add	r27, r0
    425c:	e1 1d       	adc	r30, r1
    425e:	f9 1f       	adc	r31, r25
    4260:	bd 01       	movw	r22, r26
    4262:	cf 01       	movw	r24, r30
    4264:	11 24       	eor	r1, r1
    4266:	08 95       	ret

00004268 <__udivmodsi4>:
    4268:	a1 e2       	ldi	r26, 0x21	; 33
    426a:	1a 2e       	mov	r1, r26
    426c:	aa 1b       	sub	r26, r26
    426e:	bb 1b       	sub	r27, r27
    4270:	fd 01       	movw	r30, r26
    4272:	0d c0       	rjmp	.+26     	; 0x428e <__udivmodsi4_ep>

00004274 <__udivmodsi4_loop>:
    4274:	aa 1f       	adc	r26, r26
    4276:	bb 1f       	adc	r27, r27
    4278:	ee 1f       	adc	r30, r30
    427a:	ff 1f       	adc	r31, r31
    427c:	a2 17       	cp	r26, r18
    427e:	b3 07       	cpc	r27, r19
    4280:	e4 07       	cpc	r30, r20
    4282:	f5 07       	cpc	r31, r21
    4284:	20 f0       	brcs	.+8      	; 0x428e <__udivmodsi4_ep>
    4286:	a2 1b       	sub	r26, r18
    4288:	b3 0b       	sbc	r27, r19
    428a:	e4 0b       	sbc	r30, r20
    428c:	f5 0b       	sbc	r31, r21

0000428e <__udivmodsi4_ep>:
    428e:	66 1f       	adc	r22, r22
    4290:	77 1f       	adc	r23, r23
    4292:	88 1f       	adc	r24, r24
    4294:	99 1f       	adc	r25, r25
    4296:	1a 94       	dec	r1
    4298:	69 f7       	brne	.-38     	; 0x4274 <__udivmodsi4_loop>
    429a:	60 95       	com	r22
    429c:	70 95       	com	r23
    429e:	80 95       	com	r24
    42a0:	90 95       	com	r25
    42a2:	9b 01       	movw	r18, r22
    42a4:	ac 01       	movw	r20, r24
    42a6:	bd 01       	movw	r22, r26
    42a8:	cf 01       	movw	r24, r30
    42aa:	08 95       	ret

000042ac <__divmodsi4>:
    42ac:	97 fb       	bst	r25, 7
    42ae:	09 2e       	mov	r0, r25
    42b0:	05 26       	eor	r0, r21
    42b2:	0e d0       	rcall	.+28     	; 0x42d0 <__divmodsi4_neg1>
    42b4:	57 fd       	sbrc	r21, 7
    42b6:	04 d0       	rcall	.+8      	; 0x42c0 <__divmodsi4_neg2>
    42b8:	d7 df       	rcall	.-82     	; 0x4268 <__udivmodsi4>
    42ba:	0a d0       	rcall	.+20     	; 0x42d0 <__divmodsi4_neg1>
    42bc:	00 1c       	adc	r0, r0
    42be:	38 f4       	brcc	.+14     	; 0x42ce <__divmodsi4_exit>

000042c0 <__divmodsi4_neg2>:
    42c0:	50 95       	com	r21
    42c2:	40 95       	com	r20
    42c4:	30 95       	com	r19
    42c6:	21 95       	neg	r18
    42c8:	3f 4f       	sbci	r19, 0xFF	; 255
    42ca:	4f 4f       	sbci	r20, 0xFF	; 255
    42cc:	5f 4f       	sbci	r21, 0xFF	; 255

000042ce <__divmodsi4_exit>:
    42ce:	08 95       	ret

000042d0 <__divmodsi4_neg1>:
    42d0:	f6 f7       	brtc	.-4      	; 0x42ce <__divmodsi4_exit>
    42d2:	90 95       	com	r25
    42d4:	80 95       	com	r24
    42d6:	70 95       	com	r23
    42d8:	61 95       	neg	r22
    42da:	7f 4f       	sbci	r23, 0xFF	; 255
    42dc:	8f 4f       	sbci	r24, 0xFF	; 255
    42de:	9f 4f       	sbci	r25, 0xFF	; 255
    42e0:	08 95       	ret

000042e2 <__prologue_saves__>:
    42e2:	2f 92       	push	r2
    42e4:	3f 92       	push	r3
    42e6:	4f 92       	push	r4
    42e8:	5f 92       	push	r5
    42ea:	6f 92       	push	r6
    42ec:	7f 92       	push	r7
    42ee:	8f 92       	push	r8
    42f0:	9f 92       	push	r9
    42f2:	af 92       	push	r10
    42f4:	bf 92       	push	r11
    42f6:	cf 92       	push	r12
    42f8:	df 92       	push	r13
    42fa:	ef 92       	push	r14
    42fc:	ff 92       	push	r15
    42fe:	0f 93       	push	r16
    4300:	1f 93       	push	r17
    4302:	cf 93       	push	r28
    4304:	df 93       	push	r29
    4306:	cd b7       	in	r28, 0x3d	; 61
    4308:	de b7       	in	r29, 0x3e	; 62
    430a:	ca 1b       	sub	r28, r26
    430c:	db 0b       	sbc	r29, r27
    430e:	0f b6       	in	r0, 0x3f	; 63
    4310:	f8 94       	cli
    4312:	de bf       	out	0x3e, r29	; 62
    4314:	0f be       	out	0x3f, r0	; 63
    4316:	cd bf       	out	0x3d, r28	; 61
    4318:	09 94       	ijmp

0000431a <__epilogue_restores__>:
    431a:	2a 88       	ldd	r2, Y+18	; 0x12
    431c:	39 88       	ldd	r3, Y+17	; 0x11
    431e:	48 88       	ldd	r4, Y+16	; 0x10
    4320:	5f 84       	ldd	r5, Y+15	; 0x0f
    4322:	6e 84       	ldd	r6, Y+14	; 0x0e
    4324:	7d 84       	ldd	r7, Y+13	; 0x0d
    4326:	8c 84       	ldd	r8, Y+12	; 0x0c
    4328:	9b 84       	ldd	r9, Y+11	; 0x0b
    432a:	aa 84       	ldd	r10, Y+10	; 0x0a
    432c:	b9 84       	ldd	r11, Y+9	; 0x09
    432e:	c8 84       	ldd	r12, Y+8	; 0x08
    4330:	df 80       	ldd	r13, Y+7	; 0x07
    4332:	ee 80       	ldd	r14, Y+6	; 0x06
    4334:	fd 80       	ldd	r15, Y+5	; 0x05
    4336:	0c 81       	ldd	r16, Y+4	; 0x04
    4338:	1b 81       	ldd	r17, Y+3	; 0x03
    433a:	aa 81       	ldd	r26, Y+2	; 0x02
    433c:	b9 81       	ldd	r27, Y+1	; 0x01
    433e:	ce 0f       	add	r28, r30
    4340:	d1 1d       	adc	r29, r1
    4342:	0f b6       	in	r0, 0x3f	; 63
    4344:	f8 94       	cli
    4346:	de bf       	out	0x3e, r29	; 62
    4348:	0f be       	out	0x3f, r0	; 63
    434a:	cd bf       	out	0x3d, r28	; 61
    434c:	ed 01       	movw	r28, r26
    434e:	08 95       	ret

00004350 <_exit>:
    4350:	f8 94       	cli

00004352 <__stop_program>:
    4352:	ff cf       	rjmp	.-2      	; 0x4352 <__stop_program>
