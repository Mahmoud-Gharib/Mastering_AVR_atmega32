
AVR_Communication_Protocols.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002688  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00002688  0000271c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800078  00800078  00002734  2**0
                  ALLOC
  3 .debug_aranges 00000370  00000000  00000000  00002734  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000006d7  00000000  00000000  00002aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002b8d  00000000  00000000  0000317b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000143b  00000000  00000000  00005d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000027e9  00000000  00000000  00007143  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004e0  00000000  00000000  0000992c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009c1  00000000  00000000  00009e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007ce  00000000  00000000  0000a7cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 00008e19  00000000  00000000  0000af9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000248  00000000  00000000  00013db4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 f6 07 	jmp	0xfec	; 0xfec <__vector_12>
      34:	0c 94 fb 06 	jmp	0xdf6	; 0xdf6 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 28 07 	jmp	0xe50	; 0xe50 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e8       	ldi	r30, 0x88	; 136
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 37       	cpi	r26, 0x7E	; 126
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 32 12 	call	0x2464	; 0x2464 <main>
      8a:	0c 94 42 13 	jmp	0x2684	; 0x2684 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0b 13 	jmp	0x2616	; 0x2616 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 27 13 	jmp	0x264e	; 0x264e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 17 13 	jmp	0x262e	; 0x262e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 33 13 	jmp	0x2666	; 0x2666 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 17 13 	jmp	0x262e	; 0x262e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 33 13 	jmp	0x2666	; 0x2666 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0b 13 	jmp	0x2616	; 0x2616 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 27 13 	jmp	0x264e	; 0x264e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 17 13 	jmp	0x262e	; 0x262e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 33 13 	jmp	0x2666	; 0x2666 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 17 13 	jmp	0x262e	; 0x262e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 33 13 	jmp	0x2666	; 0x2666 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 17 13 	jmp	0x262e	; 0x262e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 33 13 	jmp	0x2666	; 0x2666 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 1b 13 	jmp	0x2636	; 0x2636 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 37 13 	jmp	0x266e	; 0x266e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MUART_voidInit>:
 * Description : Set initialization of UART										*
 * Arguments   : void			 												*
 * return      : void															*
 *==============================================================================*/
void MUART_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8UCSRC = 0b10000000;
     b50:	80 e8       	ldi	r24, 0x80	; 128
     b52:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_u8UCSRC,2);
#elif CHARACTER_SIZE == 7
	CLR_BIT(Local_u8UCSRC,1);
	SET_BIT(Local_u8UCSRC,2);
#elif CHARACTER_SIZE == 8
	SET_BIT(Local_u8UCSRC,1);
     b54:	89 81       	ldd	r24, Y+1	; 0x01
     b56:	82 60       	ori	r24, 0x02	; 2
     b58:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8UCSRC,2);
     b5a:	89 81       	ldd	r24, Y+1	; 0x01
     b5c:	84 60       	ori	r24, 0x04	; 4
     b5e:	89 83       	std	Y+1, r24	; 0x01
#endif


#if STOP_BITS == 1
	CLR_BIT(Local_u8UCSRC,3);
     b60:	89 81       	ldd	r24, Y+1	; 0x01
     b62:	87 7f       	andi	r24, 0xF7	; 247
     b64:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8UCSRC,3);
#endif


#if PARITY_CHECK  == NON
	CLR_BIT(Local_u8UCSRC,4);
     b66:	89 81       	ldd	r24, Y+1	; 0x01
     b68:	8f 7e       	andi	r24, 0xEF	; 239
     b6a:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_u8UCSRC,5);
     b6c:	89 81       	ldd	r24, Y+1	; 0x01
     b6e:	8f 7d       	andi	r24, 0xDF	; 223
     b70:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_u8UCSRC,4);
	SET_BIT(Local_u8UCSRC,5);
#endif

	// ASYNCHRONOUS
	CLR_BIT(Local_u8UCSRC , 6);
     b72:	89 81       	ldd	r24, Y+1	; 0x01
     b74:	8f 7b       	andi	r24, 0xBF	; 191
     b76:	89 83       	std	Y+1, r24	; 0x01

	UCSRC = Local_u8UCSRC;
     b78:	e0 e4       	ldi	r30, 0x40	; 64
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	89 81       	ldd	r24, Y+1	; 0x01
     b7e:	80 83       	st	Z, r24

#if   BUAD_RATE   == 9600
	UBRRL = 51;
     b80:	e9 e2       	ldi	r30, 0x29	; 41
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	83 e3       	ldi	r24, 0x33	; 51
     b86:	80 83       	st	Z, r24
#elif BUAD_RATE   == 115200
	UBRRL = 3;
#endif

	// ENABLE TX , RX
	SET_BIT(UCSRB, 3);
     b88:	aa e2       	ldi	r26, 0x2A	; 42
     b8a:	b0 e0       	ldi	r27, 0x00	; 0
     b8c:	ea e2       	ldi	r30, 0x2A	; 42
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	80 81       	ld	r24, Z
     b92:	88 60       	ori	r24, 0x08	; 8
     b94:	8c 93       	st	X, r24
	SET_BIT(UCSRB, 4);
     b96:	aa e2       	ldi	r26, 0x2A	; 42
     b98:	b0 e0       	ldi	r27, 0x00	; 0
     b9a:	ea e2       	ldi	r30, 0x2A	; 42
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	80 81       	ld	r24, Z
     ba0:	80 61       	ori	r24, 0x10	; 16
     ba2:	8c 93       	st	X, r24
}
     ba4:	0f 90       	pop	r0
     ba6:	cf 91       	pop	r28
     ba8:	df 91       	pop	r29
     baa:	08 95       	ret

00000bac <MUART_voidSendData>:
 * Description : Send Data														*
 * Arguments   : Copy_u8Data			 										*
 * return      : void														    *
 *==============================================================================*/
void MUART_voidSendData(u8 Copy_u8Data)
{
     bac:	df 93       	push	r29
     bae:	cf 93       	push	r28
     bb0:	0f 92       	push	r0
     bb2:	cd b7       	in	r28, 0x3d	; 61
     bb4:	de b7       	in	r29, 0x3e	; 62
     bb6:	89 83       	std	Y+1, r24	; 0x01
	UDR = Copy_u8Data;
     bb8:	ec e2       	ldi	r30, 0x2C	; 44
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	89 81       	ldd	r24, Y+1	; 0x01
     bbe:	80 83       	st	Z, r24
	while( GET_BIT(UCSRA , 5) == 0);
     bc0:	eb e2       	ldi	r30, 0x2B	; 43
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	80 81       	ld	r24, Z
     bc6:	82 95       	swap	r24
     bc8:	86 95       	lsr	r24
     bca:	87 70       	andi	r24, 0x07	; 7
     bcc:	88 2f       	mov	r24, r24
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	81 70       	andi	r24, 0x01	; 1
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	00 97       	sbiw	r24, 0x00	; 0
     bd6:	a1 f3       	breq	.-24     	; 0xbc0 <MUART_voidSendData+0x14>
}
     bd8:	0f 90       	pop	r0
     bda:	cf 91       	pop	r28
     bdc:	df 91       	pop	r29
     bde:	08 95       	ret

00000be0 <MUART_u8ReciveData>:
 * Description : Receive Data													*
 * Arguments   : void															*
 * return      : Value of UDR													*
 *==============================================================================*/
u8   MUART_u8ReciveData(void)
{
     be0:	df 93       	push	r29
     be2:	cf 93       	push	r28
     be4:	cd b7       	in	r28, 0x3d	; 61
     be6:	de b7       	in	r29, 0x3e	; 62
	while( GET_BIT( UCSRA , 7 ) == 0);
     be8:	eb e2       	ldi	r30, 0x2B	; 43
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	80 81       	ld	r24, Z
     bee:	88 23       	and	r24, r24
     bf0:	dc f7       	brge	.-10     	; 0xbe8 <MUART_u8ReciveData+0x8>
	return UDR;
     bf2:	ec e2       	ldi	r30, 0x2C	; 44
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	80 81       	ld	r24, Z
}
     bf8:	cf 91       	pop	r28
     bfa:	df 91       	pop	r29
     bfc:	08 95       	ret

00000bfe <MUART_voidSendString>:


void MUART_voidSendString(u8 *Ptr_u8PtrString)
{
     bfe:	df 93       	push	r29
     c00:	cf 93       	push	r28
     c02:	00 d0       	rcall	.+0      	; 0xc04 <MUART_voidSendString+0x6>
     c04:	0f 92       	push	r0
     c06:	cd b7       	in	r28, 0x3d	; 61
     c08:	de b7       	in	r29, 0x3e	; 62
     c0a:	9b 83       	std	Y+3, r25	; 0x03
     c0c:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
     c0e:	19 82       	std	Y+1, r1	; 0x01
     c10:	0e c0       	rjmp	.+28     	; 0xc2e <MUART_voidSendString+0x30>
	while(Ptr_u8PtrString[i] != '\0')
	{
		MUART_voidSendData(Ptr_u8PtrString[i]);
     c12:	89 81       	ldd	r24, Y+1	; 0x01
     c14:	28 2f       	mov	r18, r24
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	9b 81       	ldd	r25, Y+3	; 0x03
     c1c:	fc 01       	movw	r30, r24
     c1e:	e2 0f       	add	r30, r18
     c20:	f3 1f       	adc	r31, r19
     c22:	80 81       	ld	r24, Z
     c24:	0e 94 d6 05 	call	0xbac	; 0xbac <MUART_voidSendData>
		i++;
     c28:	89 81       	ldd	r24, Y+1	; 0x01
     c2a:	8f 5f       	subi	r24, 0xFF	; 255
     c2c:	89 83       	std	Y+1, r24	; 0x01


void MUART_voidSendString(u8 *Ptr_u8PtrString)
{
	u8 i = 0;
	while(Ptr_u8PtrString[i] != '\0')
     c2e:	89 81       	ldd	r24, Y+1	; 0x01
     c30:	28 2f       	mov	r18, r24
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	8a 81       	ldd	r24, Y+2	; 0x02
     c36:	9b 81       	ldd	r25, Y+3	; 0x03
     c38:	fc 01       	movw	r30, r24
     c3a:	e2 0f       	add	r30, r18
     c3c:	f3 1f       	adc	r31, r19
     c3e:	80 81       	ld	r24, Z
     c40:	88 23       	and	r24, r24
     c42:	39 f7       	brne	.-50     	; 0xc12 <MUART_voidSendString+0x14>
	{
		MUART_voidSendData(Ptr_u8PtrString[i]);
		i++;
	}
}
     c44:	0f 90       	pop	r0
     c46:	0f 90       	pop	r0
     c48:	0f 90       	pop	r0
     c4a:	cf 91       	pop	r28
     c4c:	df 91       	pop	r29
     c4e:	08 95       	ret

00000c50 <MUART_voidReciveString>:

void MUART_voidReciveString(u8 *Ptr_u8PtrString)
{
     c50:	0f 93       	push	r16
     c52:	1f 93       	push	r17
     c54:	df 93       	push	r29
     c56:	cf 93       	push	r28
     c58:	00 d0       	rcall	.+0      	; 0xc5a <MUART_voidReciveString+0xa>
     c5a:	0f 92       	push	r0
     c5c:	cd b7       	in	r28, 0x3d	; 61
     c5e:	de b7       	in	r29, 0x3e	; 62
     c60:	9b 83       	std	Y+3, r25	; 0x03
     c62:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
     c64:	19 82       	std	Y+1, r1	; 0x01
	Ptr_u8PtrString[i] =  MUART_u8ReciveData();
     c66:	89 81       	ldd	r24, Y+1	; 0x01
     c68:	28 2f       	mov	r18, r24
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	8a 81       	ldd	r24, Y+2	; 0x02
     c6e:	9b 81       	ldd	r25, Y+3	; 0x03
     c70:	8c 01       	movw	r16, r24
     c72:	02 0f       	add	r16, r18
     c74:	13 1f       	adc	r17, r19
     c76:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <MUART_u8ReciveData>
     c7a:	f8 01       	movw	r30, r16
     c7c:	80 83       	st	Z, r24
     c7e:	0f c0       	rjmp	.+30     	; 0xc9e <MUART_voidReciveString+0x4e>
	while(Ptr_u8PtrString[i] != '#')
	{
		i++;
     c80:	89 81       	ldd	r24, Y+1	; 0x01
     c82:	8f 5f       	subi	r24, 0xFF	; 255
     c84:	89 83       	std	Y+1, r24	; 0x01
		Ptr_u8PtrString[i] =  MUART_u8ReciveData();
     c86:	89 81       	ldd	r24, Y+1	; 0x01
     c88:	28 2f       	mov	r18, r24
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	8a 81       	ldd	r24, Y+2	; 0x02
     c8e:	9b 81       	ldd	r25, Y+3	; 0x03
     c90:	8c 01       	movw	r16, r24
     c92:	02 0f       	add	r16, r18
     c94:	13 1f       	adc	r17, r19
     c96:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <MUART_u8ReciveData>
     c9a:	f8 01       	movw	r30, r16
     c9c:	80 83       	st	Z, r24

void MUART_voidReciveString(u8 *Ptr_u8PtrString)
{
	u8 i = 0;
	Ptr_u8PtrString[i] =  MUART_u8ReciveData();
	while(Ptr_u8PtrString[i] != '#')
     c9e:	89 81       	ldd	r24, Y+1	; 0x01
     ca0:	28 2f       	mov	r18, r24
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	8a 81       	ldd	r24, Y+2	; 0x02
     ca6:	9b 81       	ldd	r25, Y+3	; 0x03
     ca8:	fc 01       	movw	r30, r24
     caa:	e2 0f       	add	r30, r18
     cac:	f3 1f       	adc	r31, r19
     cae:	80 81       	ld	r24, Z
     cb0:	83 32       	cpi	r24, 0x23	; 35
     cb2:	31 f7       	brne	.-52     	; 0xc80 <MUART_voidReciveString+0x30>
	{
		i++;
		Ptr_u8PtrString[i] =  MUART_u8ReciveData();
	}
	Ptr_u8PtrString[i] = '\0';
     cb4:	89 81       	ldd	r24, Y+1	; 0x01
     cb6:	28 2f       	mov	r18, r24
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	8a 81       	ldd	r24, Y+2	; 0x02
     cbc:	9b 81       	ldd	r25, Y+3	; 0x03
     cbe:	fc 01       	movw	r30, r24
     cc0:	e2 0f       	add	r30, r18
     cc2:	f3 1f       	adc	r31, r19
     cc4:	10 82       	st	Z, r1
}
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	0f 90       	pop	r0
     ccc:	cf 91       	pop	r28
     cce:	df 91       	pop	r29
     cd0:	1f 91       	pop	r17
     cd2:	0f 91       	pop	r16
     cd4:	08 95       	ret

00000cd6 <UART_voidIntEnable>:



void UART_voidIntEnable(u8 Copy_u8INT_ID)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	00 d0       	rcall	.+0      	; 0xcdc <UART_voidIntEnable+0x6>
     cdc:	0f 92       	push	r0
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
     ce2:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(SREG,7);
     ce4:	af e5       	ldi	r26, 0x5F	; 95
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	ef e5       	ldi	r30, 0x5F	; 95
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	80 68       	ori	r24, 0x80	; 128
     cf0:	8c 93       	st	X, r24
	switch(Copy_u8INT_ID)
     cf2:	89 81       	ldd	r24, Y+1	; 0x01
     cf4:	28 2f       	mov	r18, r24
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	3b 83       	std	Y+3, r19	; 0x03
     cfa:	2a 83       	std	Y+2, r18	; 0x02
     cfc:	8a 81       	ldd	r24, Y+2	; 0x02
     cfe:	9b 81       	ldd	r25, Y+3	; 0x03
     d00:	00 97       	sbiw	r24, 0x00	; 0
     d02:	31 f0       	breq	.+12     	; 0xd10 <UART_voidIntEnable+0x3a>
     d04:	2a 81       	ldd	r18, Y+2	; 0x02
     d06:	3b 81       	ldd	r19, Y+3	; 0x03
     d08:	21 30       	cpi	r18, 0x01	; 1
     d0a:	31 05       	cpc	r19, r1
     d0c:	49 f0       	breq	.+18     	; 0xd20 <UART_voidIntEnable+0x4a>
     d0e:	0f c0       	rjmp	.+30     	; 0xd2e <UART_voidIntEnable+0x58>
	{
	case UART_TX:
		SET_BIT(UCSRB, 6);
     d10:	aa e2       	ldi	r26, 0x2A	; 42
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	ea e2       	ldi	r30, 0x2A	; 42
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	80 64       	ori	r24, 0x40	; 64
     d1c:	8c 93       	st	X, r24
     d1e:	07 c0       	rjmp	.+14     	; 0xd2e <UART_voidIntEnable+0x58>
		break;
	case UART_RX:
		SET_BIT(UCSRB, 7);
     d20:	aa e2       	ldi	r26, 0x2A	; 42
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	ea e2       	ldi	r30, 0x2A	; 42
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	80 68       	ori	r24, 0x80	; 128
     d2c:	8c 93       	st	X, r24
		break;
	default :
		break;
	}
}
     d2e:	0f 90       	pop	r0
     d30:	0f 90       	pop	r0
     d32:	0f 90       	pop	r0
     d34:	cf 91       	pop	r28
     d36:	df 91       	pop	r29
     d38:	08 95       	ret

00000d3a <UART_voidIntDisable>:

void UART_voidIntDisable(u8 Copy_u8INT_ID)
{
     d3a:	df 93       	push	r29
     d3c:	cf 93       	push	r28
     d3e:	00 d0       	rcall	.+0      	; 0xd40 <UART_voidIntDisable+0x6>
     d40:	0f 92       	push	r0
     d42:	cd b7       	in	r28, 0x3d	; 61
     d44:	de b7       	in	r29, 0x3e	; 62
     d46:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8INT_ID)
     d48:	89 81       	ldd	r24, Y+1	; 0x01
     d4a:	28 2f       	mov	r18, r24
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	3b 83       	std	Y+3, r19	; 0x03
     d50:	2a 83       	std	Y+2, r18	; 0x02
     d52:	8a 81       	ldd	r24, Y+2	; 0x02
     d54:	9b 81       	ldd	r25, Y+3	; 0x03
     d56:	00 97       	sbiw	r24, 0x00	; 0
     d58:	31 f0       	breq	.+12     	; 0xd66 <UART_voidIntDisable+0x2c>
     d5a:	2a 81       	ldd	r18, Y+2	; 0x02
     d5c:	3b 81       	ldd	r19, Y+3	; 0x03
     d5e:	21 30       	cpi	r18, 0x01	; 1
     d60:	31 05       	cpc	r19, r1
     d62:	49 f0       	breq	.+18     	; 0xd76 <UART_voidIntDisable+0x3c>
     d64:	0f c0       	rjmp	.+30     	; 0xd84 <UART_voidIntDisable+0x4a>
	{
	case UART_TX:
		CLR_BIT(UCSRB, 6);
     d66:	aa e2       	ldi	r26, 0x2A	; 42
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	ea e2       	ldi	r30, 0x2A	; 42
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	8f 7b       	andi	r24, 0xBF	; 191
     d72:	8c 93       	st	X, r24
     d74:	07 c0       	rjmp	.+14     	; 0xd84 <UART_voidIntDisable+0x4a>
		break;
	case UART_RX:
		CLR_BIT(UCSRB, 7);
     d76:	aa e2       	ldi	r26, 0x2A	; 42
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	ea e2       	ldi	r30, 0x2A	; 42
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	8f 77       	andi	r24, 0x7F	; 127
     d82:	8c 93       	st	X, r24
		break;
	default :
		break;
	}
}
     d84:	0f 90       	pop	r0
     d86:	0f 90       	pop	r0
     d88:	0f 90       	pop	r0
     d8a:	cf 91       	pop	r28
     d8c:	df 91       	pop	r29
     d8e:	08 95       	ret

00000d90 <MUART_voidAsyncSendData>:

void MUART_voidAsyncSendData(u8 Copy_u8Data)
{
     d90:	df 93       	push	r29
     d92:	cf 93       	push	r28
     d94:	0f 92       	push	r0
     d96:	cd b7       	in	r28, 0x3d	; 61
     d98:	de b7       	in	r29, 0x3e	; 62
     d9a:	89 83       	std	Y+1, r24	; 0x01
	UDR = Copy_u8Data;
     d9c:	ec e2       	ldi	r30, 0x2C	; 44
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	89 81       	ldd	r24, Y+1	; 0x01
     da2:	80 83       	st	Z, r24
}
     da4:	0f 90       	pop	r0
     da6:	cf 91       	pop	r28
     da8:	df 91       	pop	r29
     daa:	08 95       	ret

00000dac <MUART_u8AsyncReciveData>:


u8   MUART_u8AsyncReciveData(void)
{
     dac:	df 93       	push	r29
     dae:	cf 93       	push	r28
     db0:	cd b7       	in	r28, 0x3d	; 61
     db2:	de b7       	in	r29, 0x3e	; 62
	return UDR;
     db4:	ec e2       	ldi	r30, 0x2C	; 44
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
}
     dba:	cf 91       	pop	r28
     dbc:	df 91       	pop	r29
     dbe:	08 95       	ret

00000dc0 <UART_voidSetCallBack>:

void	(*UART_pvCallBackFunc[2])(void);

void UART_voidSetCallBack(u8 Copy_u8INT_ID,void (*Copy_pvCallBackFunc)(void))
{
     dc0:	df 93       	push	r29
     dc2:	cf 93       	push	r28
     dc4:	00 d0       	rcall	.+0      	; 0xdc6 <UART_voidSetCallBack+0x6>
     dc6:	0f 92       	push	r0
     dc8:	cd b7       	in	r28, 0x3d	; 61
     dca:	de b7       	in	r29, 0x3e	; 62
     dcc:	89 83       	std	Y+1, r24	; 0x01
     dce:	7b 83       	std	Y+3, r23	; 0x03
     dd0:	6a 83       	std	Y+2, r22	; 0x02
	UART_pvCallBackFunc[Copy_u8INT_ID] = Copy_pvCallBackFunc;
     dd2:	89 81       	ldd	r24, Y+1	; 0x01
     dd4:	88 2f       	mov	r24, r24
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	88 0f       	add	r24, r24
     dda:	99 1f       	adc	r25, r25
     ddc:	fc 01       	movw	r30, r24
     dde:	e8 58       	subi	r30, 0x88	; 136
     de0:	ff 4f       	sbci	r31, 0xFF	; 255
     de2:	8a 81       	ldd	r24, Y+2	; 0x02
     de4:	9b 81       	ldd	r25, Y+3	; 0x03
     de6:	91 83       	std	Z+1, r25	; 0x01
     de8:	80 83       	st	Z, r24
}
     dea:	0f 90       	pop	r0
     dec:	0f 90       	pop	r0
     dee:	0f 90       	pop	r0
     df0:	cf 91       	pop	r28
     df2:	df 91       	pop	r29
     df4:	08 95       	ret

00000df6 <__vector_13>:


void __vector_13 (void)	__attribute__((signal));
void __vector_13 (void)
{
     df6:	1f 92       	push	r1
     df8:	0f 92       	push	r0
     dfa:	0f b6       	in	r0, 0x3f	; 63
     dfc:	0f 92       	push	r0
     dfe:	11 24       	eor	r1, r1
     e00:	2f 93       	push	r18
     e02:	3f 93       	push	r19
     e04:	4f 93       	push	r20
     e06:	5f 93       	push	r21
     e08:	6f 93       	push	r22
     e0a:	7f 93       	push	r23
     e0c:	8f 93       	push	r24
     e0e:	9f 93       	push	r25
     e10:	af 93       	push	r26
     e12:	bf 93       	push	r27
     e14:	ef 93       	push	r30
     e16:	ff 93       	push	r31
     e18:	df 93       	push	r29
     e1a:	cf 93       	push	r28
     e1c:	cd b7       	in	r28, 0x3d	; 61
     e1e:	de b7       	in	r29, 0x3e	; 62
	UART_pvCallBackFunc[UART_RX]();
     e20:	e0 91 7a 00 	lds	r30, 0x007A
     e24:	f0 91 7b 00 	lds	r31, 0x007B
     e28:	09 95       	icall
}
     e2a:	cf 91       	pop	r28
     e2c:	df 91       	pop	r29
     e2e:	ff 91       	pop	r31
     e30:	ef 91       	pop	r30
     e32:	bf 91       	pop	r27
     e34:	af 91       	pop	r26
     e36:	9f 91       	pop	r25
     e38:	8f 91       	pop	r24
     e3a:	7f 91       	pop	r23
     e3c:	6f 91       	pop	r22
     e3e:	5f 91       	pop	r21
     e40:	4f 91       	pop	r20
     e42:	3f 91       	pop	r19
     e44:	2f 91       	pop	r18
     e46:	0f 90       	pop	r0
     e48:	0f be       	out	0x3f, r0	; 63
     e4a:	0f 90       	pop	r0
     e4c:	1f 90       	pop	r1
     e4e:	18 95       	reti

00000e50 <__vector_15>:

void __vector_15 (void)	__attribute__((signal));
void __vector_15 (void)
{
     e50:	1f 92       	push	r1
     e52:	0f 92       	push	r0
     e54:	0f b6       	in	r0, 0x3f	; 63
     e56:	0f 92       	push	r0
     e58:	11 24       	eor	r1, r1
     e5a:	2f 93       	push	r18
     e5c:	3f 93       	push	r19
     e5e:	4f 93       	push	r20
     e60:	5f 93       	push	r21
     e62:	6f 93       	push	r22
     e64:	7f 93       	push	r23
     e66:	8f 93       	push	r24
     e68:	9f 93       	push	r25
     e6a:	af 93       	push	r26
     e6c:	bf 93       	push	r27
     e6e:	ef 93       	push	r30
     e70:	ff 93       	push	r31
     e72:	df 93       	push	r29
     e74:	cf 93       	push	r28
     e76:	cd b7       	in	r28, 0x3d	; 61
     e78:	de b7       	in	r29, 0x3e	; 62
	UART_pvCallBackFunc[UART_TX]();
     e7a:	e0 91 78 00 	lds	r30, 0x0078
     e7e:	f0 91 79 00 	lds	r31, 0x0079
     e82:	09 95       	icall
}
     e84:	cf 91       	pop	r28
     e86:	df 91       	pop	r29
     e88:	ff 91       	pop	r31
     e8a:	ef 91       	pop	r30
     e8c:	bf 91       	pop	r27
     e8e:	af 91       	pop	r26
     e90:	9f 91       	pop	r25
     e92:	8f 91       	pop	r24
     e94:	7f 91       	pop	r23
     e96:	6f 91       	pop	r22
     e98:	5f 91       	pop	r21
     e9a:	4f 91       	pop	r20
     e9c:	3f 91       	pop	r19
     e9e:	2f 91       	pop	r18
     ea0:	0f 90       	pop	r0
     ea2:	0f be       	out	0x3f, r0	; 63
     ea4:	0f 90       	pop	r0
     ea6:	1f 90       	pop	r1
     ea8:	18 95       	reti

00000eaa <MSPI_voidInit>:
 * Description : Set initialization of SPI										*
 * Arguments   : void			 												*
 * return      : void															*
 *==============================================================================*/
void MSPI_voidInit(void)
{
     eaa:	df 93       	push	r29
     eac:	cf 93       	push	r28
     eae:	cd b7       	in	r28, 0x3d	; 61
     eb0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SPCR,5);                      //SENT FROM LSB FIRST
     eb2:	ad e2       	ldi	r26, 0x2D	; 45
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	ed e2       	ldi	r30, 0x2D	; 45
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	80 62       	ori	r24, 0x20	; 32
     ebe:	8c 93       	st	X, r24
	SET_BIT(SPCR,0);					  //PRESCALER /128
	SET_BIT(SPCR,1);
	CLR_BIT(SPSR,0);                      // Clear SPI2X

#elif   SPI_MODE == SLAVE
	CLR_BIT(SPCR,4);                      //Set MSTR to Slave Mode
     ec0:	ad e2       	ldi	r26, 0x2D	; 45
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	ed e2       	ldi	r30, 0x2D	; 45
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	8f 7e       	andi	r24, 0xEF	; 239
     ecc:	8c 93       	st	X, r24
#endif

	SET_BIT(SPCR,6);					  //ENABLE SPI
     ece:	ad e2       	ldi	r26, 0x2D	; 45
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	ed e2       	ldi	r30, 0x2D	; 45
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	80 64       	ori	r24, 0x40	; 64
     eda:	8c 93       	st	X, r24
}
     edc:	cf 91       	pop	r28
     ede:	df 91       	pop	r29
     ee0:	08 95       	ret

00000ee2 <MSPI_voidSendData>:
 * Description : Send Data														*
 * Arguments   : Copy_u8Data			 										*
 * return      : void														    *
 *==============================================================================*/
void MSPI_voidSendData(u8 Copy_u8Data)
{
     ee2:	df 93       	push	r29
     ee4:	cf 93       	push	r28
     ee6:	0f 92       	push	r0
     ee8:	cd b7       	in	r28, 0x3d	; 61
     eea:	de b7       	in	r29, 0x3e	; 62
     eec:	89 83       	std	Y+1, r24	; 0x01
	SPDR = Copy_u8Data;
     eee:	ef e2       	ldi	r30, 0x2F	; 47
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	89 81       	ldd	r24, Y+1	; 0x01
     ef4:	80 83       	st	Z, r24
	while(GET_BIT(SPSR,7) == 0);   // Check if Transmission is Complete
     ef6:	ee e2       	ldi	r30, 0x2E	; 46
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	88 23       	and	r24, r24
     efe:	dc f7       	brge	.-10     	; 0xef6 <MSPI_voidSendData+0x14>
}
     f00:	0f 90       	pop	r0
     f02:	cf 91       	pop	r28
     f04:	df 91       	pop	r29
     f06:	08 95       	ret

00000f08 <MSPI_u8ReciveData>:
 * Description : Receive Data													*
 * Arguments   : void															*
 * return      : Value of SPDR													*
 *==============================================================================*/
u8   MSPI_u8ReciveData(void)
{
     f08:	df 93       	push	r29
     f0a:	cf 93       	push	r28
     f0c:	cd b7       	in	r28, 0x3d	; 61
     f0e:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(SPSR,7) == 0);   // Check if Transmission is Complete
     f10:	ee e2       	ldi	r30, 0x2E	; 46
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	88 23       	and	r24, r24
     f18:	dc f7       	brge	.-10     	; 0xf10 <MSPI_u8ReciveData+0x8>
	return SPDR;
     f1a:	ef e2       	ldi	r30, 0x2F	; 47
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
}
     f20:	cf 91       	pop	r28
     f22:	df 91       	pop	r29
     f24:	08 95       	ret

00000f26 <MSPI_u8SendReciveData>:
 * Description : Send and Receive Data											*
 * Arguments   : Copy_u8Data													*
 * return      : Value of SPDR													*
 *==============================================================================*/
u8   MSPI_u8SendReciveData(u8 Copy_u8Data)
{
     f26:	df 93       	push	r29
     f28:	cf 93       	push	r28
     f2a:	0f 92       	push	r0
     f2c:	cd b7       	in	r28, 0x3d	; 61
     f2e:	de b7       	in	r29, 0x3e	; 62
     f30:	89 83       	std	Y+1, r24	; 0x01
	SPDR = Copy_u8Data;
     f32:	ef e2       	ldi	r30, 0x2F	; 47
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	89 81       	ldd	r24, Y+1	; 0x01
     f38:	80 83       	st	Z, r24
	while(GET_BIT(SPSR,7) == 0);   // Check if Transmission is Complete
     f3a:	ee e2       	ldi	r30, 0x2E	; 46
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	88 23       	and	r24, r24
     f42:	dc f7       	brge	.-10     	; 0xf3a <MSPI_u8SendReciveData+0x14>
	return SPDR;
     f44:	ef e2       	ldi	r30, 0x2F	; 47
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
}
     f4a:	0f 90       	pop	r0
     f4c:	cf 91       	pop	r28
     f4e:	df 91       	pop	r29
     f50:	08 95       	ret

00000f52 <MSPI_voidIntEnable>:




void MSPI_voidIntEnable(void)
{
     f52:	df 93       	push	r29
     f54:	cf 93       	push	r28
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
     f5a:	af e5       	ldi	r26, 0x5F	; 95
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	ef e5       	ldi	r30, 0x5F	; 95
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	80 68       	ori	r24, 0x80	; 128
     f66:	8c 93       	st	X, r24
	SET_BIT(SPCR, 7);
     f68:	ad e2       	ldi	r26, 0x2D	; 45
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	ed e2       	ldi	r30, 0x2D	; 45
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	80 68       	ori	r24, 0x80	; 128
     f74:	8c 93       	st	X, r24
}
     f76:	cf 91       	pop	r28
     f78:	df 91       	pop	r29
     f7a:	08 95       	ret

00000f7c <MSPI_voidIntDisable>:

void MSPI_voidIntDisable(void)
{
     f7c:	df 93       	push	r29
     f7e:	cf 93       	push	r28
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SPCR, 7);
     f84:	ad e2       	ldi	r26, 0x2D	; 45
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	ed e2       	ldi	r30, 0x2D	; 45
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	8f 77       	andi	r24, 0x7F	; 127
     f90:	8c 93       	st	X, r24
}
     f92:	cf 91       	pop	r28
     f94:	df 91       	pop	r29
     f96:	08 95       	ret

00000f98 <MSPI_voidAsyncSendData>:

void MSPI_voidAsyncSendData(u8 Copy_u8Data)
{
     f98:	df 93       	push	r29
     f9a:	cf 93       	push	r28
     f9c:	0f 92       	push	r0
     f9e:	cd b7       	in	r28, 0x3d	; 61
     fa0:	de b7       	in	r29, 0x3e	; 62
     fa2:	89 83       	std	Y+1, r24	; 0x01
	SPDR = Copy_u8Data;
     fa4:	ef e2       	ldi	r30, 0x2F	; 47
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	80 83       	st	Z, r24
}
     fac:	0f 90       	pop	r0
     fae:	cf 91       	pop	r28
     fb0:	df 91       	pop	r29
     fb2:	08 95       	ret

00000fb4 <MSPI_u8AsyncReciveData>:

u8   MSPI_u8AsyncReciveData(void)
{
     fb4:	df 93       	push	r29
     fb6:	cf 93       	push	r28
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
	return SPDR;
     fbc:	ef e2       	ldi	r30, 0x2F	; 47
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
}
     fc2:	cf 91       	pop	r28
     fc4:	df 91       	pop	r29
     fc6:	08 95       	ret

00000fc8 <MSPI_voidSetCallBack>:


void	(*SPI_pvCallBackFunc)(void);

void MSPI_voidSetCallBack(void (*Copy_pvCallBackFunc)(void))
{
     fc8:	df 93       	push	r29
     fca:	cf 93       	push	r28
     fcc:	00 d0       	rcall	.+0      	; 0xfce <MSPI_voidSetCallBack+0x6>
     fce:	cd b7       	in	r28, 0x3d	; 61
     fd0:	de b7       	in	r29, 0x3e	; 62
     fd2:	9a 83       	std	Y+2, r25	; 0x02
     fd4:	89 83       	std	Y+1, r24	; 0x01
	SPI_pvCallBackFunc = Copy_pvCallBackFunc;
     fd6:	89 81       	ldd	r24, Y+1	; 0x01
     fd8:	9a 81       	ldd	r25, Y+2	; 0x02
     fda:	90 93 7d 00 	sts	0x007D, r25
     fde:	80 93 7c 00 	sts	0x007C, r24
}
     fe2:	0f 90       	pop	r0
     fe4:	0f 90       	pop	r0
     fe6:	cf 91       	pop	r28
     fe8:	df 91       	pop	r29
     fea:	08 95       	ret

00000fec <__vector_12>:

void __vector_12 (void)   __attribute__((signal));
void __vector_12 (void)
{
     fec:	1f 92       	push	r1
     fee:	0f 92       	push	r0
     ff0:	0f b6       	in	r0, 0x3f	; 63
     ff2:	0f 92       	push	r0
     ff4:	11 24       	eor	r1, r1
     ff6:	2f 93       	push	r18
     ff8:	3f 93       	push	r19
     ffa:	4f 93       	push	r20
     ffc:	5f 93       	push	r21
     ffe:	6f 93       	push	r22
    1000:	7f 93       	push	r23
    1002:	8f 93       	push	r24
    1004:	9f 93       	push	r25
    1006:	af 93       	push	r26
    1008:	bf 93       	push	r27
    100a:	ef 93       	push	r30
    100c:	ff 93       	push	r31
    100e:	df 93       	push	r29
    1010:	cf 93       	push	r28
    1012:	cd b7       	in	r28, 0x3d	; 61
    1014:	de b7       	in	r29, 0x3e	; 62
	SPI_pvCallBackFunc();
    1016:	e0 91 7c 00 	lds	r30, 0x007C
    101a:	f0 91 7d 00 	lds	r31, 0x007D
    101e:	09 95       	icall
}
    1020:	cf 91       	pop	r28
    1022:	df 91       	pop	r29
    1024:	ff 91       	pop	r31
    1026:	ef 91       	pop	r30
    1028:	bf 91       	pop	r27
    102a:	af 91       	pop	r26
    102c:	9f 91       	pop	r25
    102e:	8f 91       	pop	r24
    1030:	7f 91       	pop	r23
    1032:	6f 91       	pop	r22
    1034:	5f 91       	pop	r21
    1036:	4f 91       	pop	r20
    1038:	3f 91       	pop	r19
    103a:	2f 91       	pop	r18
    103c:	0f 90       	pop	r0
    103e:	0f be       	out	0x3f, r0	; 63
    1040:	0f 90       	pop	r0
    1042:	1f 90       	pop	r1
    1044:	18 95       	reti

00001046 <MI2C_voidInit>:
#include "I2C_CONFIG.h"
#include "I2C_PRIVATE.h"
#include "I2C_INTERFACE.h"

void MI2C_voidInit(void)
{
    1046:	df 93       	push	r29
    1048:	cf 93       	push	r28
    104a:	cd b7       	in	r28, 0x3d	; 61
    104c:	de b7       	in	r29, 0x3e	; 62
	TWBR = 0x02;
    104e:	e0 e2       	ldi	r30, 0x20	; 32
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	82 e0       	ldi	r24, 0x02	; 2
    1054:	80 83       	st	Z, r24
	CLR_BIT(TWSR , 0);
    1056:	a1 e2       	ldi	r26, 0x21	; 33
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	e1 e2       	ldi	r30, 0x21	; 33
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	8e 7f       	andi	r24, 0xFE	; 254
    1062:	8c 93       	st	X, r24
	CLR_BIT(TWSR , 1);
    1064:	a1 e2       	ldi	r26, 0x21	; 33
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	e1 e2       	ldi	r30, 0x21	; 33
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	8d 7f       	andi	r24, 0xFD	; 253
    1070:	8c 93       	st	X, r24
	SET_BIT(TWCR , 6);
    1072:	a6 e5       	ldi	r26, 0x56	; 86
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	e6 e5       	ldi	r30, 0x56	; 86
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	80 64       	ori	r24, 0x40	; 64
    107e:	8c 93       	st	X, r24
	SET_BIT(TWCR , 2);
    1080:	a6 e5       	ldi	r26, 0x56	; 86
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	e6 e5       	ldi	r30, 0x56	; 86
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	84 60       	ori	r24, 0x04	; 4
    108c:	8c 93       	st	X, r24
}
    108e:	cf 91       	pop	r28
    1090:	df 91       	pop	r29
    1092:	08 95       	ret

00001094 <MI2C_SendStartCondition>:
void MI2C_SendStartCondition(void)
{
    1094:	df 93       	push	r29
    1096:	cf 93       	push	r28
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << 7) | (1 << 5) | (1 << 2);
    109c:	e6 e5       	ldi	r30, 0x56	; 86
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	84 ea       	ldi	r24, 0xA4	; 164
    10a2:	80 83       	st	Z, r24
	while(GET_BIT(TWCR,7)==0);
    10a4:	e6 e5       	ldi	r30, 0x56	; 86
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	88 23       	and	r24, r24
    10ac:	dc f7       	brge	.-10     	; 0x10a4 <MI2C_SendStartCondition+0x10>
}
    10ae:	cf 91       	pop	r28
    10b0:	df 91       	pop	r29
    10b2:	08 95       	ret

000010b4 <MI2C_SendRepeatedStartCondition>:
void MI2C_SendRepeatedStartCondition(void)
{
    10b4:	df 93       	push	r29
    10b6:	cf 93       	push	r28
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << 7) | (1 << 5) | (1 << 2);
    10bc:	e6 e5       	ldi	r30, 0x56	; 86
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	84 ea       	ldi	r24, 0xA4	; 164
    10c2:	80 83       	st	Z, r24
	while(GET_BIT(TWCR,7)==0);
    10c4:	e6 e5       	ldi	r30, 0x56	; 86
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	88 23       	and	r24, r24
    10cc:	dc f7       	brge	.-10     	; 0x10c4 <MI2C_SendRepeatedStartCondition+0x10>
}
    10ce:	cf 91       	pop	r28
    10d0:	df 91       	pop	r29
    10d2:	08 95       	ret

000010d4 <MI2C_SendStopCondition>:
void MI2C_SendStopCondition(void)
{
    10d4:	df 93       	push	r29
    10d6:	cf 93       	push	r28
    10d8:	cd b7       	in	r28, 0x3d	; 61
    10da:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR , 4);
    10dc:	a6 e5       	ldi	r26, 0x56	; 86
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	e6 e5       	ldi	r30, 0x56	; 86
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	80 61       	ori	r24, 0x10	; 16
    10e8:	8c 93       	st	X, r24
	SET_BIT(TWCR , 7);
    10ea:	a6 e5       	ldi	r26, 0x56	; 86
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	e6 e5       	ldi	r30, 0x56	; 86
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	80 68       	ori	r24, 0x80	; 128
    10f6:	8c 93       	st	X, r24
	SET_BIT(TWCR , 2);
    10f8:	a6 e5       	ldi	r26, 0x56	; 86
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	e6 e5       	ldi	r30, 0x56	; 86
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	84 60       	ori	r24, 0x04	; 4
    1104:	8c 93       	st	X, r24
}
    1106:	cf 91       	pop	r28
    1108:	df 91       	pop	r29
    110a:	08 95       	ret

0000110c <MI2C_SendSlaveAddressWithWrite>:

void MI2C_SendSlaveAddressWithWrite(u8 Copy_u8SlaveAddress)
{
    110c:	df 93       	push	r29
    110e:	cf 93       	push	r28
    1110:	0f 92       	push	r0
    1112:	cd b7       	in	r28, 0x3d	; 61
    1114:	de b7       	in	r29, 0x3e	; 62
    1116:	89 83       	std	Y+1, r24	; 0x01
	TWDR = (Copy_u8SlaveAddress);
    1118:	e3 e2       	ldi	r30, 0x23	; 35
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	89 81       	ldd	r24, Y+1	; 0x01
    111e:	80 83       	st	Z, r24
	CLR_BIT(TWDR , 0);
    1120:	a3 e2       	ldi	r26, 0x23	; 35
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	e3 e2       	ldi	r30, 0x23	; 35
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	8e 7f       	andi	r24, 0xFE	; 254
    112c:	8c 93       	st	X, r24
	SET_BIT(TWCR , 7);
    112e:	a6 e5       	ldi	r26, 0x56	; 86
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	e6 e5       	ldi	r30, 0x56	; 86
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	80 68       	ori	r24, 0x80	; 128
    113a:	8c 93       	st	X, r24
	while(GET_BIT(TWCR , 7) == 0);
    113c:	e6 e5       	ldi	r30, 0x56	; 86
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	88 23       	and	r24, r24
    1144:	dc f7       	brge	.-10     	; 0x113c <MI2C_SendSlaveAddressWithWrite+0x30>
}
    1146:	0f 90       	pop	r0
    1148:	cf 91       	pop	r28
    114a:	df 91       	pop	r29
    114c:	08 95       	ret

0000114e <MI2C_SendSlaveAddressWithRead>:
void MI2C_SendSlaveAddressWithRead(u8 Copy_u8SlaveAddress)
{
    114e:	df 93       	push	r29
    1150:	cf 93       	push	r28
    1152:	0f 92       	push	r0
    1154:	cd b7       	in	r28, 0x3d	; 61
    1156:	de b7       	in	r29, 0x3e	; 62
    1158:	89 83       	std	Y+1, r24	; 0x01
	TWDR = (Copy_u8SlaveAddress);
    115a:	e3 e2       	ldi	r30, 0x23	; 35
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	89 81       	ldd	r24, Y+1	; 0x01
    1160:	80 83       	st	Z, r24
	SET_BIT(TWDR , 0);
    1162:	a3 e2       	ldi	r26, 0x23	; 35
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	e3 e2       	ldi	r30, 0x23	; 35
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	81 60       	ori	r24, 0x01	; 1
    116e:	8c 93       	st	X, r24
	SET_BIT(TWCR , 7);
    1170:	a6 e5       	ldi	r26, 0x56	; 86
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	e6 e5       	ldi	r30, 0x56	; 86
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	80 68       	ori	r24, 0x80	; 128
    117c:	8c 93       	st	X, r24
	while(GET_BIT(TWCR , 7) == 0);
    117e:	e6 e5       	ldi	r30, 0x56	; 86
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	88 23       	and	r24, r24
    1186:	dc f7       	brge	.-10     	; 0x117e <MI2C_SendSlaveAddressWithRead+0x30>
}
    1188:	0f 90       	pop	r0
    118a:	cf 91       	pop	r28
    118c:	df 91       	pop	r29
    118e:	08 95       	ret

00001190 <MI2C_MasterWriteDataByte>:

void MI2C_MasterWriteDataByte(u8 Copy_u8DataByte)
{
    1190:	df 93       	push	r29
    1192:	cf 93       	push	r28
    1194:	0f 92       	push	r0
    1196:	cd b7       	in	r28, 0x3d	; 61
    1198:	de b7       	in	r29, 0x3e	; 62
    119a:	89 83       	std	Y+1, r24	; 0x01
	TWDR = Copy_u8DataByte;
    119c:	e3 e2       	ldi	r30, 0x23	; 35
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	89 81       	ldd	r24, Y+1	; 0x01
    11a2:	80 83       	st	Z, r24
	TWCR = (1 << 7) | (1 << 2);
    11a4:	e6 e5       	ldi	r30, 0x56	; 86
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	84 e8       	ldi	r24, 0x84	; 132
    11aa:	80 83       	st	Z, r24
	while(GET_BIT(TWCR,7)==0);
    11ac:	e6 e5       	ldi	r30, 0x56	; 86
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	88 23       	and	r24, r24
    11b4:	dc f7       	brge	.-10     	; 0x11ac <MI2C_MasterWriteDataByte+0x1c>
}
    11b6:	0f 90       	pop	r0
    11b8:	cf 91       	pop	r28
    11ba:	df 91       	pop	r29
    11bc:	08 95       	ret

000011be <MI2C_MasterReadDataByte>:
u8 MI2C_MasterReadDataByte(void)
{
    11be:	df 93       	push	r29
    11c0:	cf 93       	push	r28
    11c2:	cd b7       	in	r28, 0x3d	; 61
    11c4:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << 7) | (1 << 2) ;
    11c6:	e6 e5       	ldi	r30, 0x56	; 86
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	84 e8       	ldi	r24, 0x84	; 132
    11cc:	80 83       	st	Z, r24
	while(GET_BIT(TWCR,7)==0);
    11ce:	e6 e5       	ldi	r30, 0x56	; 86
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	88 23       	and	r24, r24
    11d6:	dc f7       	brge	.-10     	; 0x11ce <MI2C_MasterReadDataByte+0x10>
	return TWDR;
    11d8:	e3 e2       	ldi	r30, 0x23	; 35
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
}
    11de:	cf 91       	pop	r28
    11e0:	df 91       	pop	r29
    11e2:	08 95       	ret

000011e4 <EEPROM_voidInit>:

void EEPROM_voidInit(void)
{
    11e4:	df 93       	push	r29
    11e6:	cf 93       	push	r28
    11e8:	cd b7       	in	r28, 0x3d	; 61
    11ea:	de b7       	in	r29, 0x3e	; 62
	MI2C_voidInit();
    11ec:	0e 94 23 08 	call	0x1046	; 0x1046 <MI2C_voidInit>
}
    11f0:	cf 91       	pop	r28
    11f2:	df 91       	pop	r29
    11f4:	08 95       	ret

000011f6 <EEPROM_voidWrite_Byte>:
void EEPROM_voidWrite_Byte(u8 Copy_u8AddressSlave ,u8 Copy_u8AddressLocation,u8 Copy_u8Data)
{
    11f6:	df 93       	push	r29
    11f8:	cf 93       	push	r28
    11fa:	00 d0       	rcall	.+0      	; 0x11fc <EEPROM_voidWrite_Byte+0x6>
    11fc:	0f 92       	push	r0
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
    1202:	89 83       	std	Y+1, r24	; 0x01
    1204:	6a 83       	std	Y+2, r22	; 0x02
    1206:	4b 83       	std	Y+3, r20	; 0x03
	MI2C_SendStartCondition();
    1208:	0e 94 4a 08 	call	0x1094	; 0x1094 <MI2C_SendStartCondition>
	//write the device address and so we need to get A2 A1 A0 address bits and R/W=0 (write)
	//I2C_voidMasterWriteDataByte(Copy_u8AddressSlave);   // 1010 A2 A1 A0  W
	MI2C_SendSlaveAddressWithWrite(Copy_u8AddressSlave);
    120c:	89 81       	ldd	r24, Y+1	; 0x01
    120e:	0e 94 86 08 	call	0x110c	; 0x110c <MI2C_SendSlaveAddressWithWrite>

	//send the required location address
	MI2C_MasterWriteDataByte(Copy_u8AddressLocation);  // 0000 0000
    1212:	8a 81       	ldd	r24, Y+2	; 0x02
    1214:	0e 94 c8 08 	call	0x1190	; 0x1190 <MI2C_MasterWriteDataByte>

	//write byte to eeprom
	MI2C_MasterWriteDataByte(Copy_u8Data);
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	0e 94 c8 08 	call	0x1190	; 0x1190 <MI2C_MasterWriteDataByte>

	MI2C_SendStopCondition();
    121e:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <MI2C_SendStopCondition>
}
    1222:	0f 90       	pop	r0
    1224:	0f 90       	pop	r0
    1226:	0f 90       	pop	r0
    1228:	cf 91       	pop	r28
    122a:	df 91       	pop	r29
    122c:	08 95       	ret

0000122e <EEPROM_u8Read_Byte>:
void EEPROM_u8Read_Byte(u8 Copy_u8AddressSlave ,u8 Copy_u8AddressLocation, u8 *Copy_u8Data)
{
    122e:	df 93       	push	r29
    1230:	cf 93       	push	r28
    1232:	00 d0       	rcall	.+0      	; 0x1234 <EEPROM_u8Read_Byte+0x6>
    1234:	00 d0       	rcall	.+0      	; 0x1236 <EEPROM_u8Read_Byte+0x8>
    1236:	cd b7       	in	r28, 0x3d	; 61
    1238:	de b7       	in	r29, 0x3e	; 62
    123a:	89 83       	std	Y+1, r24	; 0x01
    123c:	6a 83       	std	Y+2, r22	; 0x02
    123e:	5c 83       	std	Y+4, r21	; 0x04
    1240:	4b 83       	std	Y+3, r20	; 0x03

	MI2C_SendStartCondition();
    1242:	0e 94 4a 08 	call	0x1094	; 0x1094 <MI2C_SendStartCondition>

	//write the device address and so we need to get A2 A1 A0 address bits and R/W=0 (write)
	MI2C_SendSlaveAddressWithWrite(Copy_u8AddressSlave);  //1010 A2 A1 A0 W  // 1010 0000
    1246:	89 81       	ldd	r24, Y+1	; 0x01
    1248:	0e 94 86 08 	call	0x110c	; 0x110c <MI2C_SendSlaveAddressWithWrite>

	//send the required location address
	MI2C_MasterWriteDataByte(Copy_u8AddressLocation); // 0000 0000
    124c:	8a 81       	ldd	r24, Y+2	; 0x02
    124e:	0e 94 c8 08 	call	0x1190	; 0x1190 <MI2C_MasterWriteDataByte>

	//send a repeated start
	MI2C_SendRepeatedStartCondition();                 // REPEATED START
    1252:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <MI2C_SendRepeatedStartCondition>

	//write the device address and so we need to get A2 A1 A0 address bits and R/W=1 (Read)
	//SET_BIT(Copy_u8AddressSlave,0);                  //
	//I2C_voidMasterWriteDataByte(Copy_u8AddressSlave);   //1010 0001
	MI2C_SendSlaveAddressWithRead(Copy_u8AddressSlave);
    1256:	89 81       	ldd	r24, Y+1	; 0x01
    1258:	0e 94 a7 08 	call	0x114e	; 0x114e <MI2C_SendSlaveAddressWithRead>

	 *Copy_u8Data = MI2C_MasterReadDataByte();  //NACK
    125c:	0e 94 df 08 	call	0x11be	; 0x11be <MI2C_MasterReadDataByte>
    1260:	eb 81       	ldd	r30, Y+3	; 0x03
    1262:	fc 81       	ldd	r31, Y+4	; 0x04
    1264:	80 83       	st	Z, r24

	MI2C_SendStopCondition();
    1266:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <MI2C_SendStopCondition>
}
    126a:	0f 90       	pop	r0
    126c:	0f 90       	pop	r0
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	cf 91       	pop	r28
    1274:	df 91       	pop	r29
    1276:	08 95       	ret

00001278 <MDIO_voidSetPinDirection>:
 * 				 PIN															 							  *
 *               Direction : takes INPUT or OUTPUT															  *
 * return      : void																					      *
 *============================================================================================================*/
void MDIO_voidSetPinDirection (u8 Copy_u8PortId, u8 Copy_u8PinId ,u8 Copy_u8PinDirection)
{
    1278:	df 93       	push	r29
    127a:	cf 93       	push	r28
    127c:	00 d0       	rcall	.+0      	; 0x127e <MDIO_voidSetPinDirection+0x6>
    127e:	00 d0       	rcall	.+0      	; 0x1280 <MDIO_voidSetPinDirection+0x8>
    1280:	0f 92       	push	r0
    1282:	cd b7       	in	r28, 0x3d	; 61
    1284:	de b7       	in	r29, 0x3e	; 62
    1286:	89 83       	std	Y+1, r24	; 0x01
    1288:	6a 83       	std	Y+2, r22	; 0x02
    128a:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8PortId)
    128c:	89 81       	ldd	r24, Y+1	; 0x01
    128e:	28 2f       	mov	r18, r24
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	3d 83       	std	Y+5, r19	; 0x05
    1294:	2c 83       	std	Y+4, r18	; 0x04
    1296:	8c 81       	ldd	r24, Y+4	; 0x04
    1298:	9d 81       	ldd	r25, Y+5	; 0x05
    129a:	81 30       	cpi	r24, 0x01	; 1
    129c:	91 05       	cpc	r25, r1
    129e:	09 f4       	brne	.+2      	; 0x12a2 <MDIO_voidSetPinDirection+0x2a>
    12a0:	47 c0       	rjmp	.+142    	; 0x1330 <MDIO_voidSetPinDirection+0xb8>
    12a2:	2c 81       	ldd	r18, Y+4	; 0x04
    12a4:	3d 81       	ldd	r19, Y+5	; 0x05
    12a6:	22 30       	cpi	r18, 0x02	; 2
    12a8:	31 05       	cpc	r19, r1
    12aa:	2c f4       	brge	.+10     	; 0x12b6 <MDIO_voidSetPinDirection+0x3e>
    12ac:	8c 81       	ldd	r24, Y+4	; 0x04
    12ae:	9d 81       	ldd	r25, Y+5	; 0x05
    12b0:	00 97       	sbiw	r24, 0x00	; 0
    12b2:	71 f0       	breq	.+28     	; 0x12d0 <MDIO_voidSetPinDirection+0x58>
    12b4:	cb c0       	rjmp	.+406    	; 0x144c <MDIO_voidSetPinDirection+0x1d4>
    12b6:	2c 81       	ldd	r18, Y+4	; 0x04
    12b8:	3d 81       	ldd	r19, Y+5	; 0x05
    12ba:	22 30       	cpi	r18, 0x02	; 2
    12bc:	31 05       	cpc	r19, r1
    12be:	09 f4       	brne	.+2      	; 0x12c2 <MDIO_voidSetPinDirection+0x4a>
    12c0:	67 c0       	rjmp	.+206    	; 0x1390 <MDIO_voidSetPinDirection+0x118>
    12c2:	8c 81       	ldd	r24, Y+4	; 0x04
    12c4:	9d 81       	ldd	r25, Y+5	; 0x05
    12c6:	83 30       	cpi	r24, 0x03	; 3
    12c8:	91 05       	cpc	r25, r1
    12ca:	09 f4       	brne	.+2      	; 0x12ce <MDIO_voidSetPinDirection+0x56>
    12cc:	91 c0       	rjmp	.+290    	; 0x13f0 <MDIO_voidSetPinDirection+0x178>
    12ce:	be c0       	rjmp	.+380    	; 0x144c <MDIO_voidSetPinDirection+0x1d4>
	{
	case DIO_PORTA:
		if(Copy_u8PinDirection == DIO_OUTPUT )
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	81 30       	cpi	r24, 0x01	; 1
    12d4:	a1 f4       	brne	.+40     	; 0x12fe <MDIO_voidSetPinDirection+0x86>
		{
			SET_BIT(DIO_DDRA_REG,Copy_u8PinId);
    12d6:	aa e3       	ldi	r26, 0x3A	; 58
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	ea e3       	ldi	r30, 0x3A	; 58
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	48 2f       	mov	r20, r24
    12e2:	8a 81       	ldd	r24, Y+2	; 0x02
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	02 2e       	mov	r0, r18
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <MDIO_voidSetPinDirection+0x7c>
    12f0:	88 0f       	add	r24, r24
    12f2:	99 1f       	adc	r25, r25
    12f4:	0a 94       	dec	r0
    12f6:	e2 f7       	brpl	.-8      	; 0x12f0 <MDIO_voidSetPinDirection+0x78>
    12f8:	84 2b       	or	r24, r20
    12fa:	8c 93       	st	X, r24
    12fc:	a7 c0       	rjmp	.+334    	; 0x144c <MDIO_voidSetPinDirection+0x1d4>
		}
		else if(Copy_u8PinDirection == DIO_INPUT)
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1300:	88 23       	and	r24, r24
    1302:	09 f0       	breq	.+2      	; 0x1306 <MDIO_voidSetPinDirection+0x8e>
    1304:	a3 c0       	rjmp	.+326    	; 0x144c <MDIO_voidSetPinDirection+0x1d4>
		{
			CLR_BIT(DIO_DDRA_REG,Copy_u8PinId);
    1306:	aa e3       	ldi	r26, 0x3A	; 58
    1308:	b0 e0       	ldi	r27, 0x00	; 0
    130a:	ea e3       	ldi	r30, 0x3A	; 58
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	48 2f       	mov	r20, r24
    1312:	8a 81       	ldd	r24, Y+2	; 0x02
    1314:	28 2f       	mov	r18, r24
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	02 2e       	mov	r0, r18
    131e:	02 c0       	rjmp	.+4      	; 0x1324 <MDIO_voidSetPinDirection+0xac>
    1320:	88 0f       	add	r24, r24
    1322:	99 1f       	adc	r25, r25
    1324:	0a 94       	dec	r0
    1326:	e2 f7       	brpl	.-8      	; 0x1320 <MDIO_voidSetPinDirection+0xa8>
    1328:	80 95       	com	r24
    132a:	84 23       	and	r24, r20
    132c:	8c 93       	st	X, r24
    132e:	8e c0       	rjmp	.+284    	; 0x144c <MDIO_voidSetPinDirection+0x1d4>
		}
		break;
	case DIO_PORTB:
		if(Copy_u8PinDirection == DIO_OUTPUT )
    1330:	8b 81       	ldd	r24, Y+3	; 0x03
    1332:	81 30       	cpi	r24, 0x01	; 1
    1334:	a1 f4       	brne	.+40     	; 0x135e <MDIO_voidSetPinDirection+0xe6>
		{
			SET_BIT(DIO_DDRB_REG,Copy_u8PinId);
    1336:	a7 e3       	ldi	r26, 0x37	; 55
    1338:	b0 e0       	ldi	r27, 0x00	; 0
    133a:	e7 e3       	ldi	r30, 0x37	; 55
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	48 2f       	mov	r20, r24
    1342:	8a 81       	ldd	r24, Y+2	; 0x02
    1344:	28 2f       	mov	r18, r24
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	02 2e       	mov	r0, r18
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <MDIO_voidSetPinDirection+0xdc>
    1350:	88 0f       	add	r24, r24
    1352:	99 1f       	adc	r25, r25
    1354:	0a 94       	dec	r0
    1356:	e2 f7       	brpl	.-8      	; 0x1350 <MDIO_voidSetPinDirection+0xd8>
    1358:	84 2b       	or	r24, r20
    135a:	8c 93       	st	X, r24
    135c:	77 c0       	rjmp	.+238    	; 0x144c <MDIO_voidSetPinDirection+0x1d4>
		}
		else if(Copy_u8PinDirection == DIO_INPUT)
    135e:	8b 81       	ldd	r24, Y+3	; 0x03
    1360:	88 23       	and	r24, r24
    1362:	09 f0       	breq	.+2      	; 0x1366 <MDIO_voidSetPinDirection+0xee>
    1364:	73 c0       	rjmp	.+230    	; 0x144c <MDIO_voidSetPinDirection+0x1d4>
		{
			CLR_BIT(DIO_DDRB_REG,Copy_u8PinId);
    1366:	a7 e3       	ldi	r26, 0x37	; 55
    1368:	b0 e0       	ldi	r27, 0x00	; 0
    136a:	e7 e3       	ldi	r30, 0x37	; 55
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	48 2f       	mov	r20, r24
    1372:	8a 81       	ldd	r24, Y+2	; 0x02
    1374:	28 2f       	mov	r18, r24
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	02 2e       	mov	r0, r18
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <MDIO_voidSetPinDirection+0x10c>
    1380:	88 0f       	add	r24, r24
    1382:	99 1f       	adc	r25, r25
    1384:	0a 94       	dec	r0
    1386:	e2 f7       	brpl	.-8      	; 0x1380 <MDIO_voidSetPinDirection+0x108>
    1388:	80 95       	com	r24
    138a:	84 23       	and	r24, r20
    138c:	8c 93       	st	X, r24
    138e:	5e c0       	rjmp	.+188    	; 0x144c <MDIO_voidSetPinDirection+0x1d4>
		}
		break;
	case DIO_PORTC:
		if(Copy_u8PinDirection == DIO_OUTPUT )
    1390:	8b 81       	ldd	r24, Y+3	; 0x03
    1392:	81 30       	cpi	r24, 0x01	; 1
    1394:	a1 f4       	brne	.+40     	; 0x13be <MDIO_voidSetPinDirection+0x146>
		{
			SET_BIT(DIO_DDRC_REG,Copy_u8PinId);
    1396:	a4 e3       	ldi	r26, 0x34	; 52
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	e4 e3       	ldi	r30, 0x34	; 52
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	48 2f       	mov	r20, r24
    13a2:	8a 81       	ldd	r24, Y+2	; 0x02
    13a4:	28 2f       	mov	r18, r24
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	02 2e       	mov	r0, r18
    13ae:	02 c0       	rjmp	.+4      	; 0x13b4 <MDIO_voidSetPinDirection+0x13c>
    13b0:	88 0f       	add	r24, r24
    13b2:	99 1f       	adc	r25, r25
    13b4:	0a 94       	dec	r0
    13b6:	e2 f7       	brpl	.-8      	; 0x13b0 <MDIO_voidSetPinDirection+0x138>
    13b8:	84 2b       	or	r24, r20
    13ba:	8c 93       	st	X, r24
    13bc:	47 c0       	rjmp	.+142    	; 0x144c <MDIO_voidSetPinDirection+0x1d4>
		}
		else if(Copy_u8PinDirection == DIO_INPUT)
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	88 23       	and	r24, r24
    13c2:	09 f0       	breq	.+2      	; 0x13c6 <MDIO_voidSetPinDirection+0x14e>
    13c4:	43 c0       	rjmp	.+134    	; 0x144c <MDIO_voidSetPinDirection+0x1d4>
		{
			CLR_BIT(DIO_DDRC_REG,Copy_u8PinId);
    13c6:	a4 e3       	ldi	r26, 0x34	; 52
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	e4 e3       	ldi	r30, 0x34	; 52
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	48 2f       	mov	r20, r24
    13d2:	8a 81       	ldd	r24, Y+2	; 0x02
    13d4:	28 2f       	mov	r18, r24
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	02 2e       	mov	r0, r18
    13de:	02 c0       	rjmp	.+4      	; 0x13e4 <MDIO_voidSetPinDirection+0x16c>
    13e0:	88 0f       	add	r24, r24
    13e2:	99 1f       	adc	r25, r25
    13e4:	0a 94       	dec	r0
    13e6:	e2 f7       	brpl	.-8      	; 0x13e0 <MDIO_voidSetPinDirection+0x168>
    13e8:	80 95       	com	r24
    13ea:	84 23       	and	r24, r20
    13ec:	8c 93       	st	X, r24
    13ee:	2e c0       	rjmp	.+92     	; 0x144c <MDIO_voidSetPinDirection+0x1d4>
		}
		break;
	case DIO_PORTD:
		if(Copy_u8PinDirection == DIO_OUTPUT )
    13f0:	8b 81       	ldd	r24, Y+3	; 0x03
    13f2:	81 30       	cpi	r24, 0x01	; 1
    13f4:	a1 f4       	brne	.+40     	; 0x141e <MDIO_voidSetPinDirection+0x1a6>
		{
			SET_BIT(DIO_DDRD_REG,Copy_u8PinId);
    13f6:	a1 e3       	ldi	r26, 0x31	; 49
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	e1 e3       	ldi	r30, 0x31	; 49
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	48 2f       	mov	r20, r24
    1402:	8a 81       	ldd	r24, Y+2	; 0x02
    1404:	28 2f       	mov	r18, r24
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	02 2e       	mov	r0, r18
    140e:	02 c0       	rjmp	.+4      	; 0x1414 <MDIO_voidSetPinDirection+0x19c>
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	0a 94       	dec	r0
    1416:	e2 f7       	brpl	.-8      	; 0x1410 <MDIO_voidSetPinDirection+0x198>
    1418:	84 2b       	or	r24, r20
    141a:	8c 93       	st	X, r24
    141c:	17 c0       	rjmp	.+46     	; 0x144c <MDIO_voidSetPinDirection+0x1d4>
		}
		else if(Copy_u8PinDirection == DIO_INPUT)
    141e:	8b 81       	ldd	r24, Y+3	; 0x03
    1420:	88 23       	and	r24, r24
    1422:	a1 f4       	brne	.+40     	; 0x144c <MDIO_voidSetPinDirection+0x1d4>
		{
			CLR_BIT(DIO_DDRD_REG,Copy_u8PinId);
    1424:	a1 e3       	ldi	r26, 0x31	; 49
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	e1 e3       	ldi	r30, 0x31	; 49
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	48 2f       	mov	r20, r24
    1430:	8a 81       	ldd	r24, Y+2	; 0x02
    1432:	28 2f       	mov	r18, r24
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	02 2e       	mov	r0, r18
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <MDIO_voidSetPinDirection+0x1ca>
    143e:	88 0f       	add	r24, r24
    1440:	99 1f       	adc	r25, r25
    1442:	0a 94       	dec	r0
    1444:	e2 f7       	brpl	.-8      	; 0x143e <MDIO_voidSetPinDirection+0x1c6>
    1446:	80 95       	com	r24
    1448:	84 23       	and	r24, r20
    144a:	8c 93       	st	X, r24
		break;
	default:

		break;
	}
}
    144c:	0f 90       	pop	r0
    144e:	0f 90       	pop	r0
    1450:	0f 90       	pop	r0
    1452:	0f 90       	pop	r0
    1454:	0f 90       	pop	r0
    1456:	cf 91       	pop	r28
    1458:	df 91       	pop	r29
    145a:	08 95       	ret

0000145c <MDIO_voidSetPinValue>:
 * 				 PIN															 							  *
 *               Value : takes HIGH or LOW																	  *
 * return      : void																					      *
 *============================================================================================================*/
void MDIO_voidSetPinValue     (u8 Copy_u8PortId, u8 Copy_u8PinId ,u8 Copy_u8PinValue)
{
    145c:	df 93       	push	r29
    145e:	cf 93       	push	r28
    1460:	00 d0       	rcall	.+0      	; 0x1462 <MDIO_voidSetPinValue+0x6>
    1462:	00 d0       	rcall	.+0      	; 0x1464 <MDIO_voidSetPinValue+0x8>
    1464:	0f 92       	push	r0
    1466:	cd b7       	in	r28, 0x3d	; 61
    1468:	de b7       	in	r29, 0x3e	; 62
    146a:	89 83       	std	Y+1, r24	; 0x01
    146c:	6a 83       	std	Y+2, r22	; 0x02
    146e:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8PortId)
    1470:	89 81       	ldd	r24, Y+1	; 0x01
    1472:	28 2f       	mov	r18, r24
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	3d 83       	std	Y+5, r19	; 0x05
    1478:	2c 83       	std	Y+4, r18	; 0x04
    147a:	8c 81       	ldd	r24, Y+4	; 0x04
    147c:	9d 81       	ldd	r25, Y+5	; 0x05
    147e:	81 30       	cpi	r24, 0x01	; 1
    1480:	91 05       	cpc	r25, r1
    1482:	09 f4       	brne	.+2      	; 0x1486 <MDIO_voidSetPinValue+0x2a>
    1484:	47 c0       	rjmp	.+142    	; 0x1514 <MDIO_voidSetPinValue+0xb8>
    1486:	2c 81       	ldd	r18, Y+4	; 0x04
    1488:	3d 81       	ldd	r19, Y+5	; 0x05
    148a:	22 30       	cpi	r18, 0x02	; 2
    148c:	31 05       	cpc	r19, r1
    148e:	2c f4       	brge	.+10     	; 0x149a <MDIO_voidSetPinValue+0x3e>
    1490:	8c 81       	ldd	r24, Y+4	; 0x04
    1492:	9d 81       	ldd	r25, Y+5	; 0x05
    1494:	00 97       	sbiw	r24, 0x00	; 0
    1496:	71 f0       	breq	.+28     	; 0x14b4 <MDIO_voidSetPinValue+0x58>
    1498:	cb c0       	rjmp	.+406    	; 0x1630 <MDIO_voidSetPinValue+0x1d4>
    149a:	2c 81       	ldd	r18, Y+4	; 0x04
    149c:	3d 81       	ldd	r19, Y+5	; 0x05
    149e:	22 30       	cpi	r18, 0x02	; 2
    14a0:	31 05       	cpc	r19, r1
    14a2:	09 f4       	brne	.+2      	; 0x14a6 <MDIO_voidSetPinValue+0x4a>
    14a4:	67 c0       	rjmp	.+206    	; 0x1574 <MDIO_voidSetPinValue+0x118>
    14a6:	8c 81       	ldd	r24, Y+4	; 0x04
    14a8:	9d 81       	ldd	r25, Y+5	; 0x05
    14aa:	83 30       	cpi	r24, 0x03	; 3
    14ac:	91 05       	cpc	r25, r1
    14ae:	09 f4       	brne	.+2      	; 0x14b2 <MDIO_voidSetPinValue+0x56>
    14b0:	91 c0       	rjmp	.+290    	; 0x15d4 <MDIO_voidSetPinValue+0x178>
    14b2:	be c0       	rjmp	.+380    	; 0x1630 <MDIO_voidSetPinValue+0x1d4>
	{
	case DIO_PORTA:
		if(Copy_u8PinValue == DIO_HIGH )
    14b4:	8b 81       	ldd	r24, Y+3	; 0x03
    14b6:	81 30       	cpi	r24, 0x01	; 1
    14b8:	a1 f4       	brne	.+40     	; 0x14e2 <MDIO_voidSetPinValue+0x86>
		{
			SET_BIT(DIO_PORTA_REG,Copy_u8PinId);
    14ba:	ab e3       	ldi	r26, 0x3B	; 59
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	eb e3       	ldi	r30, 0x3B	; 59
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	48 2f       	mov	r20, r24
    14c6:	8a 81       	ldd	r24, Y+2	; 0x02
    14c8:	28 2f       	mov	r18, r24
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	02 2e       	mov	r0, r18
    14d2:	02 c0       	rjmp	.+4      	; 0x14d8 <MDIO_voidSetPinValue+0x7c>
    14d4:	88 0f       	add	r24, r24
    14d6:	99 1f       	adc	r25, r25
    14d8:	0a 94       	dec	r0
    14da:	e2 f7       	brpl	.-8      	; 0x14d4 <MDIO_voidSetPinValue+0x78>
    14dc:	84 2b       	or	r24, r20
    14de:	8c 93       	st	X, r24
    14e0:	a7 c0       	rjmp	.+334    	; 0x1630 <MDIO_voidSetPinValue+0x1d4>
		}
		else if(Copy_u8PinValue == DIO_LOW)
    14e2:	8b 81       	ldd	r24, Y+3	; 0x03
    14e4:	88 23       	and	r24, r24
    14e6:	09 f0       	breq	.+2      	; 0x14ea <MDIO_voidSetPinValue+0x8e>
    14e8:	a3 c0       	rjmp	.+326    	; 0x1630 <MDIO_voidSetPinValue+0x1d4>
		{
			CLR_BIT(DIO_PORTA_REG,Copy_u8PinId);
    14ea:	ab e3       	ldi	r26, 0x3B	; 59
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	eb e3       	ldi	r30, 0x3B	; 59
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	48 2f       	mov	r20, r24
    14f6:	8a 81       	ldd	r24, Y+2	; 0x02
    14f8:	28 2f       	mov	r18, r24
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	02 2e       	mov	r0, r18
    1502:	02 c0       	rjmp	.+4      	; 0x1508 <MDIO_voidSetPinValue+0xac>
    1504:	88 0f       	add	r24, r24
    1506:	99 1f       	adc	r25, r25
    1508:	0a 94       	dec	r0
    150a:	e2 f7       	brpl	.-8      	; 0x1504 <MDIO_voidSetPinValue+0xa8>
    150c:	80 95       	com	r24
    150e:	84 23       	and	r24, r20
    1510:	8c 93       	st	X, r24
    1512:	8e c0       	rjmp	.+284    	; 0x1630 <MDIO_voidSetPinValue+0x1d4>
		}
		break;
	case DIO_PORTB:
		if(Copy_u8PinValue == DIO_HIGH )
    1514:	8b 81       	ldd	r24, Y+3	; 0x03
    1516:	81 30       	cpi	r24, 0x01	; 1
    1518:	a1 f4       	brne	.+40     	; 0x1542 <MDIO_voidSetPinValue+0xe6>
		{
			SET_BIT(DIO_PORTB_REG,Copy_u8PinId);
    151a:	a8 e3       	ldi	r26, 0x38	; 56
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	e8 e3       	ldi	r30, 0x38	; 56
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	48 2f       	mov	r20, r24
    1526:	8a 81       	ldd	r24, Y+2	; 0x02
    1528:	28 2f       	mov	r18, r24
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	02 2e       	mov	r0, r18
    1532:	02 c0       	rjmp	.+4      	; 0x1538 <MDIO_voidSetPinValue+0xdc>
    1534:	88 0f       	add	r24, r24
    1536:	99 1f       	adc	r25, r25
    1538:	0a 94       	dec	r0
    153a:	e2 f7       	brpl	.-8      	; 0x1534 <MDIO_voidSetPinValue+0xd8>
    153c:	84 2b       	or	r24, r20
    153e:	8c 93       	st	X, r24
    1540:	77 c0       	rjmp	.+238    	; 0x1630 <MDIO_voidSetPinValue+0x1d4>
		}
		else if(Copy_u8PinValue == DIO_LOW)
    1542:	8b 81       	ldd	r24, Y+3	; 0x03
    1544:	88 23       	and	r24, r24
    1546:	09 f0       	breq	.+2      	; 0x154a <MDIO_voidSetPinValue+0xee>
    1548:	73 c0       	rjmp	.+230    	; 0x1630 <MDIO_voidSetPinValue+0x1d4>
		{
			CLR_BIT(DIO_PORTB_REG,Copy_u8PinId);
    154a:	a8 e3       	ldi	r26, 0x38	; 56
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	e8 e3       	ldi	r30, 0x38	; 56
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	48 2f       	mov	r20, r24
    1556:	8a 81       	ldd	r24, Y+2	; 0x02
    1558:	28 2f       	mov	r18, r24
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	02 2e       	mov	r0, r18
    1562:	02 c0       	rjmp	.+4      	; 0x1568 <MDIO_voidSetPinValue+0x10c>
    1564:	88 0f       	add	r24, r24
    1566:	99 1f       	adc	r25, r25
    1568:	0a 94       	dec	r0
    156a:	e2 f7       	brpl	.-8      	; 0x1564 <MDIO_voidSetPinValue+0x108>
    156c:	80 95       	com	r24
    156e:	84 23       	and	r24, r20
    1570:	8c 93       	st	X, r24
    1572:	5e c0       	rjmp	.+188    	; 0x1630 <MDIO_voidSetPinValue+0x1d4>
		}
		break;
	case DIO_PORTC:
		if(Copy_u8PinValue == DIO_HIGH )
    1574:	8b 81       	ldd	r24, Y+3	; 0x03
    1576:	81 30       	cpi	r24, 0x01	; 1
    1578:	a1 f4       	brne	.+40     	; 0x15a2 <MDIO_voidSetPinValue+0x146>
		{
			SET_BIT(DIO_PORTC_REG,Copy_u8PinId);
    157a:	a5 e3       	ldi	r26, 0x35	; 53
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	e5 e3       	ldi	r30, 0x35	; 53
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	48 2f       	mov	r20, r24
    1586:	8a 81       	ldd	r24, Y+2	; 0x02
    1588:	28 2f       	mov	r18, r24
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	02 2e       	mov	r0, r18
    1592:	02 c0       	rjmp	.+4      	; 0x1598 <MDIO_voidSetPinValue+0x13c>
    1594:	88 0f       	add	r24, r24
    1596:	99 1f       	adc	r25, r25
    1598:	0a 94       	dec	r0
    159a:	e2 f7       	brpl	.-8      	; 0x1594 <MDIO_voidSetPinValue+0x138>
    159c:	84 2b       	or	r24, r20
    159e:	8c 93       	st	X, r24
    15a0:	47 c0       	rjmp	.+142    	; 0x1630 <MDIO_voidSetPinValue+0x1d4>
		}
		else if(Copy_u8PinValue == DIO_LOW)
    15a2:	8b 81       	ldd	r24, Y+3	; 0x03
    15a4:	88 23       	and	r24, r24
    15a6:	09 f0       	breq	.+2      	; 0x15aa <MDIO_voidSetPinValue+0x14e>
    15a8:	43 c0       	rjmp	.+134    	; 0x1630 <MDIO_voidSetPinValue+0x1d4>
		{
			CLR_BIT(DIO_PORTC_REG,Copy_u8PinId);
    15aa:	a5 e3       	ldi	r26, 0x35	; 53
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	e5 e3       	ldi	r30, 0x35	; 53
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	48 2f       	mov	r20, r24
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	28 2f       	mov	r18, r24
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	02 2e       	mov	r0, r18
    15c2:	02 c0       	rjmp	.+4      	; 0x15c8 <MDIO_voidSetPinValue+0x16c>
    15c4:	88 0f       	add	r24, r24
    15c6:	99 1f       	adc	r25, r25
    15c8:	0a 94       	dec	r0
    15ca:	e2 f7       	brpl	.-8      	; 0x15c4 <MDIO_voidSetPinValue+0x168>
    15cc:	80 95       	com	r24
    15ce:	84 23       	and	r24, r20
    15d0:	8c 93       	st	X, r24
    15d2:	2e c0       	rjmp	.+92     	; 0x1630 <MDIO_voidSetPinValue+0x1d4>
		}
		break;
	case DIO_PORTD:
		if(Copy_u8PinValue == DIO_HIGH )
    15d4:	8b 81       	ldd	r24, Y+3	; 0x03
    15d6:	81 30       	cpi	r24, 0x01	; 1
    15d8:	a1 f4       	brne	.+40     	; 0x1602 <MDIO_voidSetPinValue+0x1a6>
		{
			SET_BIT(DIO_PORTD_REG,Copy_u8PinId);
    15da:	a2 e3       	ldi	r26, 0x32	; 50
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	e2 e3       	ldi	r30, 0x32	; 50
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
    15e4:	48 2f       	mov	r20, r24
    15e6:	8a 81       	ldd	r24, Y+2	; 0x02
    15e8:	28 2f       	mov	r18, r24
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	02 2e       	mov	r0, r18
    15f2:	02 c0       	rjmp	.+4      	; 0x15f8 <MDIO_voidSetPinValue+0x19c>
    15f4:	88 0f       	add	r24, r24
    15f6:	99 1f       	adc	r25, r25
    15f8:	0a 94       	dec	r0
    15fa:	e2 f7       	brpl	.-8      	; 0x15f4 <MDIO_voidSetPinValue+0x198>
    15fc:	84 2b       	or	r24, r20
    15fe:	8c 93       	st	X, r24
    1600:	17 c0       	rjmp	.+46     	; 0x1630 <MDIO_voidSetPinValue+0x1d4>
		}
		else if(Copy_u8PinValue == DIO_LOW)
    1602:	8b 81       	ldd	r24, Y+3	; 0x03
    1604:	88 23       	and	r24, r24
    1606:	a1 f4       	brne	.+40     	; 0x1630 <MDIO_voidSetPinValue+0x1d4>
		{
			CLR_BIT(DIO_PORTD_REG,Copy_u8PinId);
    1608:	a2 e3       	ldi	r26, 0x32	; 50
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	e2 e3       	ldi	r30, 0x32	; 50
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	48 2f       	mov	r20, r24
    1614:	8a 81       	ldd	r24, Y+2	; 0x02
    1616:	28 2f       	mov	r18, r24
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	02 2e       	mov	r0, r18
    1620:	02 c0       	rjmp	.+4      	; 0x1626 <MDIO_voidSetPinValue+0x1ca>
    1622:	88 0f       	add	r24, r24
    1624:	99 1f       	adc	r25, r25
    1626:	0a 94       	dec	r0
    1628:	e2 f7       	brpl	.-8      	; 0x1622 <MDIO_voidSetPinValue+0x1c6>
    162a:	80 95       	com	r24
    162c:	84 23       	and	r24, r20
    162e:	8c 93       	st	X, r24
		break;
	default:

		break;
	}
}
    1630:	0f 90       	pop	r0
    1632:	0f 90       	pop	r0
    1634:	0f 90       	pop	r0
    1636:	0f 90       	pop	r0
    1638:	0f 90       	pop	r0
    163a:	cf 91       	pop	r28
    163c:	df 91       	pop	r29
    163e:	08 95       	ret

00001640 <MDIO_voidSetPortDirection>:
 * Arguments   : PORT 																						  *
 *               Direction 																	  				  *
 * return      : void																					      *
 *============================================================================================================*/
void MDIO_voidSetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
    1640:	df 93       	push	r29
    1642:	cf 93       	push	r28
    1644:	00 d0       	rcall	.+0      	; 0x1646 <MDIO_voidSetPortDirection+0x6>
    1646:	00 d0       	rcall	.+0      	; 0x1648 <MDIO_voidSetPortDirection+0x8>
    1648:	cd b7       	in	r28, 0x3d	; 61
    164a:	de b7       	in	r29, 0x3e	; 62
    164c:	89 83       	std	Y+1, r24	; 0x01
    164e:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortId)
    1650:	89 81       	ldd	r24, Y+1	; 0x01
    1652:	28 2f       	mov	r18, r24
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	3c 83       	std	Y+4, r19	; 0x04
    1658:	2b 83       	std	Y+3, r18	; 0x03
    165a:	8b 81       	ldd	r24, Y+3	; 0x03
    165c:	9c 81       	ldd	r25, Y+4	; 0x04
    165e:	81 30       	cpi	r24, 0x01	; 1
    1660:	91 05       	cpc	r25, r1
    1662:	d1 f0       	breq	.+52     	; 0x1698 <MDIO_voidSetPortDirection+0x58>
    1664:	2b 81       	ldd	r18, Y+3	; 0x03
    1666:	3c 81       	ldd	r19, Y+4	; 0x04
    1668:	22 30       	cpi	r18, 0x02	; 2
    166a:	31 05       	cpc	r19, r1
    166c:	2c f4       	brge	.+10     	; 0x1678 <MDIO_voidSetPortDirection+0x38>
    166e:	8b 81       	ldd	r24, Y+3	; 0x03
    1670:	9c 81       	ldd	r25, Y+4	; 0x04
    1672:	00 97       	sbiw	r24, 0x00	; 0
    1674:	61 f0       	breq	.+24     	; 0x168e <MDIO_voidSetPortDirection+0x4e>
    1676:	1e c0       	rjmp	.+60     	; 0x16b4 <MDIO_voidSetPortDirection+0x74>
    1678:	2b 81       	ldd	r18, Y+3	; 0x03
    167a:	3c 81       	ldd	r19, Y+4	; 0x04
    167c:	22 30       	cpi	r18, 0x02	; 2
    167e:	31 05       	cpc	r19, r1
    1680:	81 f0       	breq	.+32     	; 0x16a2 <MDIO_voidSetPortDirection+0x62>
    1682:	8b 81       	ldd	r24, Y+3	; 0x03
    1684:	9c 81       	ldd	r25, Y+4	; 0x04
    1686:	83 30       	cpi	r24, 0x03	; 3
    1688:	91 05       	cpc	r25, r1
    168a:	81 f0       	breq	.+32     	; 0x16ac <MDIO_voidSetPortDirection+0x6c>
    168c:	13 c0       	rjmp	.+38     	; 0x16b4 <MDIO_voidSetPortDirection+0x74>
	{
	case DIO_PORTA:
		DIO_DDRA_REG = Copy_u8PortDirection;
    168e:	ea e3       	ldi	r30, 0x3A	; 58
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	8a 81       	ldd	r24, Y+2	; 0x02
    1694:	80 83       	st	Z, r24
    1696:	0e c0       	rjmp	.+28     	; 0x16b4 <MDIO_voidSetPortDirection+0x74>
		break;
	case DIO_PORTB:
		DIO_DDRB_REG = Copy_u8PortDirection;
    1698:	e7 e3       	ldi	r30, 0x37	; 55
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	8a 81       	ldd	r24, Y+2	; 0x02
    169e:	80 83       	st	Z, r24
    16a0:	09 c0       	rjmp	.+18     	; 0x16b4 <MDIO_voidSetPortDirection+0x74>
		break;
	case DIO_PORTC:
		DIO_DDRC_REG = Copy_u8PortDirection;
    16a2:	e4 e3       	ldi	r30, 0x34	; 52
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	8a 81       	ldd	r24, Y+2	; 0x02
    16a8:	80 83       	st	Z, r24
    16aa:	04 c0       	rjmp	.+8      	; 0x16b4 <MDIO_voidSetPortDirection+0x74>
		break;
	case DIO_PORTD:
		DIO_DDRD_REG = Copy_u8PortDirection;
    16ac:	e1 e3       	ldi	r30, 0x31	; 49
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	8a 81       	ldd	r24, Y+2	; 0x02
    16b2:	80 83       	st	Z, r24
		break;
	default:

		break;
	}
}
    16b4:	0f 90       	pop	r0
    16b6:	0f 90       	pop	r0
    16b8:	0f 90       	pop	r0
    16ba:	0f 90       	pop	r0
    16bc:	cf 91       	pop	r28
    16be:	df 91       	pop	r29
    16c0:	08 95       	ret

000016c2 <MDIO_voidSetPortValue>:
 * Arguments   : PORT 																						  *
 *               Value 																						  *
 * return      : void																					      *
 *============================================================================================================*/
void MDIO_voidSetPortValue    (u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
    16c2:	df 93       	push	r29
    16c4:	cf 93       	push	r28
    16c6:	00 d0       	rcall	.+0      	; 0x16c8 <MDIO_voidSetPortValue+0x6>
    16c8:	00 d0       	rcall	.+0      	; 0x16ca <MDIO_voidSetPortValue+0x8>
    16ca:	cd b7       	in	r28, 0x3d	; 61
    16cc:	de b7       	in	r29, 0x3e	; 62
    16ce:	89 83       	std	Y+1, r24	; 0x01
    16d0:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortId)
    16d2:	89 81       	ldd	r24, Y+1	; 0x01
    16d4:	28 2f       	mov	r18, r24
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	3c 83       	std	Y+4, r19	; 0x04
    16da:	2b 83       	std	Y+3, r18	; 0x03
    16dc:	8b 81       	ldd	r24, Y+3	; 0x03
    16de:	9c 81       	ldd	r25, Y+4	; 0x04
    16e0:	81 30       	cpi	r24, 0x01	; 1
    16e2:	91 05       	cpc	r25, r1
    16e4:	d1 f0       	breq	.+52     	; 0x171a <MDIO_voidSetPortValue+0x58>
    16e6:	2b 81       	ldd	r18, Y+3	; 0x03
    16e8:	3c 81       	ldd	r19, Y+4	; 0x04
    16ea:	22 30       	cpi	r18, 0x02	; 2
    16ec:	31 05       	cpc	r19, r1
    16ee:	2c f4       	brge	.+10     	; 0x16fa <MDIO_voidSetPortValue+0x38>
    16f0:	8b 81       	ldd	r24, Y+3	; 0x03
    16f2:	9c 81       	ldd	r25, Y+4	; 0x04
    16f4:	00 97       	sbiw	r24, 0x00	; 0
    16f6:	61 f0       	breq	.+24     	; 0x1710 <MDIO_voidSetPortValue+0x4e>
    16f8:	1e c0       	rjmp	.+60     	; 0x1736 <MDIO_voidSetPortValue+0x74>
    16fa:	2b 81       	ldd	r18, Y+3	; 0x03
    16fc:	3c 81       	ldd	r19, Y+4	; 0x04
    16fe:	22 30       	cpi	r18, 0x02	; 2
    1700:	31 05       	cpc	r19, r1
    1702:	81 f0       	breq	.+32     	; 0x1724 <MDIO_voidSetPortValue+0x62>
    1704:	8b 81       	ldd	r24, Y+3	; 0x03
    1706:	9c 81       	ldd	r25, Y+4	; 0x04
    1708:	83 30       	cpi	r24, 0x03	; 3
    170a:	91 05       	cpc	r25, r1
    170c:	81 f0       	breq	.+32     	; 0x172e <MDIO_voidSetPortValue+0x6c>
    170e:	13 c0       	rjmp	.+38     	; 0x1736 <MDIO_voidSetPortValue+0x74>
	{
	case DIO_PORTA:
		DIO_PORTA_REG = Copy_u8PortValue;
    1710:	eb e3       	ldi	r30, 0x3B	; 59
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	8a 81       	ldd	r24, Y+2	; 0x02
    1716:	80 83       	st	Z, r24
    1718:	0e c0       	rjmp	.+28     	; 0x1736 <MDIO_voidSetPortValue+0x74>
		break;
	case DIO_PORTB:
		DIO_PORTB_REG = Copy_u8PortValue;
    171a:	e8 e3       	ldi	r30, 0x38	; 56
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	8a 81       	ldd	r24, Y+2	; 0x02
    1720:	80 83       	st	Z, r24
    1722:	09 c0       	rjmp	.+18     	; 0x1736 <MDIO_voidSetPortValue+0x74>
		break;
	case DIO_PORTC:
		DIO_PORTC_REG = Copy_u8PortValue;
    1724:	e5 e3       	ldi	r30, 0x35	; 53
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	8a 81       	ldd	r24, Y+2	; 0x02
    172a:	80 83       	st	Z, r24
    172c:	04 c0       	rjmp	.+8      	; 0x1736 <MDIO_voidSetPortValue+0x74>
		break;
	case DIO_PORTD:
		DIO_PORTD_REG = Copy_u8PortValue;
    172e:	e2 e3       	ldi	r30, 0x32	; 50
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	8a 81       	ldd	r24, Y+2	; 0x02
    1734:	80 83       	st	Z, r24
		break;
	default:

		break;
	}
}
    1736:	0f 90       	pop	r0
    1738:	0f 90       	pop	r0
    173a:	0f 90       	pop	r0
    173c:	0f 90       	pop	r0
    173e:	cf 91       	pop	r28
    1740:	df 91       	pop	r29
    1742:	08 95       	ret

00001744 <MDIO_u8GetPinValue>:
 * Arguments   : PORT																					    *
 * 				 Pin 																						*
 * return      : Pin Value																					*
 *==========================================================================================================*/
u8 MDIO_u8GetPinValue         (u8 Copy_u8PortId, u8 Copy_u8PinId)
{
    1744:	df 93       	push	r29
    1746:	cf 93       	push	r28
    1748:	00 d0       	rcall	.+0      	; 0x174a <MDIO_u8GetPinValue+0x6>
    174a:	00 d0       	rcall	.+0      	; 0x174c <MDIO_u8GetPinValue+0x8>
    174c:	0f 92       	push	r0
    174e:	cd b7       	in	r28, 0x3d	; 61
    1750:	de b7       	in	r29, 0x3e	; 62
    1752:	8a 83       	std	Y+2, r24	; 0x02
    1754:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8VALUE;
	switch(Copy_u8PortId)
    1756:	8a 81       	ldd	r24, Y+2	; 0x02
    1758:	28 2f       	mov	r18, r24
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	3d 83       	std	Y+5, r19	; 0x05
    175e:	2c 83       	std	Y+4, r18	; 0x04
    1760:	4c 81       	ldd	r20, Y+4	; 0x04
    1762:	5d 81       	ldd	r21, Y+5	; 0x05
    1764:	41 30       	cpi	r20, 0x01	; 1
    1766:	51 05       	cpc	r21, r1
    1768:	41 f1       	breq	.+80     	; 0x17ba <MDIO_u8GetPinValue+0x76>
    176a:	8c 81       	ldd	r24, Y+4	; 0x04
    176c:	9d 81       	ldd	r25, Y+5	; 0x05
    176e:	82 30       	cpi	r24, 0x02	; 2
    1770:	91 05       	cpc	r25, r1
    1772:	34 f4       	brge	.+12     	; 0x1780 <MDIO_u8GetPinValue+0x3c>
    1774:	2c 81       	ldd	r18, Y+4	; 0x04
    1776:	3d 81       	ldd	r19, Y+5	; 0x05
    1778:	21 15       	cp	r18, r1
    177a:	31 05       	cpc	r19, r1
    177c:	61 f0       	breq	.+24     	; 0x1796 <MDIO_u8GetPinValue+0x52>
    177e:	52 c0       	rjmp	.+164    	; 0x1824 <MDIO_u8GetPinValue+0xe0>
    1780:	4c 81       	ldd	r20, Y+4	; 0x04
    1782:	5d 81       	ldd	r21, Y+5	; 0x05
    1784:	42 30       	cpi	r20, 0x02	; 2
    1786:	51 05       	cpc	r21, r1
    1788:	51 f1       	breq	.+84     	; 0x17de <MDIO_u8GetPinValue+0x9a>
    178a:	8c 81       	ldd	r24, Y+4	; 0x04
    178c:	9d 81       	ldd	r25, Y+5	; 0x05
    178e:	83 30       	cpi	r24, 0x03	; 3
    1790:	91 05       	cpc	r25, r1
    1792:	b9 f1       	breq	.+110    	; 0x1802 <MDIO_u8GetPinValue+0xbe>
    1794:	47 c0       	rjmp	.+142    	; 0x1824 <MDIO_u8GetPinValue+0xe0>
	{
	case DIO_PORTA:
		Local_u8VALUE = GET_BIT(DIO_PINA_REG,Copy_u8PinId);
    1796:	e9 e3       	ldi	r30, 0x39	; 57
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
    179c:	28 2f       	mov	r18, r24
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	8b 81       	ldd	r24, Y+3	; 0x03
    17a2:	88 2f       	mov	r24, r24
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	a9 01       	movw	r20, r18
    17a8:	02 c0       	rjmp	.+4      	; 0x17ae <MDIO_u8GetPinValue+0x6a>
    17aa:	55 95       	asr	r21
    17ac:	47 95       	ror	r20
    17ae:	8a 95       	dec	r24
    17b0:	e2 f7       	brpl	.-8      	; 0x17aa <MDIO_u8GetPinValue+0x66>
    17b2:	ca 01       	movw	r24, r20
    17b4:	81 70       	andi	r24, 0x01	; 1
    17b6:	89 83       	std	Y+1, r24	; 0x01
    17b8:	35 c0       	rjmp	.+106    	; 0x1824 <MDIO_u8GetPinValue+0xe0>
		break;
	case DIO_PORTB:
		Local_u8VALUE = GET_BIT(DIO_PINB_REG,Copy_u8PinId);
    17ba:	e6 e3       	ldi	r30, 0x36	; 54
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	80 81       	ld	r24, Z
    17c0:	28 2f       	mov	r18, r24
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	8b 81       	ldd	r24, Y+3	; 0x03
    17c6:	88 2f       	mov	r24, r24
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	a9 01       	movw	r20, r18
    17cc:	02 c0       	rjmp	.+4      	; 0x17d2 <MDIO_u8GetPinValue+0x8e>
    17ce:	55 95       	asr	r21
    17d0:	47 95       	ror	r20
    17d2:	8a 95       	dec	r24
    17d4:	e2 f7       	brpl	.-8      	; 0x17ce <MDIO_u8GetPinValue+0x8a>
    17d6:	ca 01       	movw	r24, r20
    17d8:	81 70       	andi	r24, 0x01	; 1
    17da:	89 83       	std	Y+1, r24	; 0x01
    17dc:	23 c0       	rjmp	.+70     	; 0x1824 <MDIO_u8GetPinValue+0xe0>
		break;
	case DIO_PORTC:
		Local_u8VALUE = GET_BIT(DIO_PINC_REG,Copy_u8PinId);
    17de:	e3 e3       	ldi	r30, 0x33	; 51
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	28 2f       	mov	r18, r24
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ea:	88 2f       	mov	r24, r24
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	a9 01       	movw	r20, r18
    17f0:	02 c0       	rjmp	.+4      	; 0x17f6 <MDIO_u8GetPinValue+0xb2>
    17f2:	55 95       	asr	r21
    17f4:	47 95       	ror	r20
    17f6:	8a 95       	dec	r24
    17f8:	e2 f7       	brpl	.-8      	; 0x17f2 <MDIO_u8GetPinValue+0xae>
    17fa:	ca 01       	movw	r24, r20
    17fc:	81 70       	andi	r24, 0x01	; 1
    17fe:	89 83       	std	Y+1, r24	; 0x01
    1800:	11 c0       	rjmp	.+34     	; 0x1824 <MDIO_u8GetPinValue+0xe0>
		break;
	case DIO_PORTD:
		Local_u8VALUE = GET_BIT(DIO_PIND_REG,Copy_u8PinId);
    1802:	e0 e3       	ldi	r30, 0x30	; 48
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	80 81       	ld	r24, Z
    1808:	28 2f       	mov	r18, r24
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	8b 81       	ldd	r24, Y+3	; 0x03
    180e:	88 2f       	mov	r24, r24
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	a9 01       	movw	r20, r18
    1814:	02 c0       	rjmp	.+4      	; 0x181a <MDIO_u8GetPinValue+0xd6>
    1816:	55 95       	asr	r21
    1818:	47 95       	ror	r20
    181a:	8a 95       	dec	r24
    181c:	e2 f7       	brpl	.-8      	; 0x1816 <MDIO_u8GetPinValue+0xd2>
    181e:	ca 01       	movw	r24, r20
    1820:	81 70       	andi	r24, 0x01	; 1
    1822:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:

		break;
	}
	return Local_u8VALUE;
    1824:	89 81       	ldd	r24, Y+1	; 0x01
}
    1826:	0f 90       	pop	r0
    1828:	0f 90       	pop	r0
    182a:	0f 90       	pop	r0
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	cf 91       	pop	r28
    1832:	df 91       	pop	r29
    1834:	08 95       	ret

00001836 <HLCD_voidInit>:
 * Description : Set initialization direction of LCD							*
 * Arguments   : void			 												*
 * return      : void															*
 *==============================================================================*/
void HLCD_voidInit(void)
{
    1836:	df 93       	push	r29
    1838:	cf 93       	push	r28
    183a:	cd b7       	in	r28, 0x3d	; 61
    183c:	de b7       	in	r29, 0x3e	; 62
    183e:	2e 97       	sbiw	r28, 0x0e	; 14
    1840:	0f b6       	in	r0, 0x3f	; 63
    1842:	f8 94       	cli
    1844:	de bf       	out	0x3e, r29	; 62
    1846:	0f be       	out	0x3f, r0	; 63
    1848:	cd bf       	out	0x3d, r28	; 61
	MDIO_voidSetPinDirection(LCD_DATA_PORT,LCD_EN_PIN,DIO_OUTPUT);
    184a:	80 e0       	ldi	r24, 0x00	; 0
    184c:	65 e0       	ldi	r22, 0x05	; 5
    184e:	41 e0       	ldi	r20, 0x01	; 1
    1850:	0e 94 3c 09 	call	0x1278	; 0x1278 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(LCD_DATA_PORT,LCD_RS_PIN,DIO_OUTPUT);
    1854:	80 e0       	ldi	r24, 0x00	; 0
    1856:	64 e0       	ldi	r22, 0x04	; 4
    1858:	41 e0       	ldi	r20, 0x01	; 1
    185a:	0e 94 3c 09 	call	0x1278	; 0x1278 <MDIO_voidSetPinDirection>
	#if (LCD_MODE == _8_BIT_MODE)
	MDIO_voidSetPortDirection(LCD_DATA_PORT,0xFF);
	_delay_ms(100);
	HLCD_voidSendCommand(0x38);			/*select 8-bit Mode*/
	#elif (LCD_MODE == _4_BIT_MODE)
	MDIO_voidSetPinDirection(LCD_DATA_PORT,LCD_DATA_PIN_4,DIO_OUTPUT);
    185e:	80 e0       	ldi	r24, 0x00	; 0
    1860:	60 e0       	ldi	r22, 0x00	; 0
    1862:	41 e0       	ldi	r20, 0x01	; 1
    1864:	0e 94 3c 09 	call	0x1278	; 0x1278 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(LCD_DATA_PORT,LCD_DATA_PIN_5,DIO_OUTPUT);
    1868:	80 e0       	ldi	r24, 0x00	; 0
    186a:	61 e0       	ldi	r22, 0x01	; 1
    186c:	41 e0       	ldi	r20, 0x01	; 1
    186e:	0e 94 3c 09 	call	0x1278	; 0x1278 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(LCD_DATA_PORT,LCD_DATA_PIN_6,DIO_OUTPUT);
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	62 e0       	ldi	r22, 0x02	; 2
    1876:	41 e0       	ldi	r20, 0x01	; 1
    1878:	0e 94 3c 09 	call	0x1278	; 0x1278 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(LCD_DATA_PORT,LCD_DATA_PIN_7,DIO_OUTPUT);
    187c:	80 e0       	ldi	r24, 0x00	; 0
    187e:	63 e0       	ldi	r22, 0x03	; 3
    1880:	41 e0       	ldi	r20, 0x01	; 1
    1882:	0e 94 3c 09 	call	0x1278	; 0x1278 <MDIO_voidSetPinDirection>
    1886:	80 e0       	ldi	r24, 0x00	; 0
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	a8 ec       	ldi	r26, 0xC8	; 200
    188c:	b2 e4       	ldi	r27, 0x42	; 66
    188e:	8b 87       	std	Y+11, r24	; 0x0b
    1890:	9c 87       	std	Y+12, r25	; 0x0c
    1892:	ad 87       	std	Y+13, r26	; 0x0d
    1894:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1896:	6b 85       	ldd	r22, Y+11	; 0x0b
    1898:	7c 85       	ldd	r23, Y+12	; 0x0c
    189a:	8d 85       	ldd	r24, Y+13	; 0x0d
    189c:	9e 85       	ldd	r25, Y+14	; 0x0e
    189e:	20 e0       	ldi	r18, 0x00	; 0
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	4a ef       	ldi	r20, 0xFA	; 250
    18a4:	54 e4       	ldi	r21, 0x44	; 68
    18a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18aa:	dc 01       	movw	r26, r24
    18ac:	cb 01       	movw	r24, r22
    18ae:	8f 83       	std	Y+7, r24	; 0x07
    18b0:	98 87       	std	Y+8, r25	; 0x08
    18b2:	a9 87       	std	Y+9, r26	; 0x09
    18b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18b6:	6f 81       	ldd	r22, Y+7	; 0x07
    18b8:	78 85       	ldd	r23, Y+8	; 0x08
    18ba:	89 85       	ldd	r24, Y+9	; 0x09
    18bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    18be:	20 e0       	ldi	r18, 0x00	; 0
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	40 e8       	ldi	r20, 0x80	; 128
    18c4:	5f e3       	ldi	r21, 0x3F	; 63
    18c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18ca:	88 23       	and	r24, r24
    18cc:	2c f4       	brge	.+10     	; 0x18d8 <HLCD_voidInit+0xa2>
		__ticks = 1;
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	9e 83       	std	Y+6, r25	; 0x06
    18d4:	8d 83       	std	Y+5, r24	; 0x05
    18d6:	3f c0       	rjmp	.+126    	; 0x1956 <HLCD_voidInit+0x120>
	else if (__tmp > 65535)
    18d8:	6f 81       	ldd	r22, Y+7	; 0x07
    18da:	78 85       	ldd	r23, Y+8	; 0x08
    18dc:	89 85       	ldd	r24, Y+9	; 0x09
    18de:	9a 85       	ldd	r25, Y+10	; 0x0a
    18e0:	20 e0       	ldi	r18, 0x00	; 0
    18e2:	3f ef       	ldi	r19, 0xFF	; 255
    18e4:	4f e7       	ldi	r20, 0x7F	; 127
    18e6:	57 e4       	ldi	r21, 0x47	; 71
    18e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18ec:	18 16       	cp	r1, r24
    18ee:	4c f5       	brge	.+82     	; 0x1942 <HLCD_voidInit+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    18f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    18f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    18f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	40 e2       	ldi	r20, 0x20	; 32
    18fe:	51 e4       	ldi	r21, 0x41	; 65
    1900:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1904:	dc 01       	movw	r26, r24
    1906:	cb 01       	movw	r24, r22
    1908:	bc 01       	movw	r22, r24
    190a:	cd 01       	movw	r24, r26
    190c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1910:	dc 01       	movw	r26, r24
    1912:	cb 01       	movw	r24, r22
    1914:	9e 83       	std	Y+6, r25	; 0x06
    1916:	8d 83       	std	Y+5, r24	; 0x05
    1918:	0f c0       	rjmp	.+30     	; 0x1938 <HLCD_voidInit+0x102>
    191a:	88 ec       	ldi	r24, 0xC8	; 200
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	9c 83       	std	Y+4, r25	; 0x04
    1920:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1922:	8b 81       	ldd	r24, Y+3	; 0x03
    1924:	9c 81       	ldd	r25, Y+4	; 0x04
    1926:	01 97       	sbiw	r24, 0x01	; 1
    1928:	f1 f7       	brne	.-4      	; 0x1926 <HLCD_voidInit+0xf0>
    192a:	9c 83       	std	Y+4, r25	; 0x04
    192c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    192e:	8d 81       	ldd	r24, Y+5	; 0x05
    1930:	9e 81       	ldd	r25, Y+6	; 0x06
    1932:	01 97       	sbiw	r24, 0x01	; 1
    1934:	9e 83       	std	Y+6, r25	; 0x06
    1936:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1938:	8d 81       	ldd	r24, Y+5	; 0x05
    193a:	9e 81       	ldd	r25, Y+6	; 0x06
    193c:	00 97       	sbiw	r24, 0x00	; 0
    193e:	69 f7       	brne	.-38     	; 0x191a <HLCD_voidInit+0xe4>
    1940:	14 c0       	rjmp	.+40     	; 0x196a <HLCD_voidInit+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1942:	6f 81       	ldd	r22, Y+7	; 0x07
    1944:	78 85       	ldd	r23, Y+8	; 0x08
    1946:	89 85       	ldd	r24, Y+9	; 0x09
    1948:	9a 85       	ldd	r25, Y+10	; 0x0a
    194a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    194e:	dc 01       	movw	r26, r24
    1950:	cb 01       	movw	r24, r22
    1952:	9e 83       	std	Y+6, r25	; 0x06
    1954:	8d 83       	std	Y+5, r24	; 0x05
    1956:	8d 81       	ldd	r24, Y+5	; 0x05
    1958:	9e 81       	ldd	r25, Y+6	; 0x06
    195a:	9a 83       	std	Y+2, r25	; 0x02
    195c:	89 83       	std	Y+1, r24	; 0x01
    195e:	89 81       	ldd	r24, Y+1	; 0x01
    1960:	9a 81       	ldd	r25, Y+2	; 0x02
    1962:	01 97       	sbiw	r24, 0x01	; 1
    1964:	f1 f7       	brne	.-4      	; 0x1962 <HLCD_voidInit+0x12c>
    1966:	9a 83       	std	Y+2, r25	; 0x02
    1968:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
	HLCD_voidSendCommand(0x33);		   /*select 4-bit Mode*/
    196a:	83 e3       	ldi	r24, 0x33	; 51
    196c:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0x32);
    1970:	82 e3       	ldi	r24, 0x32	; 50
    1972:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0x28);
    1976:	88 e2       	ldi	r24, 0x28	; 40
    1978:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <HLCD_voidSendCommand>
	#endif
	
	HLCD_voidSendCommand(0x0C);		/*TURN LCD DISPLAY		  */	
    197c:	8c e0       	ldi	r24, 0x0C	; 12
    197e:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0x02);		/*RETURN HOME			  */
    1982:	82 e0       	ldi	r24, 0x02	; 2
    1984:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0x01);		/*CLEAR	LCD DISPLAY		  */
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0x06);		/*MOVE FROM LEFT TO RIGHT */
    198e:	86 e0       	ldi	r24, 0x06	; 6
    1990:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <HLCD_voidSendCommand>
}
    1994:	2e 96       	adiw	r28, 0x0e	; 14
    1996:	0f b6       	in	r0, 0x3f	; 63
    1998:	f8 94       	cli
    199a:	de bf       	out	0x3e, r29	; 62
    199c:	0f be       	out	0x3f, r0	; 63
    199e:	cd bf       	out	0x3d, r28	; 61
    19a0:	cf 91       	pop	r28
    19a2:	df 91       	pop	r29
    19a4:	08 95       	ret

000019a6 <HLCD_voidSendCommand>:
 * Description : Send Command to LCD											*
 * Arguments   : Command : takes Command 										*
 * return      : void															*
 *==============================================================================*/
void HLCD_voidSendCommand(u8 Copy_u8Cmd)
{
    19a6:	df 93       	push	r29
    19a8:	cf 93       	push	r28
    19aa:	cd b7       	in	r28, 0x3d	; 61
    19ac:	de b7       	in	r29, 0x3e	; 62
    19ae:	ab 97       	sbiw	r28, 0x2b	; 43
    19b0:	0f b6       	in	r0, 0x3f	; 63
    19b2:	f8 94       	cli
    19b4:	de bf       	out	0x3e, r29	; 62
    19b6:	0f be       	out	0x3f, r0	; 63
    19b8:	cd bf       	out	0x3d, r28	; 61
    19ba:	8b a7       	std	Y+43, r24	; 0x2b
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_EN_PIN,DIO_LOW);
	_delay_ms(5);
	
	#elif (LCD_MODE == _4_BIT_MODE)
	//to select command register
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_RS_PIN,DIO_LOW);
    19bc:	80 e0       	ldi	r24, 0x00	; 0
    19be:	64 e0       	ldi	r22, 0x04	; 4
    19c0:	40 e0       	ldi	r20, 0x00	; 0
    19c2:	0e 94 2e 0a 	call	0x145c	; 0x145c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PIN_4, GET_BIT(Copy_u8Cmd,4));
    19c6:	8b a5       	ldd	r24, Y+43	; 0x2b
    19c8:	82 95       	swap	r24
    19ca:	8f 70       	andi	r24, 0x0F	; 15
    19cc:	98 2f       	mov	r25, r24
    19ce:	91 70       	andi	r25, 0x01	; 1
    19d0:	80 e0       	ldi	r24, 0x00	; 0
    19d2:	60 e0       	ldi	r22, 0x00	; 0
    19d4:	49 2f       	mov	r20, r25
    19d6:	0e 94 2e 0a 	call	0x145c	; 0x145c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PIN_5, GET_BIT(Copy_u8Cmd,5));
    19da:	8b a5       	ldd	r24, Y+43	; 0x2b
    19dc:	82 95       	swap	r24
    19de:	86 95       	lsr	r24
    19e0:	87 70       	andi	r24, 0x07	; 7
    19e2:	98 2f       	mov	r25, r24
    19e4:	91 70       	andi	r25, 0x01	; 1
    19e6:	80 e0       	ldi	r24, 0x00	; 0
    19e8:	61 e0       	ldi	r22, 0x01	; 1
    19ea:	49 2f       	mov	r20, r25
    19ec:	0e 94 2e 0a 	call	0x145c	; 0x145c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PIN_6, GET_BIT(Copy_u8Cmd,6));
    19f0:	8b a5       	ldd	r24, Y+43	; 0x2b
    19f2:	82 95       	swap	r24
    19f4:	86 95       	lsr	r24
    19f6:	86 95       	lsr	r24
    19f8:	83 70       	andi	r24, 0x03	; 3
    19fa:	98 2f       	mov	r25, r24
    19fc:	91 70       	andi	r25, 0x01	; 1
    19fe:	80 e0       	ldi	r24, 0x00	; 0
    1a00:	62 e0       	ldi	r22, 0x02	; 2
    1a02:	49 2f       	mov	r20, r25
    1a04:	0e 94 2e 0a 	call	0x145c	; 0x145c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PIN_7, GET_BIT(Copy_u8Cmd,7));
    1a08:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a0a:	98 2f       	mov	r25, r24
    1a0c:	99 1f       	adc	r25, r25
    1a0e:	99 27       	eor	r25, r25
    1a10:	99 1f       	adc	r25, r25
    1a12:	80 e0       	ldi	r24, 0x00	; 0
    1a14:	63 e0       	ldi	r22, 0x03	; 3
    1a16:	49 2f       	mov	r20, r25
    1a18:	0e 94 2e 0a 	call	0x145c	; 0x145c <MDIO_voidSetPinValue>

	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_EN_PIN,DIO_HIGH); //EN
    1a1c:	80 e0       	ldi	r24, 0x00	; 0
    1a1e:	65 e0       	ldi	r22, 0x05	; 5
    1a20:	41 e0       	ldi	r20, 0x01	; 1
    1a22:	0e 94 2e 0a 	call	0x145c	; 0x145c <MDIO_voidSetPinValue>
    1a26:	80 e0       	ldi	r24, 0x00	; 0
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	a0 e8       	ldi	r26, 0x80	; 128
    1a2c:	bf e3       	ldi	r27, 0x3F	; 63
    1a2e:	8f a3       	std	Y+39, r24	; 0x27
    1a30:	98 a7       	std	Y+40, r25	; 0x28
    1a32:	a9 a7       	std	Y+41, r26	; 0x29
    1a34:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a36:	6f a1       	ldd	r22, Y+39	; 0x27
    1a38:	78 a5       	ldd	r23, Y+40	; 0x28
    1a3a:	89 a5       	ldd	r24, Y+41	; 0x29
    1a3c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a3e:	20 e0       	ldi	r18, 0x00	; 0
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	4a ef       	ldi	r20, 0xFA	; 250
    1a44:	54 e4       	ldi	r21, 0x44	; 68
    1a46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a4a:	dc 01       	movw	r26, r24
    1a4c:	cb 01       	movw	r24, r22
    1a4e:	8b a3       	std	Y+35, r24	; 0x23
    1a50:	9c a3       	std	Y+36, r25	; 0x24
    1a52:	ad a3       	std	Y+37, r26	; 0x25
    1a54:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a56:	6b a1       	ldd	r22, Y+35	; 0x23
    1a58:	7c a1       	ldd	r23, Y+36	; 0x24
    1a5a:	8d a1       	ldd	r24, Y+37	; 0x25
    1a5c:	9e a1       	ldd	r25, Y+38	; 0x26
    1a5e:	20 e0       	ldi	r18, 0x00	; 0
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	40 e8       	ldi	r20, 0x80	; 128
    1a64:	5f e3       	ldi	r21, 0x3F	; 63
    1a66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a6a:	88 23       	and	r24, r24
    1a6c:	2c f4       	brge	.+10     	; 0x1a78 <HLCD_voidSendCommand+0xd2>
		__ticks = 1;
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	9a a3       	std	Y+34, r25	; 0x22
    1a74:	89 a3       	std	Y+33, r24	; 0x21
    1a76:	3f c0       	rjmp	.+126    	; 0x1af6 <HLCD_voidSendCommand+0x150>
	else if (__tmp > 65535)
    1a78:	6b a1       	ldd	r22, Y+35	; 0x23
    1a7a:	7c a1       	ldd	r23, Y+36	; 0x24
    1a7c:	8d a1       	ldd	r24, Y+37	; 0x25
    1a7e:	9e a1       	ldd	r25, Y+38	; 0x26
    1a80:	20 e0       	ldi	r18, 0x00	; 0
    1a82:	3f ef       	ldi	r19, 0xFF	; 255
    1a84:	4f e7       	ldi	r20, 0x7F	; 127
    1a86:	57 e4       	ldi	r21, 0x47	; 71
    1a88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a8c:	18 16       	cp	r1, r24
    1a8e:	4c f5       	brge	.+82     	; 0x1ae2 <HLCD_voidSendCommand+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a90:	6f a1       	ldd	r22, Y+39	; 0x27
    1a92:	78 a5       	ldd	r23, Y+40	; 0x28
    1a94:	89 a5       	ldd	r24, Y+41	; 0x29
    1a96:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	40 e2       	ldi	r20, 0x20	; 32
    1a9e:	51 e4       	ldi	r21, 0x41	; 65
    1aa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aa4:	dc 01       	movw	r26, r24
    1aa6:	cb 01       	movw	r24, r22
    1aa8:	bc 01       	movw	r22, r24
    1aaa:	cd 01       	movw	r24, r26
    1aac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab0:	dc 01       	movw	r26, r24
    1ab2:	cb 01       	movw	r24, r22
    1ab4:	9a a3       	std	Y+34, r25	; 0x22
    1ab6:	89 a3       	std	Y+33, r24	; 0x21
    1ab8:	0f c0       	rjmp	.+30     	; 0x1ad8 <HLCD_voidSendCommand+0x132>
    1aba:	88 ec       	ldi	r24, 0xC8	; 200
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	98 a3       	std	Y+32, r25	; 0x20
    1ac0:	8f 8f       	std	Y+31, r24	; 0x1f
    1ac2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ac4:	98 a1       	ldd	r25, Y+32	; 0x20
    1ac6:	01 97       	sbiw	r24, 0x01	; 1
    1ac8:	f1 f7       	brne	.-4      	; 0x1ac6 <HLCD_voidSendCommand+0x120>
    1aca:	98 a3       	std	Y+32, r25	; 0x20
    1acc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ace:	89 a1       	ldd	r24, Y+33	; 0x21
    1ad0:	9a a1       	ldd	r25, Y+34	; 0x22
    1ad2:	01 97       	sbiw	r24, 0x01	; 1
    1ad4:	9a a3       	std	Y+34, r25	; 0x22
    1ad6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ad8:	89 a1       	ldd	r24, Y+33	; 0x21
    1ada:	9a a1       	ldd	r25, Y+34	; 0x22
    1adc:	00 97       	sbiw	r24, 0x00	; 0
    1ade:	69 f7       	brne	.-38     	; 0x1aba <HLCD_voidSendCommand+0x114>
    1ae0:	14 c0       	rjmp	.+40     	; 0x1b0a <HLCD_voidSendCommand+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ae2:	6b a1       	ldd	r22, Y+35	; 0x23
    1ae4:	7c a1       	ldd	r23, Y+36	; 0x24
    1ae6:	8d a1       	ldd	r24, Y+37	; 0x25
    1ae8:	9e a1       	ldd	r25, Y+38	; 0x26
    1aea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aee:	dc 01       	movw	r26, r24
    1af0:	cb 01       	movw	r24, r22
    1af2:	9a a3       	std	Y+34, r25	; 0x22
    1af4:	89 a3       	std	Y+33, r24	; 0x21
    1af6:	89 a1       	ldd	r24, Y+33	; 0x21
    1af8:	9a a1       	ldd	r25, Y+34	; 0x22
    1afa:	9e 8f       	std	Y+30, r25	; 0x1e
    1afc:	8d 8f       	std	Y+29, r24	; 0x1d
    1afe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b00:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b02:	01 97       	sbiw	r24, 0x01	; 1
    1b04:	f1 f7       	brne	.-4      	; 0x1b02 <HLCD_voidSendCommand+0x15c>
    1b06:	9e 8f       	std	Y+30, r25	; 0x1e
    1b08:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_EN_PIN,DIO_LOW);
    1b0a:	80 e0       	ldi	r24, 0x00	; 0
    1b0c:	65 e0       	ldi	r22, 0x05	; 5
    1b0e:	40 e0       	ldi	r20, 0x00	; 0
    1b10:	0e 94 2e 0a 	call	0x145c	; 0x145c <MDIO_voidSetPinValue>
	
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PIN_4, GET_BIT(Copy_u8Cmd,0));
    1b14:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b16:	98 2f       	mov	r25, r24
    1b18:	91 70       	andi	r25, 0x01	; 1
    1b1a:	80 e0       	ldi	r24, 0x00	; 0
    1b1c:	60 e0       	ldi	r22, 0x00	; 0
    1b1e:	49 2f       	mov	r20, r25
    1b20:	0e 94 2e 0a 	call	0x145c	; 0x145c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PIN_5, GET_BIT(Copy_u8Cmd,1));
    1b24:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b26:	86 95       	lsr	r24
    1b28:	98 2f       	mov	r25, r24
    1b2a:	91 70       	andi	r25, 0x01	; 1
    1b2c:	80 e0       	ldi	r24, 0x00	; 0
    1b2e:	61 e0       	ldi	r22, 0x01	; 1
    1b30:	49 2f       	mov	r20, r25
    1b32:	0e 94 2e 0a 	call	0x145c	; 0x145c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PIN_6, GET_BIT(Copy_u8Cmd,2));
    1b36:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b38:	86 95       	lsr	r24
    1b3a:	86 95       	lsr	r24
    1b3c:	98 2f       	mov	r25, r24
    1b3e:	91 70       	andi	r25, 0x01	; 1
    1b40:	80 e0       	ldi	r24, 0x00	; 0
    1b42:	62 e0       	ldi	r22, 0x02	; 2
    1b44:	49 2f       	mov	r20, r25
    1b46:	0e 94 2e 0a 	call	0x145c	; 0x145c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PIN_7, GET_BIT(Copy_u8Cmd,3));
    1b4a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b4c:	86 95       	lsr	r24
    1b4e:	86 95       	lsr	r24
    1b50:	86 95       	lsr	r24
    1b52:	98 2f       	mov	r25, r24
    1b54:	91 70       	andi	r25, 0x01	; 1
    1b56:	80 e0       	ldi	r24, 0x00	; 0
    1b58:	63 e0       	ldi	r22, 0x03	; 3
    1b5a:	49 2f       	mov	r20, r25
    1b5c:	0e 94 2e 0a 	call	0x145c	; 0x145c <MDIO_voidSetPinValue>
	
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_EN_PIN,DIO_HIGH); //EN
    1b60:	80 e0       	ldi	r24, 0x00	; 0
    1b62:	65 e0       	ldi	r22, 0x05	; 5
    1b64:	41 e0       	ldi	r20, 0x01	; 1
    1b66:	0e 94 2e 0a 	call	0x145c	; 0x145c <MDIO_voidSetPinValue>
    1b6a:	80 e0       	ldi	r24, 0x00	; 0
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	a0 e8       	ldi	r26, 0x80	; 128
    1b70:	bf e3       	ldi	r27, 0x3F	; 63
    1b72:	89 8f       	std	Y+25, r24	; 0x19
    1b74:	9a 8f       	std	Y+26, r25	; 0x1a
    1b76:	ab 8f       	std	Y+27, r26	; 0x1b
    1b78:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b7a:	69 8d       	ldd	r22, Y+25	; 0x19
    1b7c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b80:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b82:	20 e0       	ldi	r18, 0x00	; 0
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	4a ef       	ldi	r20, 0xFA	; 250
    1b88:	54 e4       	ldi	r21, 0x44	; 68
    1b8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b8e:	dc 01       	movw	r26, r24
    1b90:	cb 01       	movw	r24, r22
    1b92:	8d 8b       	std	Y+21, r24	; 0x15
    1b94:	9e 8b       	std	Y+22, r25	; 0x16
    1b96:	af 8b       	std	Y+23, r26	; 0x17
    1b98:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b9a:	6d 89       	ldd	r22, Y+21	; 0x15
    1b9c:	7e 89       	ldd	r23, Y+22	; 0x16
    1b9e:	8f 89       	ldd	r24, Y+23	; 0x17
    1ba0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ba2:	20 e0       	ldi	r18, 0x00	; 0
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	40 e8       	ldi	r20, 0x80	; 128
    1ba8:	5f e3       	ldi	r21, 0x3F	; 63
    1baa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bae:	88 23       	and	r24, r24
    1bb0:	2c f4       	brge	.+10     	; 0x1bbc <HLCD_voidSendCommand+0x216>
		__ticks = 1;
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	9c 8b       	std	Y+20, r25	; 0x14
    1bb8:	8b 8b       	std	Y+19, r24	; 0x13
    1bba:	3f c0       	rjmp	.+126    	; 0x1c3a <HLCD_voidSendCommand+0x294>
	else if (__tmp > 65535)
    1bbc:	6d 89       	ldd	r22, Y+21	; 0x15
    1bbe:	7e 89       	ldd	r23, Y+22	; 0x16
    1bc0:	8f 89       	ldd	r24, Y+23	; 0x17
    1bc2:	98 8d       	ldd	r25, Y+24	; 0x18
    1bc4:	20 e0       	ldi	r18, 0x00	; 0
    1bc6:	3f ef       	ldi	r19, 0xFF	; 255
    1bc8:	4f e7       	ldi	r20, 0x7F	; 127
    1bca:	57 e4       	ldi	r21, 0x47	; 71
    1bcc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bd0:	18 16       	cp	r1, r24
    1bd2:	4c f5       	brge	.+82     	; 0x1c26 <HLCD_voidSendCommand+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bd4:	69 8d       	ldd	r22, Y+25	; 0x19
    1bd6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bd8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bda:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bdc:	20 e0       	ldi	r18, 0x00	; 0
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	40 e2       	ldi	r20, 0x20	; 32
    1be2:	51 e4       	ldi	r21, 0x41	; 65
    1be4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be8:	dc 01       	movw	r26, r24
    1bea:	cb 01       	movw	r24, r22
    1bec:	bc 01       	movw	r22, r24
    1bee:	cd 01       	movw	r24, r26
    1bf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	cb 01       	movw	r24, r22
    1bf8:	9c 8b       	std	Y+20, r25	; 0x14
    1bfa:	8b 8b       	std	Y+19, r24	; 0x13
    1bfc:	0f c0       	rjmp	.+30     	; 0x1c1c <HLCD_voidSendCommand+0x276>
    1bfe:	88 ec       	ldi	r24, 0xC8	; 200
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	9a 8b       	std	Y+18, r25	; 0x12
    1c04:	89 8b       	std	Y+17, r24	; 0x11
    1c06:	89 89       	ldd	r24, Y+17	; 0x11
    1c08:	9a 89       	ldd	r25, Y+18	; 0x12
    1c0a:	01 97       	sbiw	r24, 0x01	; 1
    1c0c:	f1 f7       	brne	.-4      	; 0x1c0a <HLCD_voidSendCommand+0x264>
    1c0e:	9a 8b       	std	Y+18, r25	; 0x12
    1c10:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c12:	8b 89       	ldd	r24, Y+19	; 0x13
    1c14:	9c 89       	ldd	r25, Y+20	; 0x14
    1c16:	01 97       	sbiw	r24, 0x01	; 1
    1c18:	9c 8b       	std	Y+20, r25	; 0x14
    1c1a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c1c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c1e:	9c 89       	ldd	r25, Y+20	; 0x14
    1c20:	00 97       	sbiw	r24, 0x00	; 0
    1c22:	69 f7       	brne	.-38     	; 0x1bfe <HLCD_voidSendCommand+0x258>
    1c24:	14 c0       	rjmp	.+40     	; 0x1c4e <HLCD_voidSendCommand+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c26:	6d 89       	ldd	r22, Y+21	; 0x15
    1c28:	7e 89       	ldd	r23, Y+22	; 0x16
    1c2a:	8f 89       	ldd	r24, Y+23	; 0x17
    1c2c:	98 8d       	ldd	r25, Y+24	; 0x18
    1c2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c32:	dc 01       	movw	r26, r24
    1c34:	cb 01       	movw	r24, r22
    1c36:	9c 8b       	std	Y+20, r25	; 0x14
    1c38:	8b 8b       	std	Y+19, r24	; 0x13
    1c3a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c3c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c3e:	98 8b       	std	Y+16, r25	; 0x10
    1c40:	8f 87       	std	Y+15, r24	; 0x0f
    1c42:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c44:	98 89       	ldd	r25, Y+16	; 0x10
    1c46:	01 97       	sbiw	r24, 0x01	; 1
    1c48:	f1 f7       	brne	.-4      	; 0x1c46 <HLCD_voidSendCommand+0x2a0>
    1c4a:	98 8b       	std	Y+16, r25	; 0x10
    1c4c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_EN_PIN,DIO_LOW);
    1c4e:	80 e0       	ldi	r24, 0x00	; 0
    1c50:	65 e0       	ldi	r22, 0x05	; 5
    1c52:	40 e0       	ldi	r20, 0x00	; 0
    1c54:	0e 94 2e 0a 	call	0x145c	; 0x145c <MDIO_voidSetPinValue>
    1c58:	80 e0       	ldi	r24, 0x00	; 0
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	a0 ea       	ldi	r26, 0xA0	; 160
    1c5e:	b0 e4       	ldi	r27, 0x40	; 64
    1c60:	8b 87       	std	Y+11, r24	; 0x0b
    1c62:	9c 87       	std	Y+12, r25	; 0x0c
    1c64:	ad 87       	std	Y+13, r26	; 0x0d
    1c66:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c68:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c70:	20 e0       	ldi	r18, 0x00	; 0
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	4a ef       	ldi	r20, 0xFA	; 250
    1c76:	54 e4       	ldi	r21, 0x44	; 68
    1c78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c7c:	dc 01       	movw	r26, r24
    1c7e:	cb 01       	movw	r24, r22
    1c80:	8f 83       	std	Y+7, r24	; 0x07
    1c82:	98 87       	std	Y+8, r25	; 0x08
    1c84:	a9 87       	std	Y+9, r26	; 0x09
    1c86:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c88:	6f 81       	ldd	r22, Y+7	; 0x07
    1c8a:	78 85       	ldd	r23, Y+8	; 0x08
    1c8c:	89 85       	ldd	r24, Y+9	; 0x09
    1c8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c90:	20 e0       	ldi	r18, 0x00	; 0
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	40 e8       	ldi	r20, 0x80	; 128
    1c96:	5f e3       	ldi	r21, 0x3F	; 63
    1c98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c9c:	88 23       	and	r24, r24
    1c9e:	2c f4       	brge	.+10     	; 0x1caa <HLCD_voidSendCommand+0x304>
		__ticks = 1;
    1ca0:	81 e0       	ldi	r24, 0x01	; 1
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	9e 83       	std	Y+6, r25	; 0x06
    1ca6:	8d 83       	std	Y+5, r24	; 0x05
    1ca8:	3f c0       	rjmp	.+126    	; 0x1d28 <HLCD_voidSendCommand+0x382>
	else if (__tmp > 65535)
    1caa:	6f 81       	ldd	r22, Y+7	; 0x07
    1cac:	78 85       	ldd	r23, Y+8	; 0x08
    1cae:	89 85       	ldd	r24, Y+9	; 0x09
    1cb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb2:	20 e0       	ldi	r18, 0x00	; 0
    1cb4:	3f ef       	ldi	r19, 0xFF	; 255
    1cb6:	4f e7       	ldi	r20, 0x7F	; 127
    1cb8:	57 e4       	ldi	r21, 0x47	; 71
    1cba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cbe:	18 16       	cp	r1, r24
    1cc0:	4c f5       	brge	.+82     	; 0x1d14 <HLCD_voidSendCommand+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cc2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cc4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cca:	20 e0       	ldi	r18, 0x00	; 0
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	40 e2       	ldi	r20, 0x20	; 32
    1cd0:	51 e4       	ldi	r21, 0x41	; 65
    1cd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd6:	dc 01       	movw	r26, r24
    1cd8:	cb 01       	movw	r24, r22
    1cda:	bc 01       	movw	r22, r24
    1cdc:	cd 01       	movw	r24, r26
    1cde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	9e 83       	std	Y+6, r25	; 0x06
    1ce8:	8d 83       	std	Y+5, r24	; 0x05
    1cea:	0f c0       	rjmp	.+30     	; 0x1d0a <HLCD_voidSendCommand+0x364>
    1cec:	88 ec       	ldi	r24, 0xC8	; 200
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	9c 83       	std	Y+4, r25	; 0x04
    1cf2:	8b 83       	std	Y+3, r24	; 0x03
    1cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf8:	01 97       	sbiw	r24, 0x01	; 1
    1cfa:	f1 f7       	brne	.-4      	; 0x1cf8 <HLCD_voidSendCommand+0x352>
    1cfc:	9c 83       	std	Y+4, r25	; 0x04
    1cfe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d00:	8d 81       	ldd	r24, Y+5	; 0x05
    1d02:	9e 81       	ldd	r25, Y+6	; 0x06
    1d04:	01 97       	sbiw	r24, 0x01	; 1
    1d06:	9e 83       	std	Y+6, r25	; 0x06
    1d08:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d0e:	00 97       	sbiw	r24, 0x00	; 0
    1d10:	69 f7       	brne	.-38     	; 0x1cec <HLCD_voidSendCommand+0x346>
    1d12:	14 c0       	rjmp	.+40     	; 0x1d3c <HLCD_voidSendCommand+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d14:	6f 81       	ldd	r22, Y+7	; 0x07
    1d16:	78 85       	ldd	r23, Y+8	; 0x08
    1d18:	89 85       	ldd	r24, Y+9	; 0x09
    1d1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d20:	dc 01       	movw	r26, r24
    1d22:	cb 01       	movw	r24, r22
    1d24:	9e 83       	std	Y+6, r25	; 0x06
    1d26:	8d 83       	std	Y+5, r24	; 0x05
    1d28:	8d 81       	ldd	r24, Y+5	; 0x05
    1d2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d2c:	9a 83       	std	Y+2, r25	; 0x02
    1d2e:	89 83       	std	Y+1, r24	; 0x01
    1d30:	89 81       	ldd	r24, Y+1	; 0x01
    1d32:	9a 81       	ldd	r25, Y+2	; 0x02
    1d34:	01 97       	sbiw	r24, 0x01	; 1
    1d36:	f1 f7       	brne	.-4      	; 0x1d34 <HLCD_voidSendCommand+0x38e>
    1d38:	9a 83       	std	Y+2, r25	; 0x02
    1d3a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	#endif
}
    1d3c:	ab 96       	adiw	r28, 0x2b	; 43
    1d3e:	0f b6       	in	r0, 0x3f	; 63
    1d40:	f8 94       	cli
    1d42:	de bf       	out	0x3e, r29	; 62
    1d44:	0f be       	out	0x3f, r0	; 63
    1d46:	cd bf       	out	0x3d, r28	; 61
    1d48:	cf 91       	pop	r28
    1d4a:	df 91       	pop	r29
    1d4c:	08 95       	ret

00001d4e <HLCD_voidSendData>:
 * Description : Send Char to LCD												*
 * Arguments   : Char : takes Char		 										*
 * return      : void															*
 *==============================================================================*/
void HLCD_voidSendData(u8 Copy_u8Data)
{
    1d4e:	df 93       	push	r29
    1d50:	cf 93       	push	r28
    1d52:	cd b7       	in	r28, 0x3d	; 61
    1d54:	de b7       	in	r29, 0x3e	; 62
    1d56:	ab 97       	sbiw	r28, 0x2b	; 43
    1d58:	0f b6       	in	r0, 0x3f	; 63
    1d5a:	f8 94       	cli
    1d5c:	de bf       	out	0x3e, r29	; 62
    1d5e:	0f be       	out	0x3f, r0	; 63
    1d60:	cd bf       	out	0x3d, r28	; 61
    1d62:	8b a7       	std	Y+43, r24	; 0x2b
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_EN_PIN,DIO_LOW);
	_delay_ms(5);
	
	#elif (LCD_MODE == _4_BIT_MODE)
	//to select command register
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_RS_PIN,DIO_HIGH);
    1d64:	80 e0       	ldi	r24, 0x00	; 0
    1d66:	64 e0       	ldi	r22, 0x04	; 4
    1d68:	41 e0       	ldi	r20, 0x01	; 1
    1d6a:	0e 94 2e 0a 	call	0x145c	; 0x145c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PIN_4, GET_BIT(Copy_u8Data,4));
    1d6e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d70:	82 95       	swap	r24
    1d72:	8f 70       	andi	r24, 0x0F	; 15
    1d74:	98 2f       	mov	r25, r24
    1d76:	91 70       	andi	r25, 0x01	; 1
    1d78:	80 e0       	ldi	r24, 0x00	; 0
    1d7a:	60 e0       	ldi	r22, 0x00	; 0
    1d7c:	49 2f       	mov	r20, r25
    1d7e:	0e 94 2e 0a 	call	0x145c	; 0x145c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PIN_5, GET_BIT(Copy_u8Data,5));
    1d82:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d84:	82 95       	swap	r24
    1d86:	86 95       	lsr	r24
    1d88:	87 70       	andi	r24, 0x07	; 7
    1d8a:	98 2f       	mov	r25, r24
    1d8c:	91 70       	andi	r25, 0x01	; 1
    1d8e:	80 e0       	ldi	r24, 0x00	; 0
    1d90:	61 e0       	ldi	r22, 0x01	; 1
    1d92:	49 2f       	mov	r20, r25
    1d94:	0e 94 2e 0a 	call	0x145c	; 0x145c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PIN_6, GET_BIT(Copy_u8Data,6));
    1d98:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d9a:	82 95       	swap	r24
    1d9c:	86 95       	lsr	r24
    1d9e:	86 95       	lsr	r24
    1da0:	83 70       	andi	r24, 0x03	; 3
    1da2:	98 2f       	mov	r25, r24
    1da4:	91 70       	andi	r25, 0x01	; 1
    1da6:	80 e0       	ldi	r24, 0x00	; 0
    1da8:	62 e0       	ldi	r22, 0x02	; 2
    1daa:	49 2f       	mov	r20, r25
    1dac:	0e 94 2e 0a 	call	0x145c	; 0x145c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PIN_7, GET_BIT(Copy_u8Data,7));
    1db0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1db2:	98 2f       	mov	r25, r24
    1db4:	99 1f       	adc	r25, r25
    1db6:	99 27       	eor	r25, r25
    1db8:	99 1f       	adc	r25, r25
    1dba:	80 e0       	ldi	r24, 0x00	; 0
    1dbc:	63 e0       	ldi	r22, 0x03	; 3
    1dbe:	49 2f       	mov	r20, r25
    1dc0:	0e 94 2e 0a 	call	0x145c	; 0x145c <MDIO_voidSetPinValue>

	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_EN_PIN,DIO_HIGH); //EN
    1dc4:	80 e0       	ldi	r24, 0x00	; 0
    1dc6:	65 e0       	ldi	r22, 0x05	; 5
    1dc8:	41 e0       	ldi	r20, 0x01	; 1
    1dca:	0e 94 2e 0a 	call	0x145c	; 0x145c <MDIO_voidSetPinValue>
    1dce:	80 e0       	ldi	r24, 0x00	; 0
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	a0 e8       	ldi	r26, 0x80	; 128
    1dd4:	bf e3       	ldi	r27, 0x3F	; 63
    1dd6:	8f a3       	std	Y+39, r24	; 0x27
    1dd8:	98 a7       	std	Y+40, r25	; 0x28
    1dda:	a9 a7       	std	Y+41, r26	; 0x29
    1ddc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dde:	6f a1       	ldd	r22, Y+39	; 0x27
    1de0:	78 a5       	ldd	r23, Y+40	; 0x28
    1de2:	89 a5       	ldd	r24, Y+41	; 0x29
    1de4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1de6:	20 e0       	ldi	r18, 0x00	; 0
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	4a ef       	ldi	r20, 0xFA	; 250
    1dec:	54 e4       	ldi	r21, 0x44	; 68
    1dee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df2:	dc 01       	movw	r26, r24
    1df4:	cb 01       	movw	r24, r22
    1df6:	8b a3       	std	Y+35, r24	; 0x23
    1df8:	9c a3       	std	Y+36, r25	; 0x24
    1dfa:	ad a3       	std	Y+37, r26	; 0x25
    1dfc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1dfe:	6b a1       	ldd	r22, Y+35	; 0x23
    1e00:	7c a1       	ldd	r23, Y+36	; 0x24
    1e02:	8d a1       	ldd	r24, Y+37	; 0x25
    1e04:	9e a1       	ldd	r25, Y+38	; 0x26
    1e06:	20 e0       	ldi	r18, 0x00	; 0
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	40 e8       	ldi	r20, 0x80	; 128
    1e0c:	5f e3       	ldi	r21, 0x3F	; 63
    1e0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e12:	88 23       	and	r24, r24
    1e14:	2c f4       	brge	.+10     	; 0x1e20 <HLCD_voidSendData+0xd2>
		__ticks = 1;
    1e16:	81 e0       	ldi	r24, 0x01	; 1
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	9a a3       	std	Y+34, r25	; 0x22
    1e1c:	89 a3       	std	Y+33, r24	; 0x21
    1e1e:	3f c0       	rjmp	.+126    	; 0x1e9e <HLCD_voidSendData+0x150>
	else if (__tmp > 65535)
    1e20:	6b a1       	ldd	r22, Y+35	; 0x23
    1e22:	7c a1       	ldd	r23, Y+36	; 0x24
    1e24:	8d a1       	ldd	r24, Y+37	; 0x25
    1e26:	9e a1       	ldd	r25, Y+38	; 0x26
    1e28:	20 e0       	ldi	r18, 0x00	; 0
    1e2a:	3f ef       	ldi	r19, 0xFF	; 255
    1e2c:	4f e7       	ldi	r20, 0x7F	; 127
    1e2e:	57 e4       	ldi	r21, 0x47	; 71
    1e30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e34:	18 16       	cp	r1, r24
    1e36:	4c f5       	brge	.+82     	; 0x1e8a <HLCD_voidSendData+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e38:	6f a1       	ldd	r22, Y+39	; 0x27
    1e3a:	78 a5       	ldd	r23, Y+40	; 0x28
    1e3c:	89 a5       	ldd	r24, Y+41	; 0x29
    1e3e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	40 e2       	ldi	r20, 0x20	; 32
    1e46:	51 e4       	ldi	r21, 0x41	; 65
    1e48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	cb 01       	movw	r24, r22
    1e50:	bc 01       	movw	r22, r24
    1e52:	cd 01       	movw	r24, r26
    1e54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e58:	dc 01       	movw	r26, r24
    1e5a:	cb 01       	movw	r24, r22
    1e5c:	9a a3       	std	Y+34, r25	; 0x22
    1e5e:	89 a3       	std	Y+33, r24	; 0x21
    1e60:	0f c0       	rjmp	.+30     	; 0x1e80 <HLCD_voidSendData+0x132>
    1e62:	88 ec       	ldi	r24, 0xC8	; 200
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	98 a3       	std	Y+32, r25	; 0x20
    1e68:	8f 8f       	std	Y+31, r24	; 0x1f
    1e6a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e6c:	98 a1       	ldd	r25, Y+32	; 0x20
    1e6e:	01 97       	sbiw	r24, 0x01	; 1
    1e70:	f1 f7       	brne	.-4      	; 0x1e6e <HLCD_voidSendData+0x120>
    1e72:	98 a3       	std	Y+32, r25	; 0x20
    1e74:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e76:	89 a1       	ldd	r24, Y+33	; 0x21
    1e78:	9a a1       	ldd	r25, Y+34	; 0x22
    1e7a:	01 97       	sbiw	r24, 0x01	; 1
    1e7c:	9a a3       	std	Y+34, r25	; 0x22
    1e7e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e80:	89 a1       	ldd	r24, Y+33	; 0x21
    1e82:	9a a1       	ldd	r25, Y+34	; 0x22
    1e84:	00 97       	sbiw	r24, 0x00	; 0
    1e86:	69 f7       	brne	.-38     	; 0x1e62 <HLCD_voidSendData+0x114>
    1e88:	14 c0       	rjmp	.+40     	; 0x1eb2 <HLCD_voidSendData+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e8a:	6b a1       	ldd	r22, Y+35	; 0x23
    1e8c:	7c a1       	ldd	r23, Y+36	; 0x24
    1e8e:	8d a1       	ldd	r24, Y+37	; 0x25
    1e90:	9e a1       	ldd	r25, Y+38	; 0x26
    1e92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e96:	dc 01       	movw	r26, r24
    1e98:	cb 01       	movw	r24, r22
    1e9a:	9a a3       	std	Y+34, r25	; 0x22
    1e9c:	89 a3       	std	Y+33, r24	; 0x21
    1e9e:	89 a1       	ldd	r24, Y+33	; 0x21
    1ea0:	9a a1       	ldd	r25, Y+34	; 0x22
    1ea2:	9e 8f       	std	Y+30, r25	; 0x1e
    1ea4:	8d 8f       	std	Y+29, r24	; 0x1d
    1ea6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ea8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1eaa:	01 97       	sbiw	r24, 0x01	; 1
    1eac:	f1 f7       	brne	.-4      	; 0x1eaa <HLCD_voidSendData+0x15c>
    1eae:	9e 8f       	std	Y+30, r25	; 0x1e
    1eb0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_EN_PIN,DIO_LOW);
    1eb2:	80 e0       	ldi	r24, 0x00	; 0
    1eb4:	65 e0       	ldi	r22, 0x05	; 5
    1eb6:	40 e0       	ldi	r20, 0x00	; 0
    1eb8:	0e 94 2e 0a 	call	0x145c	; 0x145c <MDIO_voidSetPinValue>
	
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PIN_4, GET_BIT(Copy_u8Data,0));
    1ebc:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ebe:	98 2f       	mov	r25, r24
    1ec0:	91 70       	andi	r25, 0x01	; 1
    1ec2:	80 e0       	ldi	r24, 0x00	; 0
    1ec4:	60 e0       	ldi	r22, 0x00	; 0
    1ec6:	49 2f       	mov	r20, r25
    1ec8:	0e 94 2e 0a 	call	0x145c	; 0x145c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PIN_5, GET_BIT(Copy_u8Data,1));
    1ecc:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ece:	86 95       	lsr	r24
    1ed0:	98 2f       	mov	r25, r24
    1ed2:	91 70       	andi	r25, 0x01	; 1
    1ed4:	80 e0       	ldi	r24, 0x00	; 0
    1ed6:	61 e0       	ldi	r22, 0x01	; 1
    1ed8:	49 2f       	mov	r20, r25
    1eda:	0e 94 2e 0a 	call	0x145c	; 0x145c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PIN_6, GET_BIT(Copy_u8Data,2));
    1ede:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ee0:	86 95       	lsr	r24
    1ee2:	86 95       	lsr	r24
    1ee4:	98 2f       	mov	r25, r24
    1ee6:	91 70       	andi	r25, 0x01	; 1
    1ee8:	80 e0       	ldi	r24, 0x00	; 0
    1eea:	62 e0       	ldi	r22, 0x02	; 2
    1eec:	49 2f       	mov	r20, r25
    1eee:	0e 94 2e 0a 	call	0x145c	; 0x145c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PIN_7, GET_BIT(Copy_u8Data,3));
    1ef2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ef4:	86 95       	lsr	r24
    1ef6:	86 95       	lsr	r24
    1ef8:	86 95       	lsr	r24
    1efa:	98 2f       	mov	r25, r24
    1efc:	91 70       	andi	r25, 0x01	; 1
    1efe:	80 e0       	ldi	r24, 0x00	; 0
    1f00:	63 e0       	ldi	r22, 0x03	; 3
    1f02:	49 2f       	mov	r20, r25
    1f04:	0e 94 2e 0a 	call	0x145c	; 0x145c <MDIO_voidSetPinValue>
	
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_EN_PIN,DIO_HIGH); //EN
    1f08:	80 e0       	ldi	r24, 0x00	; 0
    1f0a:	65 e0       	ldi	r22, 0x05	; 5
    1f0c:	41 e0       	ldi	r20, 0x01	; 1
    1f0e:	0e 94 2e 0a 	call	0x145c	; 0x145c <MDIO_voidSetPinValue>
    1f12:	80 e0       	ldi	r24, 0x00	; 0
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	a0 e8       	ldi	r26, 0x80	; 128
    1f18:	bf e3       	ldi	r27, 0x3F	; 63
    1f1a:	89 8f       	std	Y+25, r24	; 0x19
    1f1c:	9a 8f       	std	Y+26, r25	; 0x1a
    1f1e:	ab 8f       	std	Y+27, r26	; 0x1b
    1f20:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f22:	69 8d       	ldd	r22, Y+25	; 0x19
    1f24:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f26:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f28:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f2a:	20 e0       	ldi	r18, 0x00	; 0
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	4a ef       	ldi	r20, 0xFA	; 250
    1f30:	54 e4       	ldi	r21, 0x44	; 68
    1f32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	8d 8b       	std	Y+21, r24	; 0x15
    1f3c:	9e 8b       	std	Y+22, r25	; 0x16
    1f3e:	af 8b       	std	Y+23, r26	; 0x17
    1f40:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f42:	6d 89       	ldd	r22, Y+21	; 0x15
    1f44:	7e 89       	ldd	r23, Y+22	; 0x16
    1f46:	8f 89       	ldd	r24, Y+23	; 0x17
    1f48:	98 8d       	ldd	r25, Y+24	; 0x18
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	40 e8       	ldi	r20, 0x80	; 128
    1f50:	5f e3       	ldi	r21, 0x3F	; 63
    1f52:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f56:	88 23       	and	r24, r24
    1f58:	2c f4       	brge	.+10     	; 0x1f64 <HLCD_voidSendData+0x216>
		__ticks = 1;
    1f5a:	81 e0       	ldi	r24, 0x01	; 1
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	9c 8b       	std	Y+20, r25	; 0x14
    1f60:	8b 8b       	std	Y+19, r24	; 0x13
    1f62:	3f c0       	rjmp	.+126    	; 0x1fe2 <HLCD_voidSendData+0x294>
	else if (__tmp > 65535)
    1f64:	6d 89       	ldd	r22, Y+21	; 0x15
    1f66:	7e 89       	ldd	r23, Y+22	; 0x16
    1f68:	8f 89       	ldd	r24, Y+23	; 0x17
    1f6a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f6c:	20 e0       	ldi	r18, 0x00	; 0
    1f6e:	3f ef       	ldi	r19, 0xFF	; 255
    1f70:	4f e7       	ldi	r20, 0x7F	; 127
    1f72:	57 e4       	ldi	r21, 0x47	; 71
    1f74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f78:	18 16       	cp	r1, r24
    1f7a:	4c f5       	brge	.+82     	; 0x1fce <HLCD_voidSendData+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f7c:	69 8d       	ldd	r22, Y+25	; 0x19
    1f7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f80:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f82:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f84:	20 e0       	ldi	r18, 0x00	; 0
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	40 e2       	ldi	r20, 0x20	; 32
    1f8a:	51 e4       	ldi	r21, 0x41	; 65
    1f8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f90:	dc 01       	movw	r26, r24
    1f92:	cb 01       	movw	r24, r22
    1f94:	bc 01       	movw	r22, r24
    1f96:	cd 01       	movw	r24, r26
    1f98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	cb 01       	movw	r24, r22
    1fa0:	9c 8b       	std	Y+20, r25	; 0x14
    1fa2:	8b 8b       	std	Y+19, r24	; 0x13
    1fa4:	0f c0       	rjmp	.+30     	; 0x1fc4 <HLCD_voidSendData+0x276>
    1fa6:	88 ec       	ldi	r24, 0xC8	; 200
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	9a 8b       	std	Y+18, r25	; 0x12
    1fac:	89 8b       	std	Y+17, r24	; 0x11
    1fae:	89 89       	ldd	r24, Y+17	; 0x11
    1fb0:	9a 89       	ldd	r25, Y+18	; 0x12
    1fb2:	01 97       	sbiw	r24, 0x01	; 1
    1fb4:	f1 f7       	brne	.-4      	; 0x1fb2 <HLCD_voidSendData+0x264>
    1fb6:	9a 8b       	std	Y+18, r25	; 0x12
    1fb8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fba:	8b 89       	ldd	r24, Y+19	; 0x13
    1fbc:	9c 89       	ldd	r25, Y+20	; 0x14
    1fbe:	01 97       	sbiw	r24, 0x01	; 1
    1fc0:	9c 8b       	std	Y+20, r25	; 0x14
    1fc2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fc4:	8b 89       	ldd	r24, Y+19	; 0x13
    1fc6:	9c 89       	ldd	r25, Y+20	; 0x14
    1fc8:	00 97       	sbiw	r24, 0x00	; 0
    1fca:	69 f7       	brne	.-38     	; 0x1fa6 <HLCD_voidSendData+0x258>
    1fcc:	14 c0       	rjmp	.+40     	; 0x1ff6 <HLCD_voidSendData+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fce:	6d 89       	ldd	r22, Y+21	; 0x15
    1fd0:	7e 89       	ldd	r23, Y+22	; 0x16
    1fd2:	8f 89       	ldd	r24, Y+23	; 0x17
    1fd4:	98 8d       	ldd	r25, Y+24	; 0x18
    1fd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fda:	dc 01       	movw	r26, r24
    1fdc:	cb 01       	movw	r24, r22
    1fde:	9c 8b       	std	Y+20, r25	; 0x14
    1fe0:	8b 8b       	std	Y+19, r24	; 0x13
    1fe2:	8b 89       	ldd	r24, Y+19	; 0x13
    1fe4:	9c 89       	ldd	r25, Y+20	; 0x14
    1fe6:	98 8b       	std	Y+16, r25	; 0x10
    1fe8:	8f 87       	std	Y+15, r24	; 0x0f
    1fea:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fec:	98 89       	ldd	r25, Y+16	; 0x10
    1fee:	01 97       	sbiw	r24, 0x01	; 1
    1ff0:	f1 f7       	brne	.-4      	; 0x1fee <HLCD_voidSendData+0x2a0>
    1ff2:	98 8b       	std	Y+16, r25	; 0x10
    1ff4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_voidSetPinValue(LCD_DATA_PORT,LCD_EN_PIN,DIO_LOW);
    1ff6:	80 e0       	ldi	r24, 0x00	; 0
    1ff8:	65 e0       	ldi	r22, 0x05	; 5
    1ffa:	40 e0       	ldi	r20, 0x00	; 0
    1ffc:	0e 94 2e 0a 	call	0x145c	; 0x145c <MDIO_voidSetPinValue>
    2000:	80 e0       	ldi	r24, 0x00	; 0
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	a0 ea       	ldi	r26, 0xA0	; 160
    2006:	b0 e4       	ldi	r27, 0x40	; 64
    2008:	8b 87       	std	Y+11, r24	; 0x0b
    200a:	9c 87       	std	Y+12, r25	; 0x0c
    200c:	ad 87       	std	Y+13, r26	; 0x0d
    200e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2010:	6b 85       	ldd	r22, Y+11	; 0x0b
    2012:	7c 85       	ldd	r23, Y+12	; 0x0c
    2014:	8d 85       	ldd	r24, Y+13	; 0x0d
    2016:	9e 85       	ldd	r25, Y+14	; 0x0e
    2018:	20 e0       	ldi	r18, 0x00	; 0
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	4a ef       	ldi	r20, 0xFA	; 250
    201e:	54 e4       	ldi	r21, 0x44	; 68
    2020:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2024:	dc 01       	movw	r26, r24
    2026:	cb 01       	movw	r24, r22
    2028:	8f 83       	std	Y+7, r24	; 0x07
    202a:	98 87       	std	Y+8, r25	; 0x08
    202c:	a9 87       	std	Y+9, r26	; 0x09
    202e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2030:	6f 81       	ldd	r22, Y+7	; 0x07
    2032:	78 85       	ldd	r23, Y+8	; 0x08
    2034:	89 85       	ldd	r24, Y+9	; 0x09
    2036:	9a 85       	ldd	r25, Y+10	; 0x0a
    2038:	20 e0       	ldi	r18, 0x00	; 0
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	40 e8       	ldi	r20, 0x80	; 128
    203e:	5f e3       	ldi	r21, 0x3F	; 63
    2040:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2044:	88 23       	and	r24, r24
    2046:	2c f4       	brge	.+10     	; 0x2052 <HLCD_voidSendData+0x304>
		__ticks = 1;
    2048:	81 e0       	ldi	r24, 0x01	; 1
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	9e 83       	std	Y+6, r25	; 0x06
    204e:	8d 83       	std	Y+5, r24	; 0x05
    2050:	3f c0       	rjmp	.+126    	; 0x20d0 <HLCD_voidSendData+0x382>
	else if (__tmp > 65535)
    2052:	6f 81       	ldd	r22, Y+7	; 0x07
    2054:	78 85       	ldd	r23, Y+8	; 0x08
    2056:	89 85       	ldd	r24, Y+9	; 0x09
    2058:	9a 85       	ldd	r25, Y+10	; 0x0a
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	3f ef       	ldi	r19, 0xFF	; 255
    205e:	4f e7       	ldi	r20, 0x7F	; 127
    2060:	57 e4       	ldi	r21, 0x47	; 71
    2062:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2066:	18 16       	cp	r1, r24
    2068:	4c f5       	brge	.+82     	; 0x20bc <HLCD_voidSendData+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    206a:	6b 85       	ldd	r22, Y+11	; 0x0b
    206c:	7c 85       	ldd	r23, Y+12	; 0x0c
    206e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2070:	9e 85       	ldd	r25, Y+14	; 0x0e
    2072:	20 e0       	ldi	r18, 0x00	; 0
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	40 e2       	ldi	r20, 0x20	; 32
    2078:	51 e4       	ldi	r21, 0x41	; 65
    207a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    207e:	dc 01       	movw	r26, r24
    2080:	cb 01       	movw	r24, r22
    2082:	bc 01       	movw	r22, r24
    2084:	cd 01       	movw	r24, r26
    2086:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    208a:	dc 01       	movw	r26, r24
    208c:	cb 01       	movw	r24, r22
    208e:	9e 83       	std	Y+6, r25	; 0x06
    2090:	8d 83       	std	Y+5, r24	; 0x05
    2092:	0f c0       	rjmp	.+30     	; 0x20b2 <HLCD_voidSendData+0x364>
    2094:	88 ec       	ldi	r24, 0xC8	; 200
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	9c 83       	std	Y+4, r25	; 0x04
    209a:	8b 83       	std	Y+3, r24	; 0x03
    209c:	8b 81       	ldd	r24, Y+3	; 0x03
    209e:	9c 81       	ldd	r25, Y+4	; 0x04
    20a0:	01 97       	sbiw	r24, 0x01	; 1
    20a2:	f1 f7       	brne	.-4      	; 0x20a0 <HLCD_voidSendData+0x352>
    20a4:	9c 83       	std	Y+4, r25	; 0x04
    20a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20a8:	8d 81       	ldd	r24, Y+5	; 0x05
    20aa:	9e 81       	ldd	r25, Y+6	; 0x06
    20ac:	01 97       	sbiw	r24, 0x01	; 1
    20ae:	9e 83       	std	Y+6, r25	; 0x06
    20b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20b2:	8d 81       	ldd	r24, Y+5	; 0x05
    20b4:	9e 81       	ldd	r25, Y+6	; 0x06
    20b6:	00 97       	sbiw	r24, 0x00	; 0
    20b8:	69 f7       	brne	.-38     	; 0x2094 <HLCD_voidSendData+0x346>
    20ba:	14 c0       	rjmp	.+40     	; 0x20e4 <HLCD_voidSendData+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20bc:	6f 81       	ldd	r22, Y+7	; 0x07
    20be:	78 85       	ldd	r23, Y+8	; 0x08
    20c0:	89 85       	ldd	r24, Y+9	; 0x09
    20c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c8:	dc 01       	movw	r26, r24
    20ca:	cb 01       	movw	r24, r22
    20cc:	9e 83       	std	Y+6, r25	; 0x06
    20ce:	8d 83       	std	Y+5, r24	; 0x05
    20d0:	8d 81       	ldd	r24, Y+5	; 0x05
    20d2:	9e 81       	ldd	r25, Y+6	; 0x06
    20d4:	9a 83       	std	Y+2, r25	; 0x02
    20d6:	89 83       	std	Y+1, r24	; 0x01
    20d8:	89 81       	ldd	r24, Y+1	; 0x01
    20da:	9a 81       	ldd	r25, Y+2	; 0x02
    20dc:	01 97       	sbiw	r24, 0x01	; 1
    20de:	f1 f7       	brne	.-4      	; 0x20dc <HLCD_voidSendData+0x38e>
    20e0:	9a 83       	std	Y+2, r25	; 0x02
    20e2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	#endif
}
    20e4:	ab 96       	adiw	r28, 0x2b	; 43
    20e6:	0f b6       	in	r0, 0x3f	; 63
    20e8:	f8 94       	cli
    20ea:	de bf       	out	0x3e, r29	; 62
    20ec:	0f be       	out	0x3f, r0	; 63
    20ee:	cd bf       	out	0x3d, r28	; 61
    20f0:	cf 91       	pop	r28
    20f2:	df 91       	pop	r29
    20f4:	08 95       	ret

000020f6 <HLCD_voidClearDisplay>:
 * Description : Clear LCD Display												*
 * Arguments   : void						 									*
 * return      : void															*
 *==============================================================================*/
void HLCD_voidClearDisplay(void)
{
    20f6:	df 93       	push	r29
    20f8:	cf 93       	push	r28
    20fa:	cd b7       	in	r28, 0x3d	; 61
    20fc:	de b7       	in	r29, 0x3e	; 62
	HLCD_voidSendCommand(0x01);
    20fe:	81 e0       	ldi	r24, 0x01	; 1
    2100:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <HLCD_voidSendCommand>
}
    2104:	cf 91       	pop	r28
    2106:	df 91       	pop	r29
    2108:	08 95       	ret

0000210a <HLCD_voidSendString>:
 * Description : Send String to LCD												*
 * Arguments   : String : takes String		 									*
 * return      : void															*
 *==============================================================================*/
void HLCD_voidSendString(u8 *Ptr_u8PtrString)
{
    210a:	df 93       	push	r29
    210c:	cf 93       	push	r28
    210e:	00 d0       	rcall	.+0      	; 0x2110 <HLCD_voidSendString+0x6>
    2110:	cd b7       	in	r28, 0x3d	; 61
    2112:	de b7       	in	r29, 0x3e	; 62
    2114:	9a 83       	std	Y+2, r25	; 0x02
    2116:	89 83       	std	Y+1, r24	; 0x01
    2118:	0a c0       	rjmp	.+20     	; 0x212e <HLCD_voidSendString+0x24>
	while(*Ptr_u8PtrString != 0)
	{
		HLCD_voidSendData(*Ptr_u8PtrString);
    211a:	e9 81       	ldd	r30, Y+1	; 0x01
    211c:	fa 81       	ldd	r31, Y+2	; 0x02
    211e:	80 81       	ld	r24, Z
    2120:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <HLCD_voidSendData>
		Ptr_u8PtrString++;
    2124:	89 81       	ldd	r24, Y+1	; 0x01
    2126:	9a 81       	ldd	r25, Y+2	; 0x02
    2128:	01 96       	adiw	r24, 0x01	; 1
    212a:	9a 83       	std	Y+2, r25	; 0x02
    212c:	89 83       	std	Y+1, r24	; 0x01
 * Arguments   : String : takes String		 									*
 * return      : void															*
 *==============================================================================*/
void HLCD_voidSendString(u8 *Ptr_u8PtrString)
{
	while(*Ptr_u8PtrString != 0)
    212e:	e9 81       	ldd	r30, Y+1	; 0x01
    2130:	fa 81       	ldd	r31, Y+2	; 0x02
    2132:	80 81       	ld	r24, Z
    2134:	88 23       	and	r24, r24
    2136:	89 f7       	brne	.-30     	; 0x211a <HLCD_voidSendString+0x10>
	{
		HLCD_voidSendData(*Ptr_u8PtrString);
		Ptr_u8PtrString++;
	}
}
    2138:	0f 90       	pop	r0
    213a:	0f 90       	pop	r0
    213c:	cf 91       	pop	r28
    213e:	df 91       	pop	r29
    2140:	08 95       	ret

00002142 <HLCD_voidGoToPosition>:
 * Description : Send Position to LCD											*
 * Arguments   : N.OF ROW AND N.OF COL											*
 * return      : void															*
 *==============================================================================*/
void HLCD_voidGoToPosition(u8 Copy_u8RowNum,u8 Copy_u8ColNum)
{
    2142:	df 93       	push	r29
    2144:	cf 93       	push	r28
    2146:	00 d0       	rcall	.+0      	; 0x2148 <HLCD_voidGoToPosition+0x6>
    2148:	00 d0       	rcall	.+0      	; 0x214a <HLCD_voidGoToPosition+0x8>
    214a:	00 d0       	rcall	.+0      	; 0x214c <HLCD_voidGoToPosition+0xa>
    214c:	cd b7       	in	r28, 0x3d	; 61
    214e:	de b7       	in	r29, 0x3e	; 62
    2150:	8d 83       	std	Y+5, r24	; 0x05
    2152:	6e 83       	std	Y+6, r22	; 0x06
	u8 arr[4] ={0x80,0xC0,0x90,0xD0};
    2154:	80 e8       	ldi	r24, 0x80	; 128
    2156:	89 83       	std	Y+1, r24	; 0x01
    2158:	80 ec       	ldi	r24, 0xC0	; 192
    215a:	8a 83       	std	Y+2, r24	; 0x02
    215c:	80 e9       	ldi	r24, 0x90	; 144
    215e:	8b 83       	std	Y+3, r24	; 0x03
    2160:	80 ed       	ldi	r24, 0xD0	; 208
    2162:	8c 83       	std	Y+4, r24	; 0x04
	HLCD_voidSendCommand(arr[Copy_u8RowNum] + Copy_u8ColNum);
    2164:	8d 81       	ldd	r24, Y+5	; 0x05
    2166:	28 2f       	mov	r18, r24
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	ce 01       	movw	r24, r28
    216c:	01 96       	adiw	r24, 0x01	; 1
    216e:	fc 01       	movw	r30, r24
    2170:	e2 0f       	add	r30, r18
    2172:	f3 1f       	adc	r31, r19
    2174:	90 81       	ld	r25, Z
    2176:	8e 81       	ldd	r24, Y+6	; 0x06
    2178:	89 0f       	add	r24, r25
    217a:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <HLCD_voidSendCommand>
}
    217e:	26 96       	adiw	r28, 0x06	; 6
    2180:	0f b6       	in	r0, 0x3f	; 63
    2182:	f8 94       	cli
    2184:	de bf       	out	0x3e, r29	; 62
    2186:	0f be       	out	0x3f, r0	; 63
    2188:	cd bf       	out	0x3d, r28	; 61
    218a:	cf 91       	pop	r28
    218c:	df 91       	pop	r29
    218e:	08 95       	ret

00002190 <HLCD_voidDisplayNumber>:
 * Description : Send NUMBER to LCD												*
 * Arguments   : NUMBER															*
 * return      : void															*
 *==============================================================================*/
void HLCD_voidDisplayNumber(s32 Copy_s32Number)
{
    2190:	df 93       	push	r29
    2192:	cf 93       	push	r28
    2194:	cd b7       	in	r28, 0x3d	; 61
    2196:	de b7       	in	r29, 0x3e	; 62
    2198:	60 97       	sbiw	r28, 0x10	; 16
    219a:	0f b6       	in	r0, 0x3f	; 63
    219c:	f8 94       	cli
    219e:	de bf       	out	0x3e, r29	; 62
    21a0:	0f be       	out	0x3f, r0	; 63
    21a2:	cd bf       	out	0x3d, r28	; 61
    21a4:	6d 87       	std	Y+13, r22	; 0x0d
    21a6:	7e 87       	std	Y+14, r23	; 0x0e
    21a8:	8f 87       	std	Y+15, r24	; 0x0f
    21aa:	98 8b       	std	Y+16, r25	; 0x10
	if(Copy_s32Number == 0)
    21ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    21b0:	af 85       	ldd	r26, Y+15	; 0x0f
    21b2:	b8 89       	ldd	r27, Y+16	; 0x10
    21b4:	00 97       	sbiw	r24, 0x00	; 0
    21b6:	a1 05       	cpc	r26, r1
    21b8:	b1 05       	cpc	r27, r1
    21ba:	21 f4       	brne	.+8      	; 0x21c4 <HLCD_voidDisplayNumber+0x34>
	{
		HLCD_voidSendData('0');
    21bc:	80 e3       	ldi	r24, 0x30	; 48
    21be:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <HLCD_voidSendData>
    21c2:	65 c0       	rjmp	.+202    	; 0x228e <HLCD_voidDisplayNumber+0xfe>
	}
	else if(Copy_s32Number > 0  )
    21c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    21c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    21c8:	af 85       	ldd	r26, Y+15	; 0x0f
    21ca:	b8 89       	ldd	r27, Y+16	; 0x10
    21cc:	18 16       	cp	r1, r24
    21ce:	19 06       	cpc	r1, r25
    21d0:	1a 06       	cpc	r1, r26
    21d2:	1b 06       	cpc	r1, r27
    21d4:	0c f0       	brlt	.+2      	; 0x21d8 <HLCD_voidDisplayNumber+0x48>
    21d6:	5b c0       	rjmp	.+182    	; 0x228e <HLCD_voidDisplayNumber+0xfe>
	{
		s8 i=0;
    21d8:	1a 82       	std	Y+2, r1	; 0x02
	    u8 Copy_u8Remander = 0;
    21da:	19 82       	std	Y+1, r1	; 0x01
	    u8 arr[10] = {0};
    21dc:	8a e0       	ldi	r24, 0x0A	; 10
    21de:	fe 01       	movw	r30, r28
    21e0:	33 96       	adiw	r30, 0x03	; 3
    21e2:	df 01       	movw	r26, r30
    21e4:	98 2f       	mov	r25, r24
    21e6:	1d 92       	st	X+, r1
    21e8:	9a 95       	dec	r25
    21ea:	e9 f7       	brne	.-6      	; 0x21e6 <HLCD_voidDisplayNumber+0x56>
    21ec:	30 c0       	rjmp	.+96     	; 0x224e <HLCD_voidDisplayNumber+0xbe>
	    while(Copy_s32Number != 0)
	    {
	    	Copy_u8Remander = Copy_s32Number % 10;
    21ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    21f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    21f2:	af 85       	ldd	r26, Y+15	; 0x0f
    21f4:	b8 89       	ldd	r27, Y+16	; 0x10
    21f6:	2a e0       	ldi	r18, 0x0A	; 10
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	40 e0       	ldi	r20, 0x00	; 0
    21fc:	50 e0       	ldi	r21, 0x00	; 0
    21fe:	bc 01       	movw	r22, r24
    2200:	cd 01       	movw	r24, r26
    2202:	0e 94 ce 12 	call	0x259c	; 0x259c <__divmodsi4>
    2206:	dc 01       	movw	r26, r24
    2208:	cb 01       	movw	r24, r22
    220a:	89 83       	std	Y+1, r24	; 0x01
	    	arr[i] = Copy_u8Remander;
    220c:	8a 81       	ldd	r24, Y+2	; 0x02
    220e:	28 2f       	mov	r18, r24
    2210:	33 27       	eor	r19, r19
    2212:	27 fd       	sbrc	r18, 7
    2214:	30 95       	com	r19
    2216:	ce 01       	movw	r24, r28
    2218:	03 96       	adiw	r24, 0x03	; 3
    221a:	fc 01       	movw	r30, r24
    221c:	e2 0f       	add	r30, r18
    221e:	f3 1f       	adc	r31, r19
    2220:	89 81       	ldd	r24, Y+1	; 0x01
    2222:	80 83       	st	Z, r24
	    	i++;
    2224:	8a 81       	ldd	r24, Y+2	; 0x02
    2226:	8f 5f       	subi	r24, 0xFF	; 255
    2228:	8a 83       	std	Y+2, r24	; 0x02
	    	Copy_s32Number /= 10;
    222a:	8d 85       	ldd	r24, Y+13	; 0x0d
    222c:	9e 85       	ldd	r25, Y+14	; 0x0e
    222e:	af 85       	ldd	r26, Y+15	; 0x0f
    2230:	b8 89       	ldd	r27, Y+16	; 0x10
    2232:	2a e0       	ldi	r18, 0x0A	; 10
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	40 e0       	ldi	r20, 0x00	; 0
    2238:	50 e0       	ldi	r21, 0x00	; 0
    223a:	bc 01       	movw	r22, r24
    223c:	cd 01       	movw	r24, r26
    223e:	0e 94 ce 12 	call	0x259c	; 0x259c <__divmodsi4>
    2242:	da 01       	movw	r26, r20
    2244:	c9 01       	movw	r24, r18
    2246:	8d 87       	std	Y+13, r24	; 0x0d
    2248:	9e 87       	std	Y+14, r25	; 0x0e
    224a:	af 87       	std	Y+15, r26	; 0x0f
    224c:	b8 8b       	std	Y+16, r27	; 0x10
	else if(Copy_s32Number > 0  )
	{
		s8 i=0;
	    u8 Copy_u8Remander = 0;
	    u8 arr[10] = {0};
	    while(Copy_s32Number != 0)
    224e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2250:	9e 85       	ldd	r25, Y+14	; 0x0e
    2252:	af 85       	ldd	r26, Y+15	; 0x0f
    2254:	b8 89       	ldd	r27, Y+16	; 0x10
    2256:	00 97       	sbiw	r24, 0x00	; 0
    2258:	a1 05       	cpc	r26, r1
    225a:	b1 05       	cpc	r27, r1
    225c:	41 f6       	brne	.-112    	; 0x21ee <HLCD_voidDisplayNumber+0x5e>
	    	Copy_u8Remander = Copy_s32Number % 10;
	    	arr[i] = Copy_u8Remander;
	    	i++;
	    	Copy_s32Number /= 10;
	    }
	    i--;
    225e:	8a 81       	ldd	r24, Y+2	; 0x02
    2260:	81 50       	subi	r24, 0x01	; 1
    2262:	8a 83       	std	Y+2, r24	; 0x02
    2264:	11 c0       	rjmp	.+34     	; 0x2288 <HLCD_voidDisplayNumber+0xf8>
	    while(i >= 0)
	    {
	    	HLCD_voidSendData(arr[i] + 48);
    2266:	8a 81       	ldd	r24, Y+2	; 0x02
    2268:	28 2f       	mov	r18, r24
    226a:	33 27       	eor	r19, r19
    226c:	27 fd       	sbrc	r18, 7
    226e:	30 95       	com	r19
    2270:	ce 01       	movw	r24, r28
    2272:	03 96       	adiw	r24, 0x03	; 3
    2274:	fc 01       	movw	r30, r24
    2276:	e2 0f       	add	r30, r18
    2278:	f3 1f       	adc	r31, r19
    227a:	80 81       	ld	r24, Z
    227c:	80 5d       	subi	r24, 0xD0	; 208
    227e:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <HLCD_voidSendData>
	    	i--;	
    2282:	8a 81       	ldd	r24, Y+2	; 0x02
    2284:	81 50       	subi	r24, 0x01	; 1
    2286:	8a 83       	std	Y+2, r24	; 0x02
	    	arr[i] = Copy_u8Remander;
	    	i++;
	    	Copy_s32Number /= 10;
	    }
	    i--;
	    while(i >= 0)
    2288:	8a 81       	ldd	r24, Y+2	; 0x02
    228a:	88 23       	and	r24, r24
    228c:	64 f7       	brge	.-40     	; 0x2266 <HLCD_voidDisplayNumber+0xd6>
	    	HLCD_voidSendData(arr[i] + 48);
	    	i--;	
	    }
	    
	}
}
    228e:	60 96       	adiw	r28, 0x10	; 16
    2290:	0f b6       	in	r0, 0x3f	; 63
    2292:	f8 94       	cli
    2294:	de bf       	out	0x3e, r29	; 62
    2296:	0f be       	out	0x3f, r0	; 63
    2298:	cd bf       	out	0x3d, r28	; 61
    229a:	cf 91       	pop	r28
    229c:	df 91       	pop	r29
    229e:	08 95       	ret

000022a0 <HLCD_voidDisplaySpecialChar>:
 * Description : Send SpecialChar to LCD																				 *
 * Arguments   : SpecialChar ,	CGRam_index ,N.OF ROW , N.OF COL														 *
 * return      : void																									 *
 *=======================================================================================================================*/
void HLCD_voidDisplaySpecialChar(u8* Ptr_u8PtrChar,u8 CGRam_index,u8 Copy_u8RowNum,u8 Copy_u8ColNum)
{
    22a0:	df 93       	push	r29
    22a2:	cf 93       	push	r28
    22a4:	cd b7       	in	r28, 0x3d	; 61
    22a6:	de b7       	in	r29, 0x3e	; 62
    22a8:	27 97       	sbiw	r28, 0x07	; 7
    22aa:	0f b6       	in	r0, 0x3f	; 63
    22ac:	f8 94       	cli
    22ae:	de bf       	out	0x3e, r29	; 62
    22b0:	0f be       	out	0x3f, r0	; 63
    22b2:	cd bf       	out	0x3d, r28	; 61
    22b4:	9c 83       	std	Y+4, r25	; 0x04
    22b6:	8b 83       	std	Y+3, r24	; 0x03
    22b8:	6d 83       	std	Y+5, r22	; 0x05
    22ba:	4e 83       	std	Y+6, r20	; 0x06
    22bc:	2f 83       	std	Y+7, r18	; 0x07
	HLCD_voidGoToPosition( Copy_u8RowNum, Copy_u8ColNum);
    22be:	8e 81       	ldd	r24, Y+6	; 0x06
    22c0:	6f 81       	ldd	r22, Y+7	; 0x07
    22c2:	0e 94 a1 10 	call	0x2142	; 0x2142 <HLCD_voidGoToPosition>
	HLCD_voidSendData(CGRam_index);
    22c6:	8d 81       	ldd	r24, Y+5	; 0x05
    22c8:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <HLCD_voidSendData>
	u8 Local_u8address;
	u8 Local_u8Index;
	if (CGRam_index < 8)
    22cc:	8d 81       	ldd	r24, Y+5	; 0x05
    22ce:	88 30       	cpi	r24, 0x08	; 8
    22d0:	18 f5       	brcc	.+70     	; 0x2318 <HLCD_voidDisplaySpecialChar+0x78>
	{
		Local_u8address= CGRam_index * 8;
    22d2:	8d 81       	ldd	r24, Y+5	; 0x05
    22d4:	88 2f       	mov	r24, r24
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	88 0f       	add	r24, r24
    22da:	99 1f       	adc	r25, r25
    22dc:	88 0f       	add	r24, r24
    22de:	99 1f       	adc	r25, r25
    22e0:	88 0f       	add	r24, r24
    22e2:	99 1f       	adc	r25, r25
    22e4:	8a 83       	std	Y+2, r24	; 0x02
		Local_u8address= SET_BIT(Local_u8address,6);
    22e6:	8a 81       	ldd	r24, Y+2	; 0x02
    22e8:	80 64       	ori	r24, 0x40	; 64
    22ea:	8a 83       	std	Y+2, r24	; 0x02
		HLCD_voidSendCommand(Local_u8address);
    22ec:	8a 81       	ldd	r24, Y+2	; 0x02
    22ee:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <HLCD_voidSendCommand>
		for(Local_u8Index = 0;Local_u8Index < 8;Local_u8Index++)
    22f2:	19 82       	std	Y+1, r1	; 0x01
    22f4:	0e c0       	rjmp	.+28     	; 0x2312 <HLCD_voidDisplaySpecialChar+0x72>
		{
			HLCD_voidSendData(Ptr_u8PtrChar[Local_u8Index]);
    22f6:	89 81       	ldd	r24, Y+1	; 0x01
    22f8:	28 2f       	mov	r18, r24
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	8b 81       	ldd	r24, Y+3	; 0x03
    22fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2300:	fc 01       	movw	r30, r24
    2302:	e2 0f       	add	r30, r18
    2304:	f3 1f       	adc	r31, r19
    2306:	80 81       	ld	r24, Z
    2308:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <HLCD_voidSendData>
	if (CGRam_index < 8)
	{
		Local_u8address= CGRam_index * 8;
		Local_u8address= SET_BIT(Local_u8address,6);
		HLCD_voidSendCommand(Local_u8address);
		for(Local_u8Index = 0;Local_u8Index < 8;Local_u8Index++)
    230c:	89 81       	ldd	r24, Y+1	; 0x01
    230e:	8f 5f       	subi	r24, 0xFF	; 255
    2310:	89 83       	std	Y+1, r24	; 0x01
    2312:	89 81       	ldd	r24, Y+1	; 0x01
    2314:	88 30       	cpi	r24, 0x08	; 8
    2316:	78 f3       	brcs	.-34     	; 0x22f6 <HLCD_voidDisplaySpecialChar+0x56>
		{
			HLCD_voidSendData(Ptr_u8PtrChar[Local_u8Index]);
		}
	}
	HLCD_voidSendCommand(0x02);
    2318:	82 e0       	ldi	r24, 0x02	; 2
    231a:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <HLCD_voidSendCommand>

}
    231e:	27 96       	adiw	r28, 0x07	; 7
    2320:	0f b6       	in	r0, 0x3f	; 63
    2322:	f8 94       	cli
    2324:	de bf       	out	0x3e, r29	; 62
    2326:	0f be       	out	0x3f, r0	; 63
    2328:	cd bf       	out	0x3d, r28	; 61
    232a:	cf 91       	pop	r28
    232c:	df 91       	pop	r29
    232e:	08 95       	ret

00002330 <HKEYPAD_voidInit>:
 * Description : Set initialization direction of KEYPAD							*
 * Arguments   : void			 												*
 * return      : void															*
 *==============================================================================*/
void HKEYPAD_voidInit(void)
{
    2330:	df 93       	push	r29
    2332:	cf 93       	push	r28
    2334:	cd b7       	in	r28, 0x3d	; 61
    2336:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidSetPinDirection(KEYPAD_ROW_PORT,KEYPAD_R0,DIO_OUTPUT);
    2338:	81 e0       	ldi	r24, 0x01	; 1
    233a:	60 e0       	ldi	r22, 0x00	; 0
    233c:	41 e0       	ldi	r20, 0x01	; 1
    233e:	0e 94 3c 09 	call	0x1278	; 0x1278 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(KEYPAD_ROW_PORT,KEYPAD_R1,DIO_OUTPUT);
    2342:	81 e0       	ldi	r24, 0x01	; 1
    2344:	61 e0       	ldi	r22, 0x01	; 1
    2346:	41 e0       	ldi	r20, 0x01	; 1
    2348:	0e 94 3c 09 	call	0x1278	; 0x1278 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(KEYPAD_ROW_PORT,KEYPAD_R2,DIO_OUTPUT);
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	62 e0       	ldi	r22, 0x02	; 2
    2350:	41 e0       	ldi	r20, 0x01	; 1
    2352:	0e 94 3c 09 	call	0x1278	; 0x1278 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(KEYPAD_ROW_PORT,KEYPAD_R3,DIO_OUTPUT);
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	63 e0       	ldi	r22, 0x03	; 3
    235a:	41 e0       	ldi	r20, 0x01	; 1
    235c:	0e 94 3c 09 	call	0x1278	; 0x1278 <MDIO_voidSetPinDirection>
	
	MDIO_voidSetPinValue(KEYPAD_ROW_PORT,KEYPAD_R0,DIO_HIGH);
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	60 e0       	ldi	r22, 0x00	; 0
    2364:	41 e0       	ldi	r20, 0x01	; 1
    2366:	0e 94 2e 0a 	call	0x145c	; 0x145c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(KEYPAD_ROW_PORT,KEYPAD_R1,DIO_HIGH);
    236a:	81 e0       	ldi	r24, 0x01	; 1
    236c:	61 e0       	ldi	r22, 0x01	; 1
    236e:	41 e0       	ldi	r20, 0x01	; 1
    2370:	0e 94 2e 0a 	call	0x145c	; 0x145c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(KEYPAD_ROW_PORT,KEYPAD_R2,DIO_HIGH);
    2374:	81 e0       	ldi	r24, 0x01	; 1
    2376:	62 e0       	ldi	r22, 0x02	; 2
    2378:	41 e0       	ldi	r20, 0x01	; 1
    237a:	0e 94 2e 0a 	call	0x145c	; 0x145c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(KEYPAD_ROW_PORT,KEYPAD_R3,DIO_HIGH);
    237e:	81 e0       	ldi	r24, 0x01	; 1
    2380:	63 e0       	ldi	r22, 0x03	; 3
    2382:	41 e0       	ldi	r20, 0x01	; 1
    2384:	0e 94 2e 0a 	call	0x145c	; 0x145c <MDIO_voidSetPinValue>
	
	MDIO_voidSetPinDirection(KEYPAD_COL_PORT,KEYPAD_C0,DIO_INPUT);
    2388:	82 e0       	ldi	r24, 0x02	; 2
    238a:	64 e0       	ldi	r22, 0x04	; 4
    238c:	40 e0       	ldi	r20, 0x00	; 0
    238e:	0e 94 3c 09 	call	0x1278	; 0x1278 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(KEYPAD_COL_PORT,KEYPAD_C1,DIO_INPUT);
    2392:	82 e0       	ldi	r24, 0x02	; 2
    2394:	65 e0       	ldi	r22, 0x05	; 5
    2396:	40 e0       	ldi	r20, 0x00	; 0
    2398:	0e 94 3c 09 	call	0x1278	; 0x1278 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(KEYPAD_COL_PORT,KEYPAD_C2,DIO_INPUT);
    239c:	82 e0       	ldi	r24, 0x02	; 2
    239e:	66 e0       	ldi	r22, 0x06	; 6
    23a0:	40 e0       	ldi	r20, 0x00	; 0
    23a2:	0e 94 3c 09 	call	0x1278	; 0x1278 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(KEYPAD_COL_PORT,KEYPAD_C3,DIO_INPUT);
    23a6:	82 e0       	ldi	r24, 0x02	; 2
    23a8:	67 e0       	ldi	r22, 0x07	; 7
    23aa:	40 e0       	ldi	r20, 0x00	; 0
    23ac:	0e 94 3c 09 	call	0x1278	; 0x1278 <MDIO_voidSetPinDirection>
}
    23b0:	cf 91       	pop	r28
    23b2:	df 91       	pop	r29
    23b4:	08 95       	ret

000023b6 <HKEYPAD_u8GetPressedKey>:
 * Description : value of keypad												*
 * Arguments   : void					 										*
 * return      : value of keypad												*
 *==============================================================================*/
u8 HKEYPAD_u8GetPressedKey (void)
{
    23b6:	df 93       	push	r29
    23b8:	cf 93       	push	r28
    23ba:	00 d0       	rcall	.+0      	; 0x23bc <HKEYPAD_u8GetPressedKey+0x6>
    23bc:	00 d0       	rcall	.+0      	; 0x23be <HKEYPAD_u8GetPressedKey+0x8>
    23be:	cd b7       	in	r28, 0x3d	; 61
    23c0:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Reading = 0;
    23c2:	1c 82       	std	Y+4, r1	; 0x04
		u8 Local_u8Row = 0;
    23c4:	1b 82       	std	Y+3, r1	; 0x03
		u8 Local_u8Col = 0;
    23c6:	1a 82       	std	Y+2, r1	; 0x02

		u8 Local_value = RELEASED;
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	89 83       	std	Y+1, r24	; 0x01
		for (Local_u8Row = KEYPAD_R0 ; Local_u8Row <= KEYPAD_R3 ; Local_u8Row++)
    23cc:	1b 82       	std	Y+3, r1	; 0x03
    23ce:	3e c0       	rjmp	.+124    	; 0x244c <HKEYPAD_u8GetPressedKey+0x96>
		{
			MDIO_voidSetPinValue(KEYPAD_ROW_PORT,Local_u8Row,DIO_LOW);
    23d0:	81 e0       	ldi	r24, 0x01	; 1
    23d2:	6b 81       	ldd	r22, Y+3	; 0x03
    23d4:	40 e0       	ldi	r20, 0x00	; 0
    23d6:	0e 94 2e 0a 	call	0x145c	; 0x145c <MDIO_voidSetPinValue>
			for (Local_u8Col = KEYPAD_C0 ; Local_u8Col <= KEYPAD_C3 ; Local_u8Col++)
    23da:	84 e0       	ldi	r24, 0x04	; 4
    23dc:	8a 83       	std	Y+2, r24	; 0x02
    23de:	2b c0       	rjmp	.+86     	; 0x2436 <HKEYPAD_u8GetPressedKey+0x80>
			{
				Local_value = MDIO_u8GetPinValue(KEYPAD_COL_PORT,Local_u8Col);
    23e0:	82 e0       	ldi	r24, 0x02	; 2
    23e2:	6a 81       	ldd	r22, Y+2	; 0x02
    23e4:	0e 94 a2 0b 	call	0x1744	; 0x1744 <MDIO_u8GetPinValue>
    23e8:	89 83       	std	Y+1, r24	; 0x01
				if(Local_value == PRESSED)
    23ea:	89 81       	ldd	r24, Y+1	; 0x01
    23ec:	88 23       	and	r24, r24
    23ee:	01 f5       	brne	.+64     	; 0x2430 <HKEYPAD_u8GetPressedKey+0x7a>
				{
					Local_value = MDIO_u8GetPinValue(KEYPAD_COL_PORT,Local_u8Col);
    23f0:	82 e0       	ldi	r24, 0x02	; 2
    23f2:	6a 81       	ldd	r22, Y+2	; 0x02
    23f4:	0e 94 a2 0b 	call	0x1744	; 0x1744 <MDIO_u8GetPinValue>
    23f8:	89 83       	std	Y+1, r24	; 0x01

					while(MDIO_u8GetPinValue(KEYPAD_COL_PORT,Local_u8Col) == PRESSED);
    23fa:	82 e0       	ldi	r24, 0x02	; 2
    23fc:	6a 81       	ldd	r22, Y+2	; 0x02
    23fe:	0e 94 a2 0b 	call	0x1744	; 0x1744 <MDIO_u8GetPinValue>
    2402:	88 23       	and	r24, r24
    2404:	d1 f3       	breq	.-12     	; 0x23fa <HKEYPAD_u8GetPressedKey+0x44>
					Local_u8Reading = arr[Local_u8Row - KEYPAD_R0][Local_u8Col - KEYPAD_C0];
    2406:	8b 81       	ldd	r24, Y+3	; 0x03
    2408:	48 2f       	mov	r20, r24
    240a:	50 e0       	ldi	r21, 0x00	; 0
    240c:	8a 81       	ldd	r24, Y+2	; 0x02
    240e:	88 2f       	mov	r24, r24
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	9c 01       	movw	r18, r24
    2414:	24 50       	subi	r18, 0x04	; 4
    2416:	30 40       	sbci	r19, 0x00	; 0
    2418:	ca 01       	movw	r24, r20
    241a:	88 0f       	add	r24, r24
    241c:	99 1f       	adc	r25, r25
    241e:	88 0f       	add	r24, r24
    2420:	99 1f       	adc	r25, r25
    2422:	82 0f       	add	r24, r18
    2424:	93 1f       	adc	r25, r19
    2426:	fc 01       	movw	r30, r24
    2428:	e8 59       	subi	r30, 0x98	; 152
    242a:	ff 4f       	sbci	r31, 0xFF	; 255
    242c:	80 81       	ld	r24, Z
    242e:	8c 83       	std	Y+4, r24	; 0x04

		u8 Local_value = RELEASED;
		for (Local_u8Row = KEYPAD_R0 ; Local_u8Row <= KEYPAD_R3 ; Local_u8Row++)
		{
			MDIO_voidSetPinValue(KEYPAD_ROW_PORT,Local_u8Row,DIO_LOW);
			for (Local_u8Col = KEYPAD_C0 ; Local_u8Col <= KEYPAD_C3 ; Local_u8Col++)
    2430:	8a 81       	ldd	r24, Y+2	; 0x02
    2432:	8f 5f       	subi	r24, 0xFF	; 255
    2434:	8a 83       	std	Y+2, r24	; 0x02
    2436:	8a 81       	ldd	r24, Y+2	; 0x02
    2438:	88 30       	cpi	r24, 0x08	; 8
    243a:	90 f2       	brcs	.-92     	; 0x23e0 <HKEYPAD_u8GetPressedKey+0x2a>

					while(MDIO_u8GetPinValue(KEYPAD_COL_PORT,Local_u8Col) == PRESSED);
					Local_u8Reading = arr[Local_u8Row - KEYPAD_R0][Local_u8Col - KEYPAD_C0];
				}
			}
			MDIO_voidSetPinValue(KEYPAD_ROW_PORT,Local_u8Row,DIO_HIGH);
    243c:	81 e0       	ldi	r24, 0x01	; 1
    243e:	6b 81       	ldd	r22, Y+3	; 0x03
    2440:	41 e0       	ldi	r20, 0x01	; 1
    2442:	0e 94 2e 0a 	call	0x145c	; 0x145c <MDIO_voidSetPinValue>
	u8 Local_u8Reading = 0;
		u8 Local_u8Row = 0;
		u8 Local_u8Col = 0;

		u8 Local_value = RELEASED;
		for (Local_u8Row = KEYPAD_R0 ; Local_u8Row <= KEYPAD_R3 ; Local_u8Row++)
    2446:	8b 81       	ldd	r24, Y+3	; 0x03
    2448:	8f 5f       	subi	r24, 0xFF	; 255
    244a:	8b 83       	std	Y+3, r24	; 0x03
    244c:	8b 81       	ldd	r24, Y+3	; 0x03
    244e:	84 30       	cpi	r24, 0x04	; 4
    2450:	08 f4       	brcc	.+2      	; 0x2454 <HKEYPAD_u8GetPressedKey+0x9e>
    2452:	be cf       	rjmp	.-132    	; 0x23d0 <HKEYPAD_u8GetPressedKey+0x1a>
					Local_u8Reading = arr[Local_u8Row - KEYPAD_R0][Local_u8Col - KEYPAD_C0];
				}
			}
			MDIO_voidSetPinValue(KEYPAD_ROW_PORT,Local_u8Row,DIO_HIGH);
		}
		return Local_u8Reading ;
    2454:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2456:	0f 90       	pop	r0
    2458:	0f 90       	pop	r0
    245a:	0f 90       	pop	r0
    245c:	0f 90       	pop	r0
    245e:	cf 91       	pop	r28
    2460:	df 91       	pop	r29
    2462:	08 95       	ret

00002464 <main>:

#define COM       1

#if     COM            ==         1
void main(void)
{
    2464:	df 93       	push	r29
    2466:	cf 93       	push	r28
    2468:	cd b7       	in	r28, 0x3d	; 61
    246a:	de b7       	in	r29, 0x3e	; 62
    246c:	60 97       	sbiw	r28, 0x10	; 16
    246e:	0f b6       	in	r0, 0x3f	; 63
    2470:	f8 94       	cli
    2472:	de bf       	out	0x3e, r29	; 62
    2474:	0f be       	out	0x3f, r0	; 63
    2476:	cd bf       	out	0x3d, r28	; 61
	MDIO_voidSetPinDirection(DIO_PORTD,DIO_PIN0,DIO_INPUT);    //RX PIN ==> PD0
    2478:	83 e0       	ldi	r24, 0x03	; 3
    247a:	60 e0       	ldi	r22, 0x00	; 0
    247c:	40 e0       	ldi	r20, 0x00	; 0
    247e:	0e 94 3c 09 	call	0x1278	; 0x1278 <MDIO_voidSetPinDirection>
	MUART_voidInit();
    2482:	0e 94 a3 05 	call	0xb46	; 0xb46 <MUART_voidInit>

	EEPROM_voidInit();
    2486:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <EEPROM_voidInit>
	//_delay_ms(1000);

	HLCD_voidInit();
    248a:	0e 94 1b 0c 	call	0x1836	; 0x1836 <HLCD_voidInit>
	u8 Local_Data = 0,Address = 0b00000000;
    248e:	18 8a       	std	Y+16, r1	; 0x10
    2490:	1f 86       	std	Y+15, r1	; 0x0f
	while(1)
	{
		//		Local_Data = MUART_u8ReciveData();
		//		EEPROM_voidWrite_Byte(0b10100000,Address,Local_Data);
		//		HLCD_voidSendData(Local_Data);
		EEPROM_u8Read_Byte(0b10100000,Address, &Local_Data);
    2492:	9e 01       	movw	r18, r28
    2494:	20 5f       	subi	r18, 0xF0	; 240
    2496:	3f 4f       	sbci	r19, 0xFF	; 255
    2498:	80 ea       	ldi	r24, 0xA0	; 160
    249a:	6f 85       	ldd	r22, Y+15	; 0x0f
    249c:	a9 01       	movw	r20, r18
    249e:	0e 94 17 09 	call	0x122e	; 0x122e <EEPROM_u8Read_Byte>
		HLCD_voidGoToPosition(0,1);
    24a2:	80 e0       	ldi	r24, 0x00	; 0
    24a4:	61 e0       	ldi	r22, 0x01	; 1
    24a6:	0e 94 a1 10 	call	0x2142	; 0x2142 <HLCD_voidGoToPosition>
		HLCD_voidSendData(Local_Data);
    24aa:	88 89       	ldd	r24, Y+16	; 0x10
    24ac:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <HLCD_voidSendData>
    24b0:	80 e0       	ldi	r24, 0x00	; 0
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	a0 e2       	ldi	r26, 0x20	; 32
    24b6:	b1 e4       	ldi	r27, 0x41	; 65
    24b8:	8b 87       	std	Y+11, r24	; 0x0b
    24ba:	9c 87       	std	Y+12, r25	; 0x0c
    24bc:	ad 87       	std	Y+13, r26	; 0x0d
    24be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    24c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    24c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    24c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    24c8:	20 e0       	ldi	r18, 0x00	; 0
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	4a ef       	ldi	r20, 0xFA	; 250
    24ce:	54 e4       	ldi	r21, 0x44	; 68
    24d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d4:	dc 01       	movw	r26, r24
    24d6:	cb 01       	movw	r24, r22
    24d8:	8f 83       	std	Y+7, r24	; 0x07
    24da:	98 87       	std	Y+8, r25	; 0x08
    24dc:	a9 87       	std	Y+9, r26	; 0x09
    24de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24e0:	6f 81       	ldd	r22, Y+7	; 0x07
    24e2:	78 85       	ldd	r23, Y+8	; 0x08
    24e4:	89 85       	ldd	r24, Y+9	; 0x09
    24e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24e8:	20 e0       	ldi	r18, 0x00	; 0
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	40 e8       	ldi	r20, 0x80	; 128
    24ee:	5f e3       	ldi	r21, 0x3F	; 63
    24f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24f4:	88 23       	and	r24, r24
    24f6:	2c f4       	brge	.+10     	; 0x2502 <main+0x9e>
		__ticks = 1;
    24f8:	81 e0       	ldi	r24, 0x01	; 1
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	9e 83       	std	Y+6, r25	; 0x06
    24fe:	8d 83       	std	Y+5, r24	; 0x05
    2500:	3f c0       	rjmp	.+126    	; 0x2580 <main+0x11c>
	else if (__tmp > 65535)
    2502:	6f 81       	ldd	r22, Y+7	; 0x07
    2504:	78 85       	ldd	r23, Y+8	; 0x08
    2506:	89 85       	ldd	r24, Y+9	; 0x09
    2508:	9a 85       	ldd	r25, Y+10	; 0x0a
    250a:	20 e0       	ldi	r18, 0x00	; 0
    250c:	3f ef       	ldi	r19, 0xFF	; 255
    250e:	4f e7       	ldi	r20, 0x7F	; 127
    2510:	57 e4       	ldi	r21, 0x47	; 71
    2512:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2516:	18 16       	cp	r1, r24
    2518:	4c f5       	brge	.+82     	; 0x256c <main+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    251a:	6b 85       	ldd	r22, Y+11	; 0x0b
    251c:	7c 85       	ldd	r23, Y+12	; 0x0c
    251e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2520:	9e 85       	ldd	r25, Y+14	; 0x0e
    2522:	20 e0       	ldi	r18, 0x00	; 0
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	40 e2       	ldi	r20, 0x20	; 32
    2528:	51 e4       	ldi	r21, 0x41	; 65
    252a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    252e:	dc 01       	movw	r26, r24
    2530:	cb 01       	movw	r24, r22
    2532:	bc 01       	movw	r22, r24
    2534:	cd 01       	movw	r24, r26
    2536:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    253a:	dc 01       	movw	r26, r24
    253c:	cb 01       	movw	r24, r22
    253e:	9e 83       	std	Y+6, r25	; 0x06
    2540:	8d 83       	std	Y+5, r24	; 0x05
    2542:	0f c0       	rjmp	.+30     	; 0x2562 <main+0xfe>
    2544:	88 ec       	ldi	r24, 0xC8	; 200
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	9c 83       	std	Y+4, r25	; 0x04
    254a:	8b 83       	std	Y+3, r24	; 0x03
    254c:	8b 81       	ldd	r24, Y+3	; 0x03
    254e:	9c 81       	ldd	r25, Y+4	; 0x04
    2550:	01 97       	sbiw	r24, 0x01	; 1
    2552:	f1 f7       	brne	.-4      	; 0x2550 <main+0xec>
    2554:	9c 83       	std	Y+4, r25	; 0x04
    2556:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2558:	8d 81       	ldd	r24, Y+5	; 0x05
    255a:	9e 81       	ldd	r25, Y+6	; 0x06
    255c:	01 97       	sbiw	r24, 0x01	; 1
    255e:	9e 83       	std	Y+6, r25	; 0x06
    2560:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2562:	8d 81       	ldd	r24, Y+5	; 0x05
    2564:	9e 81       	ldd	r25, Y+6	; 0x06
    2566:	00 97       	sbiw	r24, 0x00	; 0
    2568:	69 f7       	brne	.-38     	; 0x2544 <main+0xe0>
    256a:	14 c0       	rjmp	.+40     	; 0x2594 <main+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    256c:	6f 81       	ldd	r22, Y+7	; 0x07
    256e:	78 85       	ldd	r23, Y+8	; 0x08
    2570:	89 85       	ldd	r24, Y+9	; 0x09
    2572:	9a 85       	ldd	r25, Y+10	; 0x0a
    2574:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2578:	dc 01       	movw	r26, r24
    257a:	cb 01       	movw	r24, r22
    257c:	9e 83       	std	Y+6, r25	; 0x06
    257e:	8d 83       	std	Y+5, r24	; 0x05
    2580:	8d 81       	ldd	r24, Y+5	; 0x05
    2582:	9e 81       	ldd	r25, Y+6	; 0x06
    2584:	9a 83       	std	Y+2, r25	; 0x02
    2586:	89 83       	std	Y+1, r24	; 0x01
    2588:	89 81       	ldd	r24, Y+1	; 0x01
    258a:	9a 81       	ldd	r25, Y+2	; 0x02
    258c:	01 97       	sbiw	r24, 0x01	; 1
    258e:	f1 f7       	brne	.-4      	; 0x258c <main+0x128>
    2590:	9a 83       	std	Y+2, r25	; 0x02
    2592:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		Address++;
    2594:	8f 85       	ldd	r24, Y+15	; 0x0f
    2596:	8f 5f       	subi	r24, 0xFF	; 255
    2598:	8f 87       	std	Y+15, r24	; 0x0f
    259a:	7b cf       	rjmp	.-266    	; 0x2492 <main+0x2e>

0000259c <__divmodsi4>:
    259c:	97 fb       	bst	r25, 7
    259e:	09 2e       	mov	r0, r25
    25a0:	05 26       	eor	r0, r21
    25a2:	0e d0       	rcall	.+28     	; 0x25c0 <__divmodsi4_neg1>
    25a4:	57 fd       	sbrc	r21, 7
    25a6:	04 d0       	rcall	.+8      	; 0x25b0 <__divmodsi4_neg2>
    25a8:	14 d0       	rcall	.+40     	; 0x25d2 <__udivmodsi4>
    25aa:	0a d0       	rcall	.+20     	; 0x25c0 <__divmodsi4_neg1>
    25ac:	00 1c       	adc	r0, r0
    25ae:	38 f4       	brcc	.+14     	; 0x25be <__divmodsi4_exit>

000025b0 <__divmodsi4_neg2>:
    25b0:	50 95       	com	r21
    25b2:	40 95       	com	r20
    25b4:	30 95       	com	r19
    25b6:	21 95       	neg	r18
    25b8:	3f 4f       	sbci	r19, 0xFF	; 255
    25ba:	4f 4f       	sbci	r20, 0xFF	; 255
    25bc:	5f 4f       	sbci	r21, 0xFF	; 255

000025be <__divmodsi4_exit>:
    25be:	08 95       	ret

000025c0 <__divmodsi4_neg1>:
    25c0:	f6 f7       	brtc	.-4      	; 0x25be <__divmodsi4_exit>
    25c2:	90 95       	com	r25
    25c4:	80 95       	com	r24
    25c6:	70 95       	com	r23
    25c8:	61 95       	neg	r22
    25ca:	7f 4f       	sbci	r23, 0xFF	; 255
    25cc:	8f 4f       	sbci	r24, 0xFF	; 255
    25ce:	9f 4f       	sbci	r25, 0xFF	; 255
    25d0:	08 95       	ret

000025d2 <__udivmodsi4>:
    25d2:	a1 e2       	ldi	r26, 0x21	; 33
    25d4:	1a 2e       	mov	r1, r26
    25d6:	aa 1b       	sub	r26, r26
    25d8:	bb 1b       	sub	r27, r27
    25da:	fd 01       	movw	r30, r26
    25dc:	0d c0       	rjmp	.+26     	; 0x25f8 <__udivmodsi4_ep>

000025de <__udivmodsi4_loop>:
    25de:	aa 1f       	adc	r26, r26
    25e0:	bb 1f       	adc	r27, r27
    25e2:	ee 1f       	adc	r30, r30
    25e4:	ff 1f       	adc	r31, r31
    25e6:	a2 17       	cp	r26, r18
    25e8:	b3 07       	cpc	r27, r19
    25ea:	e4 07       	cpc	r30, r20
    25ec:	f5 07       	cpc	r31, r21
    25ee:	20 f0       	brcs	.+8      	; 0x25f8 <__udivmodsi4_ep>
    25f0:	a2 1b       	sub	r26, r18
    25f2:	b3 0b       	sbc	r27, r19
    25f4:	e4 0b       	sbc	r30, r20
    25f6:	f5 0b       	sbc	r31, r21

000025f8 <__udivmodsi4_ep>:
    25f8:	66 1f       	adc	r22, r22
    25fa:	77 1f       	adc	r23, r23
    25fc:	88 1f       	adc	r24, r24
    25fe:	99 1f       	adc	r25, r25
    2600:	1a 94       	dec	r1
    2602:	69 f7       	brne	.-38     	; 0x25de <__udivmodsi4_loop>
    2604:	60 95       	com	r22
    2606:	70 95       	com	r23
    2608:	80 95       	com	r24
    260a:	90 95       	com	r25
    260c:	9b 01       	movw	r18, r22
    260e:	ac 01       	movw	r20, r24
    2610:	bd 01       	movw	r22, r26
    2612:	cf 01       	movw	r24, r30
    2614:	08 95       	ret

00002616 <__prologue_saves__>:
    2616:	2f 92       	push	r2
    2618:	3f 92       	push	r3
    261a:	4f 92       	push	r4
    261c:	5f 92       	push	r5
    261e:	6f 92       	push	r6
    2620:	7f 92       	push	r7
    2622:	8f 92       	push	r8
    2624:	9f 92       	push	r9
    2626:	af 92       	push	r10
    2628:	bf 92       	push	r11
    262a:	cf 92       	push	r12
    262c:	df 92       	push	r13
    262e:	ef 92       	push	r14
    2630:	ff 92       	push	r15
    2632:	0f 93       	push	r16
    2634:	1f 93       	push	r17
    2636:	cf 93       	push	r28
    2638:	df 93       	push	r29
    263a:	cd b7       	in	r28, 0x3d	; 61
    263c:	de b7       	in	r29, 0x3e	; 62
    263e:	ca 1b       	sub	r28, r26
    2640:	db 0b       	sbc	r29, r27
    2642:	0f b6       	in	r0, 0x3f	; 63
    2644:	f8 94       	cli
    2646:	de bf       	out	0x3e, r29	; 62
    2648:	0f be       	out	0x3f, r0	; 63
    264a:	cd bf       	out	0x3d, r28	; 61
    264c:	09 94       	ijmp

0000264e <__epilogue_restores__>:
    264e:	2a 88       	ldd	r2, Y+18	; 0x12
    2650:	39 88       	ldd	r3, Y+17	; 0x11
    2652:	48 88       	ldd	r4, Y+16	; 0x10
    2654:	5f 84       	ldd	r5, Y+15	; 0x0f
    2656:	6e 84       	ldd	r6, Y+14	; 0x0e
    2658:	7d 84       	ldd	r7, Y+13	; 0x0d
    265a:	8c 84       	ldd	r8, Y+12	; 0x0c
    265c:	9b 84       	ldd	r9, Y+11	; 0x0b
    265e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2660:	b9 84       	ldd	r11, Y+9	; 0x09
    2662:	c8 84       	ldd	r12, Y+8	; 0x08
    2664:	df 80       	ldd	r13, Y+7	; 0x07
    2666:	ee 80       	ldd	r14, Y+6	; 0x06
    2668:	fd 80       	ldd	r15, Y+5	; 0x05
    266a:	0c 81       	ldd	r16, Y+4	; 0x04
    266c:	1b 81       	ldd	r17, Y+3	; 0x03
    266e:	aa 81       	ldd	r26, Y+2	; 0x02
    2670:	b9 81       	ldd	r27, Y+1	; 0x01
    2672:	ce 0f       	add	r28, r30
    2674:	d1 1d       	adc	r29, r1
    2676:	0f b6       	in	r0, 0x3f	; 63
    2678:	f8 94       	cli
    267a:	de bf       	out	0x3e, r29	; 62
    267c:	0f be       	out	0x3f, r0	; 63
    267e:	cd bf       	out	0x3d, r28	; 61
    2680:	ed 01       	movw	r28, r26
    2682:	08 95       	ret

00002684 <_exit>:
    2684:	f8 94       	cli

00002686 <__stop_program>:
    2686:	ff cf       	rjmp	.-2      	; 0x2686 <__stop_program>
